package eclinic.domain.logic;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Reader;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

// dev changes

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import com.ibatis.common.resources.Resources;
import com.ibatis.db.dao.DaoException;
import com.ibatis.db.dao.DaoManager;

import eclinic.anaesthesia.bean.AnaesthesiaBean;
import eclinic.anaesthesia.persistance.dao.iface.AnaesthesiaDao;
import eclinic.bupapoint.persistance.dao.iface.BupaPointDao;
import eclinic.cssd.bean.CSSDBean;
import eclinic.cssd.persistance.dao.iface.CSSDDao;
import eclinic.inpatient.bean.InPatientBean;
import eclinic.inpatient.persistance.dao.iface.IPBillingDao;
import eclinic.inpatient.persistance.dao.iface.IPConsultDao;
import eclinic.inpatient.persistance.dao.iface.IPInsuranceDao;
import eclinic.inpatient.persistance.dao.iface.InpatientDao;
import eclinic.laboratory.bean.LaboratoryBean;
import eclinic.laboratory.bean.QualityControlBean;
import eclinic.laboratory.persistance.dao.iface.LaboratoryDao;
import eclinic.laboratory.persistance.dao.iface.QualityControlDao;
import eclinic.mastersetup.bean.HierarchySetupBean;
import eclinic.mastersetup.persistance.dao.iface.HierarchyDao;
import eclinic.registration.bean.AccountBean;
import eclinic.registration.bean.AccountHeadsBean;
import eclinic.registration.bean.AppointmentBean;
import eclinic.registration.bean.AssetManageBean;
import eclinic.registration.bean.BirthHistoryBean;
import eclinic.registration.bean.BpeScoreBean;
import eclinic.registration.bean.ConsultationBean;
import eclinic.registration.bean.CounselingBean;
import eclinic.registration.bean.DashboardBean;
import eclinic.registration.bean.DocumentDetailBean;
import eclinic.registration.bean.EPrescriptionBean;
import eclinic.registration.bean.ERxParseBean;
import eclinic.registration.bean.GlassPrescriptionBean;
import eclinic.registration.bean.HistoryPresentIllBean;
import eclinic.registration.bean.InsuranceBean;
import eclinic.registration.bean.InsuranceParseBean;
import eclinic.registration.bean.LoginBean;
import eclinic.registration.bean.MedicalDecisionBean;
import eclinic.registration.bean.MedicalFormsBean;
import eclinic.registration.bean.MedicalPrivilegeBean;
import eclinic.registration.bean.OfficeLetterHeadBean;
import eclinic.registration.bean.ParameterBean;
import eclinic.registration.bean.PaymentBean;
import eclinic.registration.bean.PharmacyBean;
import eclinic.registration.bean.PhotoUploadBean;
import eclinic.registration.bean.ProductBean;
import eclinic.registration.bean.PurchaseBean;
import eclinic.registration.bean.QueryBean;
import eclinic.registration.bean.RegistrationBean;
import eclinic.registration.bean.ReportBean;
import eclinic.registration.bean.SetupBean;
import eclinic.registration.bean.SmsBean;
import eclinic.registration.bean.SupplierBean;
import eclinic.registration.bean.SurgeryBean;
import eclinic.registration.bean.UserBean;
import eclinic.registration.bean.VitalSignsBean;
import eclinic.registration.persistance.dao.iface.AccountDao;
import eclinic.registration.persistance.dao.iface.AppointmentDao;
import eclinic.registration.persistance.dao.iface.AssetManageDao;
import eclinic.registration.persistance.dao.iface.CommonDao;
import eclinic.registration.persistance.dao.iface.ConsultationDao;
import eclinic.registration.persistance.dao.iface.DashboardDao;
import eclinic.registration.persistance.dao.iface.EprescriptionDao;
import eclinic.registration.persistance.dao.iface.InsuranceDao;
import eclinic.registration.persistance.dao.iface.LoginDao;
import eclinic.registration.persistance.dao.iface.PaymentDao;
import eclinic.registration.persistance.dao.iface.ReceiptDao;
import eclinic.registration.persistance.dao.iface.RegistrationDao;
import eclinic.registration.persistance.dao.iface.ReportsDao;
import eclinic.registration.persistance.dao.iface.SetupDao;
import eclinic.registration.persistance.dao.iface.SupplierDao;
import eclinic.registration.persistance.dao.iface.SurgeryDao;
import eclinic.resources.ResourcesEclinic;
import eclinic.sales.bean.CustomSelectList;



public class ClinicLogic
{
	private static final String DB_NAME="MYSQL";//MYSQL,SAP_HANA
	public static final String SERVER_OS="WINDOWS";//WINDOWS,LINUX
	private static final ClinicLogic instance = new ClinicLogic();
	static final BusinessLogic businessLogic = BusinessLogic.getInstance();
	static final IPBusinessLogic ipLogic = IPBusinessLogic.getInstance();
	static final PathwayLogic pathwayLogic = PathwayLogic.getInstance();
	static final AccountHeadsBean accHeadsBean = AccountHeadsBean.getInstance();
	static final CommonLogic common = CommonLogic.getInstance();
	
	private static DaoManager eclinicDaoManager;
	private LoginDao loginDao;
	private SetupDao setupDao;
	private AppointmentDao appointDao;
	private RegistrationDao registrationDao;
	private AccountDao accountDao;
	private PaymentDao paymentDao;
	private ReceiptDao receiptDao;
	private DashboardDao dashboardDao;
	private InpatientDao inpatientDao;
	private IPConsultDao ipConsultDao;
	private IPBillingDao ipBillingDao;
	private InsuranceDao insuranceDao;
	private EprescriptionDao eprescriptionDao;
	private AssetManageDao assetManageDao;
	private HierarchyDao hierarchyDao;
	/**** E&M SERVICES @ START *********/
	private ConsultationDao consultationDao;
	/**** E&M SERVICES @ END *********/
	private BupaPointDao bupaPointDao;
	private IPInsuranceDao ipInsuranceDao;
	private LaboratoryDao laboratoryDao;
	private QualityControlDao qcDao ;
	private SurgeryDao surgeryDao;
	private ReportsDao reportsDao;
	private CSSDDao cssdDao;
	private AnaesthesiaDao anaesthesiaDao;
	private CommonDao commonDao;
	SupplierDao supplierDao;

	private static String context_path = "";
	ParameterBean parameterBean = null;
	Properties resrs = ResourcesEclinic.getResources();
	private ClinicLogic() 
	{
		try 
		{
			context_path = (String)resrs.get("context.path");
			
			String resource = "";

			if(DB_NAME=="MYSQL")
				resource="eclinic/properties/dao_mysql.xml";
			else if(DB_NAME=="SAP_HANA")
				resource="eclinic/properties/dao_sap.xml";

			Reader reader = Resources.getResourceAsReader(resource);
			if (reader != null) 
			{
				System.out.println("Reader Initialized");
			}
			DaoManager.configure(reader);
			System.out.println("DaoManager Configured");

			eclinicDaoManager = DaoManager.getInstance("eclinicDaoManager");
			System.out.println("DaoManager Initialized");

			loginDao = (LoginDao) eclinicDaoManager.getDao("Login");
			setupDao = (SetupDao) eclinicDaoManager.getDao("Setup");
			appointDao = (AppointmentDao) eclinicDaoManager.getDao("Appointment");
			registrationDao = (RegistrationDao) eclinicDaoManager.getDao("Registration");
			accountDao = (AccountDao) eclinicDaoManager.getDao("Account");
			paymentDao = (PaymentDao) eclinicDaoManager.getDao("Payment");
			receiptDao = (ReceiptDao) eclinicDaoManager.getDao("Receipt");
			dashboardDao = (DashboardDao) eclinicDaoManager.getDao("Dashboard");
			insuranceDao = (InsuranceDao) eclinicDaoManager.getDao("Insurance");
			eprescriptionDao=(EprescriptionDao)eclinicDaoManager.getDao("Eprescription");
			inpatientDao=(InpatientDao)eclinicDaoManager.getDao("InPatient");
			ipConsultDao=(IPConsultDao)eclinicDaoManager.getDao("IPConsult");
			ipBillingDao=(IPBillingDao)eclinicDaoManager.getDao("IPBilling");
			/**** E&M SERVICES @ START *********/
			consultationDao=(ConsultationDao)eclinicDaoManager.getDao("Consultation");
			/**** E&M SERVICES @ END *********/
			bupaPointDao=(BupaPointDao)eclinicDaoManager.getDao("BupaPoint");
			ipInsuranceDao=(IPInsuranceDao)eclinicDaoManager.getDao("IPInsurance");
			assetManageDao=(AssetManageDao)eclinicDaoManager.getDao("AssetManage");

			hierarchyDao=(HierarchyDao)eclinicDaoManager.getDao("Hierarchy");

			laboratoryDao=(LaboratoryDao)eclinicDaoManager.getDao("Laboratory");
			qcDao = (QualityControlDao) eclinicDaoManager.getDao("QualityControl");
			surgeryDao = (SurgeryDao) eclinicDaoManager.getDao("Surgery");
			reportsDao = (ReportsDao) eclinicDaoManager.getDao("Reports");
			cssdDao = (CSSDDao)eclinicDaoManager.getDao("CSSD");
			anaesthesiaDao = (AnaesthesiaDao)eclinicDaoManager.getDao("Anaesthesia");
			supplierDao = (SupplierDao) eclinicDaoManager.getDao("Supplier");
			commonDao = (CommonDao) eclinicDaoManager.getDao("Common");
			reader.close();
		} 
		catch (Exception e) 
		{
			throw new RuntimeException("Could not initialize admin BaseLogic.  Cause: " + e);
		}
	}

	public static ClinicLogic getInstance() 
	{
		return instance;
	}
	public static DaoManager getDaoManager() 
	{
		return eclinicDaoManager;
	}
	/**
	 * Audit Trial Implementation ---- Started on 04 March 2015
	 */
	public synchronized void auditLogEntry(Object logObj,HttpServletRequest request,String log_action,String log_remarks,String op_number,String consult_id,String table_name)
	{
		context_path = (String)resrs.get("context.path");
		try {
			SimpleDateFormat sdf=new SimpleDateFormat("ddMMyyyyHHmmss");

			UserBean userBean=new UserBean();
			if(request.getAttribute("userDetails")!=null)
			{
				userBean=(UserBean)request.getAttribute("userDetails");
			}
			String user_id = userBean.getUser_id();
			String office_id = userBean.getOffice_id();
			String user_ip = request.getRemoteAddr();

			LoginBean logBean = new LoginBean();

			logBean.setLog_action(log_action);
			logBean.setLog_remarks(log_remarks);
			logBean.setUser_id(user_id);
			logBean.setConsult_id(consult_id);
			if(op_number!=null && !op_number.equals(""))
				logBean.setOp_number(op_number);
			else{
				if(consult_id!=null && !consult_id.equals("")){
					//RegistrationBean queryBean = new RegistrationBean();
					//queryBean.setQuery("select op_number from doctor_consult where consult_id='"+consult_id+"'");
					logBean.setOp_number(common.fetchValueWithSingleParam("doctor_consult", "op_number", "consult_id", consult_id, null, null));
				}
			}
			logBean.setUser_ip(user_ip);
			logBean.setOffice_id(office_id);
			logBean.setTable_name(table_name);
			eclinicDaoManager.startTransaction();
			loginDao.insertNewLogEntry(logBean);
			String log_id = loginDao.getLastInsertLogId();
			eclinicDaoManager.commitTransaction();			

			if(log_id!=null && log_action!=null && !log_action.equalsIgnoreCase("SELECT"))
			{
				if(context_path!=null && !context_path.equals("")){
					String file_name = "AuditLog_"+log_id+"_"+sdf.format(new Date())+".ser";
					String file_path = context_path+file_name;

					File log_file = new File(file_path);
					FileOutputStream fLogOut = new FileOutputStream(log_file);
					ObjectOutputStream objLogOut = new ObjectOutputStream(fLogOut);
					objLogOut.writeObject(logObj);
					objLogOut.flush();
					objLogOut.close();

					logBean.setLog_id(log_id);
					logBean.setSer_filename(file_name);
					eclinicDaoManager.startTransaction();
					loginDao.updateAuditLogFileName(logBean);
					eclinicDaoManager.commitTransaction();
				}
			}

		} catch (DaoException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public synchronized void auditLogEntryForLogic(Object logObj,HttpServletRequest request,String log_action,String log_remarks,String op_number,String consult_id,String table_name)
	{
		context_path = (String)resrs.get("context.path");
		try {
			SimpleDateFormat sdf=new SimpleDateFormat("ddMMyyyyHHmmss");

			UserBean userBean=new UserBean();
			if(request.getAttribute("userDetails")!=null)
			{
				userBean=(UserBean)request.getAttribute("userDetails");
			}
			String user_id = userBean.getUser_id();
			String office_id = userBean.getOffice_id();
			String user_ip = request.getRemoteAddr();

			LoginBean logBean = new LoginBean();

			logBean.setLog_action(log_action);
			logBean.setLog_remarks(log_remarks);
			logBean.setUser_id(user_id);
			logBean.setConsult_id(consult_id);
			if(op_number!=null && !op_number.equals(""))
				logBean.setOp_number(op_number);
			else{
				if(consult_id!=null && !consult_id.equals("")){
					//RegistrationBean queryBean = new RegistrationBean();
					//queryBean.setQuery("select op_number from doctor_consult where consult_id='"+consult_id+"'");
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("doctor_consult");
					parameterBean.setField_name("op_number");
					parameterBean.setField_name1("consult_id");
					parameterBean.setField_value1(consult_id);
					parameterBean.setOffice_id(null);
					parameterBean.setField_name2(null);
					logBean.setOp_number(commonDao.fetchValueWithSingleParam(parameterBean));
					parameterBean=null;
				}
			}
			logBean.setUser_ip(user_ip);
			logBean.setOffice_id(office_id);
			logBean.setTable_name(table_name);
			//eclinicDaoManager.startTransaction();
			loginDao.insertNewLogEntry(logBean);
			String log_id = loginDao.getLastInsertLogId();
			//eclinicDaoManager.commitTransaction();			

			if(log_id!=null && log_action!=null && !log_action.equalsIgnoreCase("SELECT"))
			{
				if(context_path!=null && !context_path.equals("")){
					String file_name = "AuditLog_"+log_id+"_"+sdf.format(new Date())+".ser";
					String file_path = context_path+file_name;

					File log_file = new File(file_path);
					FileOutputStream fLogOut = new FileOutputStream(log_file);
					ObjectOutputStream objLogOut = new ObjectOutputStream(fLogOut);
					objLogOut.writeObject(logObj);
					objLogOut.flush();
					objLogOut.close();

					logBean.setLog_id(log_id);
					logBean.setSer_filename(file_name);
					//eclinicDaoManager.startTransaction();
					loginDao.updateAuditLogFileName(logBean);
					//eclinicDaoManager.commitTransaction();
				}
			}

		} catch (Exception e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (DaoException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
	}
	public ArrayList<LoginBean> getAllAuditLogEntries(LoginBean loginBean) throws DaoException 
	{
		ArrayList<LoginBean> logList=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			logList=loginDao.getAllAuditLogEntries(loginBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}
	public String getLastInsertLogId()
	{
		String last_log_id=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			last_log_id=loginDao.getLastInsertLogId();
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}

		}
		return last_log_id;
	}
	public LoginBean getLogDetailsById(String value) throws DaoException 
	{
		LoginBean logBean=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			logBean=loginDao.getLogDetailsById(value);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logBean;
	}
	/*** Audit Trial Implementation ---- Ends ***/
	/*** Inventory Accounts - Account Heads Setting ---- @START  ----- March 2016****/
	public AccountHeadsBean getAccountHeadsBean()
	{
		return accHeadsBean;
	}
	public void setAllAccountHeadsForPosting()
	{
		try {
			eclinicDaoManager.startTransaction();
			List<AccountHeadsBean> headsList = accountDao.getAllAccountHeadsForPosting();
			eclinicDaoManager.commitTransaction();
			if(headsList!=null && headsList.size()>0)
			{
				///AccountHeadsBean headsBean = new AccountHeadsBean();
				businessLogic.setAllAccountHeadsForPosting(headsList, accHeadsBean);
				//BeanUtils.copyProperties(accHeadsBean, headsBean);
			}
			eclinicDaoManager.startTransaction();
			List<AccountBean> childList = accountDao.getAllAccountChildsForPosting();
			eclinicDaoManager.commitTransaction();
			if(childList!=null && childList.size()>0)
			{
				businessLogic.setAllAccountChildsForPosting(childList, accHeadsBean);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	/*** Inventory Accounts - Account Heads Setting ---- @ENDS  ----- March 2016
	 * @throws DaoException ****/
	private AccountBean setAccountHeadFlowData(String head_id,String head_name,UserBean userBean) throws DaoException
	{
		int aclevel = -1;
		//RegistrationBean regBean1 = new RegistrationBean();
		
		//regBean1.setQuery("SELECT account_level FROM account_head where account_code = '"+head_id+"'");
		parameterBean = new ParameterBean();
		parameterBean.setTable_name("account_head");
		parameterBean.setField_name("account_level");
		parameterBean.setField_name1("account_code");
		parameterBean.setField_value1(head_id);
		parameterBean.setOffice_id(null);
		parameterBean.setField_name2(null);
		String acclevel=commonDao.fetchValueWithSingleParam(parameterBean);
		parameterBean=null;
		if(acclevel!=null && !acclevel.equals(""))
			aclevel = Integer.parseInt(acclevel)+1;

		AccountBean accountBean=new AccountBean();
		accountBean.setOffice_id(userBean.getOffice_id());
		accountBean.setAccount_parent(head_id);

		String slno=accountDao.getAccountSlNoById(accountBean);
		if(slno!=null)
			slno=""+(Integer.parseInt(slno)+1);
		else
			slno="1";

		accountBean.setCreate_status("S");
		accountBean.setNode_type("C");
		accountBean.setAccount_slno(slno);
		accountBean.setAccount_code(head_id+"."+slno);
		accountBean.setAccount_name(head_name);
		accountBean.setAccount_level(""+aclevel);
		
		return accountBean;
	}
	public void insertAccountHeads(String head_name,String type,UserBean userBean, HttpServletRequest request) throws DaoException
	{
		//RegistrationBean regBean1 = new RegistrationBean();
		String head_id = "",head_id2 = "",sub_head="";

		try {
			if(type.equalsIgnoreCase("supplier"))
			{
				head_id = accHeadsBean.getAcc_pay_supplier();
				head_id2 = accHeadsBean.getCheq_iss_supplier();

				//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+head_name+"'");
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("account_head");
				parameterBean.setField_name("account_code");
				parameterBean.setField_name1("account_parent");
				parameterBean.setField_value1(head_id);
				parameterBean.setOffice_id(null);
				parameterBean.setField_name2(" account_name='"+head_name+"'");
				 sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
				 parameterBean=null;
				if(sub_head==null)
				{
					AccountBean accountBean = setAccountHeadFlowData(head_id, head_name, userBean);
					insertAccountHeadAndFlow(accountBean);
				}

				//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id2+"' and account_name='"+head_name+"'");
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("account_head");
				parameterBean.setField_name("account_code");
				parameterBean.setField_name1("account_parent");
				parameterBean.setField_value1(head_id2);
				parameterBean.setOffice_id(null);
				parameterBean.setField_name2("account_name='"+head_name+"'");
				String sub_head2=commonDao.fetchValueWithSingleParam(parameterBean);
				parameterBean=null;
				if(sub_head2==null)
				{
					AccountBean accountBean = setAccountHeadFlowData(head_id2, head_name, userBean);
					insertAccountHeadAndFlow(accountBean);
				}
			}
			else if(type.equalsIgnoreCase("Item"))
			{
				if(userBean.getItem_type().equals("I"))
				{
					head_id = accHeadsBean.getInventory_head();
					//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+head_name+"'");
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("account_head");
					parameterBean.setField_name("account_code");
					parameterBean.setField_name1("account_parent");
					parameterBean.setField_value1(head_id);
					parameterBean.setOffice_id(null);
					parameterBean.setField_name2("account_name='"+head_name+"'");
					sub_head =commonDao.fetchValueWithSingleParam(parameterBean);
					parameterBean=null;
					if(sub_head==null)
					{
						AccountBean accountBean = setAccountHeadFlowData(head_id, head_name, userBean);
						insertAccountHeadAndFlow(accountBean);
					}
					
					head_id = accHeadsBean.getDept_stock_head();
					//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+head_name+"'");
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("account_head");
					parameterBean.setField_name("account_code");
					parameterBean.setField_name1("account_parent");
					parameterBean.setField_value1(head_id);
					parameterBean.setOffice_id(null);
					parameterBean.setField_name2("account_name='"+head_name+"'");
					sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
					parameterBean=null;
					if(sub_head==null)
					{
						AccountBean accountBean = setAccountHeadFlowData(head_id, head_name, userBean);
						insertAccountHeadAndFlow(accountBean);
					}
					
					head_id = accHeadsBean.getCost_goods_sold_head();
					//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+head_name+"'");
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("account_head");
					parameterBean.setField_name("account_code");
					parameterBean.setField_name1("account_parent");
					parameterBean.setField_value1(head_id);
					parameterBean.setOffice_id(null);
					parameterBean.setField_name2("account_name='"+head_name+"'");
					sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
					parameterBean=null;
					if(sub_head==null)
					{
						AccountBean accountBean = setAccountHeadFlowData(head_id, head_name, userBean);
						insertAccountHeadAndFlow(accountBean);
					}
				}
				else if(userBean.getItem_type().equals("A"))
				{
					head_id = accHeadsBean.getNon_curr_asset();
					//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+head_name+"'");
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("account_head");
					parameterBean.setField_name("account_code");
					parameterBean.setField_name1("account_parent");
					parameterBean.setField_value1(head_id);
					parameterBean.setOffice_id(null);
					parameterBean.setField_name2("account_name='"+head_name+"'");
					sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
					parameterBean=null;
					if(sub_head==null)
					{
						AccountBean accountBean = setAccountHeadFlowData(head_id, head_name, userBean);
						insertAccountHeadAndFlow(accountBean);
					}
					
					head_id = accHeadsBean.getDepreciation_head();
					//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+head_name+"'");
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("account_head");
					parameterBean.setField_name("account_code");
					parameterBean.setField_name1("account_parent");
					parameterBean.setField_value1(head_id);
					parameterBean.setOffice_id(null);
					parameterBean.setField_name2(" account_name='"+head_name+"'");
					sub_head=commonDao.fetchValueWithSingleParam(parameterBean);	
					parameterBean=null;
					if(sub_head==null)
					{
						AccountBean accountBean = setAccountHeadFlowData(head_id, head_name, userBean);
						insertAccountHeadAndFlow(accountBean);
					}
				}
				else if(userBean.getItem_type().equals("N"))
				{
					head_id = accHeadsBean.getNon_inv_purchase();
					//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+head_name+"'");
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("account_head");
					parameterBean.setField_name("account_code");
					parameterBean.setField_name1("account_parent");
					parameterBean.setField_value1(head_id);
					parameterBean.setOffice_id(null);
					parameterBean.setField_name2("account_name='"+head_name+"'");
					sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
					parameterBean=null;
					if(sub_head==null)
					{
						AccountBean accountBean = setAccountHeadFlowData(head_id, head_name, userBean);
						insertAccountHeadAndFlow(accountBean);
					}
				}
			}
		} catch(DaoException de){
			de.printStackTrace();
			throw ((DaoException) de.fillInStackTrace());
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
	public String insertChildAccounts(String name,String type,String linkid,UserBean userBean, HttpServletRequest request) throws DaoException
	{
		String child = "",child_type="";
		int child_id=0;
		
		try{
			//RegistrationBean regBean1 = new RegistrationBean();
			//RegistrationBean regBean2 = new RegistrationBean();

			if(type.equals("add_item"))
				child_type = "ITEM";
			else if(type.equals("supplier"))
				child_type = "SUPL";
			else if(type.equals("insurance"))
				child_type = "INSR";
			else if(type.equals("company"))
				child_type = "CORP";
			else if(type.equals("sponsor"))	
				child_type = "SPON";	
			else if(type.equals("ref_clinic"))
				child_type = "REFC";
			else if(type.equals("office"))
				child_type = "OFFC";
			else if(type.equals("test_category"))
				child_type = "LABC";
			else if(type.equals("cardtype"))
				child_type = "CARD";
			else if(type.equals("zakat"))
				child_type = "Zakat";
			else if(type.equals("directSaleCustomer"))
				child_type = "CUST";
			else if(type.equals("bank"))
				child_type = "BANK";
			
			AccountBean childBean = new AccountBean();
			childBean.setChild_name(name);
			childBean.setItem_status(child_type);
			childBean = accountDao.getAccountChildById(childBean);
			//regBean1.setQuery("select child_name from account_child where child_name = '"+name+"' and child_type='"+child_type+"'");
			if(childBean == null)
			{
				childBean = new AccountBean();
				childBean.setChild_name(name);
				childBean.setItem_status(child_type);
				childBean.setLink_id(linkid);
				accountDao.insertAccountChild(childBean);
				
				/*regBean1.setQuery("SELECT if(max(0+child_id) is null,1,max(0+child_id)) FROM account_child");			
				child_id = Integer.parseInt(registrationDao.isAlreadyExist(regBean1));*/
				
				parameterBean = new ParameterBean();
				child_id = Integer.parseInt(commonDao.fetchMaxChildId(parameterBean));
				parameterBean=null;
				
				String head_id = "",head_id2 = "",sub_head="",sub_head2="";
				/*regBean1.setQuery("insert into account_child (child_id, child_name, child_type, link_id) values("+child_id+",'"+name+"','"+child_type+"','"+linkid+"')");
				registrationDao.deleteQuery(regBean1);
				regBean1.setQuery("");*/
				if(type.equals("add_item"))
				{
					if(userBean.getItem_type().equals("I"))
					{
						head_id = accHeadsBean.getInventory_head();
						//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_head");
						parameterBean.setField_name("account_code");
						parameterBean.setField_name1("account_parent");
						parameterBean.setField_value1(head_id);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
						sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						if(sub_head==null)
						{
							insertAccountHeads(userBean.getItemgroup_name(), "Item", userBean, request);
							
							//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("account_head");
							parameterBean.setField_name("account_code");
							parameterBean.setField_name1("account_parent");
							parameterBean.setField_value1(head_id);
							parameterBean.setOffice_id(null);
							parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
							sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
							parameterBean=null;
						}
						/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+sub_head+"','S')");
						registrationDao.deleteQuery(regBean1);*/

						parameterBean = new ParameterBean();
						parameterBean.setChild_id(String.valueOf(child_id));
						parameterBean.setAccount_code(sub_head);
						parameterBean.setCreate_status("S");
						commonDao.insertAccountChildHead(parameterBean);
						parameterBean=null;
						
						head_id = accHeadsBean.getDept_stock_head();
						//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_head");
						parameterBean.setField_name("account_code");
						parameterBean.setField_name1("account_parent");
						parameterBean.setField_value1(head_id);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
						sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						if(sub_head==null)
						{
							insertAccountHeads(userBean.getItemgroup_name(), "Item", userBean, request);
							
							//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("account_head");
							parameterBean.setField_name("account_code");
							parameterBean.setField_name1("account_parent");
							parameterBean.setField_value1(head_id);
							parameterBean.setOffice_id(null);
							parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
							sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
							parameterBean=null;
						}
						/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+sub_head+"','S')");
						registrationDao.deleteQuery(regBean1);*/

						parameterBean = new ParameterBean();
						parameterBean.setChild_id(String.valueOf(child_id));
						parameterBean.setAccount_code(sub_head);
						parameterBean.setCreate_status("S");
						commonDao.insertAccountChildHead(parameterBean);
						parameterBean=null;
						
						head_id = accHeadsBean.getCost_goods_sold_head();
						//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_head");
						parameterBean.setField_name("account_code");
						parameterBean.setField_name1("account_parent");
						parameterBean.setField_value1(head_id);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
						sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						if(sub_head==null)
						{
							insertAccountHeads(userBean.getItemgroup_name(), "Item", userBean, request);
							
							//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("account_head");
							parameterBean.setField_name("account_code");
							parameterBean.setField_name1("account_parent");
							parameterBean.setField_value1(head_id);
							parameterBean.setOffice_id(null);
							parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
							sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
							parameterBean=null;
						}
						/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+sub_head+"','S')");
						registrationDao.deleteQuery(regBean1);*/
						
						parameterBean = new ParameterBean();
						parameterBean.setChild_id(String.valueOf(child_id));
						parameterBean.setAccount_code(sub_head);
						parameterBean.setCreate_status("S");
						commonDao.insertAccountChildHead(parameterBean);
						parameterBean=null;
						
					}
					else if(userBean.getItem_type().equals("A"))
					{
						head_id = accHeadsBean.getNon_curr_asset();
						//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_head");
						parameterBean.setField_name("account_code");
						parameterBean.setField_name1("account_parent");
						parameterBean.setField_value1(head_id);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
						sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						if(sub_head==null)
						{
							insertAccountHeads(userBean.getItemgroup_name(), "Item", userBean, request);
							
							//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("account_head");
							parameterBean.setField_name("account_code");
							parameterBean.setField_name1("account_parent");
							parameterBean.setField_value1(head_id);
							parameterBean.setOffice_id(null);
							parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
							sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
							parameterBean=null;
						}
						/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+sub_head+"','S')");
						registrationDao.deleteQuery(regBean1);*/

						parameterBean = new ParameterBean();
						parameterBean.setChild_id(String.valueOf(child_id));
						parameterBean.setAccount_code(sub_head);
						parameterBean.setCreate_status("S");
						commonDao.insertAccountChildHead(parameterBean);
						parameterBean=null;
						
						//Create category under accumulated depreciation
						head_id = accHeadsBean.getDepreciation_head();
						//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_head");
						parameterBean.setField_name("account_code");
						parameterBean.setField_name1("account_parent");
						parameterBean.setField_value1(head_id);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
						sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						if(sub_head==null)
						{
							insertAccountHeads(userBean.getItemgroup_name(), "Item", userBean, request);
							
							//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("account_head");
							parameterBean.setField_name("account_code");
							parameterBean.setField_name1("account_parent");
							parameterBean.setField_value1(head_id);
							parameterBean.setOffice_id(null);
							parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
							sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
							parameterBean=null;
						}
						/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+sub_head+"','S')");
						registrationDao.deleteQuery(regBean1);*/
						
						parameterBean = new ParameterBean();
						parameterBean.setChild_id(String.valueOf(child_id));
						parameterBean.setAccount_code(sub_head);
						parameterBean.setCreate_status("S");
						commonDao.insertAccountChildHead(parameterBean);
						parameterBean=null;
					}
					else if(userBean.getItem_type().equals("N"))
					{
						head_id = accHeadsBean.getNon_inv_purchase();
						//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_head");
						parameterBean.setField_name("account_code");
						parameterBean.setField_name1("account_parent");
						parameterBean.setField_value1(head_id);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
						sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						if(sub_head==null)
						{
							insertAccountHeads(userBean.getItemgroup_name(), "Item", userBean, request);
							
							//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+userBean.getItemgroup_name()+"'");
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("account_head");
							parameterBean.setField_name("account_code");
							parameterBean.setField_name1("account_parent");
							parameterBean.setField_value1(head_id);
							parameterBean.setOffice_id(null);
							parameterBean.setField_name2("account_name='"+userBean.getItemgroup_name()+"'");
							sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
							parameterBean=null;
						}
						/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+sub_head+"','S')");
						registrationDao.deleteQuery(regBean1);*/
						
						parameterBean = new ParameterBean();
						parameterBean.setChild_id(String.valueOf(child_id));
						parameterBean.setAccount_code(sub_head);
						parameterBean.setCreate_status("S");
						commonDao.insertAccountChildHead(parameterBean);
						parameterBean=null;
					}
				}
				else if(type.equals("supplier")){
					head_id = accHeadsBean.getAcc_pay_supplier();
					head_id2 = accHeadsBean.getCheq_iss_supplier();

					SupplierBean supplierBean = supplierDao.getSupplierByID(linkid);
					if(supplierBean!=null && supplierBean.getSupplier_category()!=null && !supplierBean.getSupplier_category().equals(""))
					{
						//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+supplierBean.getCategory_name()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_head");
						parameterBean.setField_name("account_code");
						parameterBean.setField_name1("account_parent");
						parameterBean.setField_value1(head_id);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("account_name='"+supplierBean.getCategory_name()+"'");
						sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						if(sub_head==null || sub_head.equals("")){
							insertAccountHeads(supplierBean.getCategory_name(), "Supplier", userBean, request);

							//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id+"' and account_name='"+supplierBean.getCategory_name()+"'");
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("account_head");
							parameterBean.setField_name("account_code");
							parameterBean.setField_name1("account_parent");
							parameterBean.setField_value1(head_id);
							parameterBean.setOffice_id(null);
							parameterBean.setField_name2("account_name='"+supplierBean.getCategory_name()+"'");
							sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
							parameterBean=null;
						}

						//regBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+head_id2+"' and account_name='"+supplierBean.getCategory_name()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_head");
						parameterBean.setField_name("account_code");
						parameterBean.setField_name1("account_parent");
						parameterBean.setField_value1(head_id2);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("account_name='"+supplierBean.getCategory_name()+"'");
						sub_head2 = commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
					}else{
						sub_head = head_id;
						sub_head2 = head_id2;
					}
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+sub_head+"','S')");
					registrationDao.deleteQuery(regBean1);*/

					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(sub_head);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					/*regBean2.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+sub_head2+"','S')");
					registrationDao.deleteQuery(regBean2);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(sub_head2);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;

				}else if(type.equals("insurance")){
					head_id = accHeadsBean.getAcc_rec_insurar();
					head_id2 = accHeadsBean.getCheq_rec_insurar();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					/*regBean2.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id2+"','S')");
					registrationDao.deleteQuery(regBean2);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id2);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
				}else if(type.equals("company")){
					head_id = accHeadsBean.getAcc_rec_corporate();
					head_id2 = accHeadsBean.getCheq_rec_corporate();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					/*regBean2.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id2+"','S')");
					registrationDao.deleteQuery(regBean2);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id2);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
				}else if(type.equals("sponsor")){
					head_id = accHeadsBean.getAcc_rec_sponsor();
					head_id2 = accHeadsBean.getCheq_rec_sponsor();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					/*regBean2.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id2+"','S')");
					registrationDao.deleteQuery(regBean2);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id2);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
				}else if(type.equals("ref_clinic")){
					head_id = accHeadsBean.getAcc_rec_ref_clinic();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					head_id = accHeadsBean.getAcc_pay_ref_clinic();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/

					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					head_id = accHeadsBean.getCheq_rec_ref_clinic();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/

					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					head_id = accHeadsBean.getCheq_iss_ref_clinic();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
				}
				else if(type.equals("office")){
					head_id = accHeadsBean.getAcc_rec_rel_party();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/

					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					head_id = accHeadsBean.getAcc_pay_rel_party();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/

					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					head_id = accHeadsBean.getCheq_rec_rel_party();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/

					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					head_id = accHeadsBean.getCheq_iss_rel_party();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
				}
				else if(type.equals("test_category")){
					head_id = accHeadsBean.getLab_rev_cash();
					head_id2 = accHeadsBean.getLab_rev_ins();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					/*regBean2.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id2+"','S')");
					registrationDao.deleteQuery(regBean2);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id2);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
				}
				else if(type.equals("cardtype"))
				{
					head_id = accHeadsBean.getBank_acc_card();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
				}
				else if(type.equals("zakat"))
				{
					head_id = accHeadsBean.getIndirect_exp_head();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
				}
				else if(type.equals("directSaleCustomer"))
				{	
					//RegistrationBean regBean3 = new RegistrationBean();
					//RegistrationBean regBean4 = new RegistrationBean();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+accHeadsBean.getAccRecDirSale()+"','S')");
					registrationDao.deleteQuery(regBean1);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(accHeadsBean.getAccRecDirSale());
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					/*regBean2.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+accHeadsBean.getCheqRecDirSale()+"','S')");
					registrationDao.deleteQuery(regBean2);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(accHeadsBean.getCheqRecDirSale());
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					/*regBean3.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+accHeadsBean.getAccPayInvCanDirSale()+"','S')");
					registrationDao.deleteQuery(regBean3);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(accHeadsBean.getAccPayInvCanDirSale());
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
					
					/*regBean4.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+accHeadsBean.getCheqIssInvCanDirSale()+"','S')");
					registrationDao.deleteQuery(regBean4);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(accHeadsBean.getCheqIssInvCanDirSale());
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
				}
				else if(type.equals("bank"))
				{
					head_id = accHeadsBean.getBank_acc_head();
					/*regBean1.setQuery("insert into account_childhead ( child_id, account_code, create_status) values ('"+child_id+"','"+head_id+"','S')");
					registrationDao.deleteQuery(regBean1);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setChild_id(String.valueOf(child_id));
					parameterBean.setAccount_code(head_id);
					parameterBean.setCreate_status("S");
					commonDao.insertAccountChildHead(parameterBean);
					parameterBean=null;
				}
			}else{
				child_id = Integer.parseInt(childBean.getChild_id());
				/*regBean1.setQuery("select child_id from account_child where child_name = '"+name+"' and child_type='"+child_type+"'");
				child_id = Integer.parseInt(registrationDao.isAlreadyExist(regBean1));*/
			}
		}catch(DaoException de){
			de.printStackTrace();
			throw ((DaoException) de.fillInStackTrace());
		}
		catch(Exception e){
			e.printStackTrace();
		}
		if(child_id!=0)
			child = ""+child_id;
		return child;
	}
	public UserBean authenticateUser(LoginBean loginBean) throws DaoException 
	{
		UserBean userDetails=null;
		try 
		{      
			eclinicDaoManager = DaoManager.getInstance("eclinicDaoManager");
			eclinicDaoManager.startTransaction();
			userDetails=loginDao.authenticateUser(loginBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	}

	public ArrayList getAllUserReportTypes(UserBean userBean) throws DaoException 
	{
		ArrayList userDetails=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			userDetails=loginDao.getAllUserReportTypes(userBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	} 

	public UserBean authenticateRCUser(LoginBean loginBean) throws DaoException 
	{
		UserBean userDetails=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			userDetails=loginDao.authenticateRCUser(loginBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	}


	public UserBean authenticateRDUser(LoginBean loginBean) throws DaoException 
	{
		UserBean userDetails=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			userDetails=loginDao.authenticateRDUser(loginBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	}

	public UserBean getUserDetailByUserID(String id) throws DaoException 
	{
		UserBean userDetails=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			userDetails=loginDao.getUserDetailByUserID(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	}


	public void updateUserPrivilege(UserBean userBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			loginDao.updateUserPrivilege(userBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertNurseDoctor(UserBean userBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			loginDao.insertNurseDoctor(userBean);
			eclinicDaoManager.commitTransaction();

			//audit entry given in action 

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertNewUser(UserBean userBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			loginDao.insertNewUser(userBean);
			eclinicDaoManager.commitTransaction();
			//auditLogEntry(userBean, request, "INSERT", "Added a new user"+userBean.getUser_name(), null, null, "user_setup");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteUserReports(String id) throws DaoException 
	{

		try 
		{    /*UserBean oldbean=new UserBean();
			 oldbean.setUser_id(id);
			 oldbean = getUserReportsById(oldbean);*/

			eclinicDaoManager.startTransaction();
			loginDao.deleteUserReports(id);
			eclinicDaoManager.commitTransaction();
			//auditLogEntry(oldbean, request, "DELETE", "Releted Reports Assigned To user"+oldbean.getUser_id(), null, null, "reports_assigned");

			/* Audit Log given in action */

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void deleteNurseDoctor(String id) throws DaoException 
	{

		try 
		{    
			eclinicDaoManager.startTransaction();
			loginDao.deleteNurseDoctor(id);
			eclinicDaoManager.commitTransaction();
			//auditLogEntry(oldbean, request, "DELETE", "Removed Doctors Assigned to this Nurse - "+oldbean.getUser_id(), null, null, "nurses_doctor");



		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteUserDocs(String id) throws DaoException 
	{

		try 
		{   /*UserBean oldbean=new UserBean();
			oldbean.setUser_id(id);
			oldbean=getUserDocsById	(oldbean);*/
			eclinicDaoManager.startTransaction();
			loginDao.deleteUserDocs(id);
			eclinicDaoManager.commitTransaction();
			//auditLogEntry(oldbean, request, "DELETE", "Removed Documents Assigned To User - "+oldbean.getUser_id(), null, null, "documents_assigned");
			/* Audit Log given in action */

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertUserReport(UserBean userBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			loginDao.insertUserReport(userBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertUserDocs(UserBean userBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			loginDao.insertUserDocs(userBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllUserReports(String id) throws DaoException 
	{
		ArrayList userDetails=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			userDetails=loginDao.getAllUserReports(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	}

	public ArrayList getAllUsers(SetupBean setBean) throws DaoException 
	{
		ArrayList userDetails=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			userDetails=loginDao.getAllUsers(setBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	}

	//new report

	public ArrayList getDailyReportDoctorWise(RegistrationBean registrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = (ArrayList)setupDao.getDailyReportDoctorWise(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}	

	// Setup Logics

	public ArrayList<SetupBean> getAllLabTestList(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllLabTestList(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllLabTestMasterList(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list = new ArrayList<SetupBean>();
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllLabTestMasterList(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public String insertOfficeDetails(OfficeLetterHeadBean offBean)throws DaoException {//edited on AUG14--nayana
		String office_id="";
	
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertOfficeDetails(offBean);
			office_id=setupDao.getLastInsertOfficeId();
			eclinicDaoManager.commitTransaction();
			/*Audit Log given in action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return office_id;
		
	}
	public void updateOfficeDetails(OfficeLetterHeadBean offBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.updateOfficeDetails(offBean);
			eclinicDaoManager.commitTransaction();
			/*Audit Log given in action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllLabTestListFavour(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllLabTestListFavour(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public OfficeLetterHeadBean getOfficeLetterHead(String officeId) throws DaoException 
	{
		OfficeLetterHeadBean lst=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			lst=setupDao.getOfficeLetterHead(officeId);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lst;

	}


	public ArrayList getPreviousCashReceiptsVouch(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getPreviousCashReceiptsVouch(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllListOfReceiptsVouch(SetupBean setupBean) throws DaoException 
	{
		ArrayList<RegistrationBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)setupDao.getAllListOfReceiptsVouch(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<RegistrationBean> getAllPharmListOfReceiptsVouchers(SetupBean setupBean) throws DaoException 
	{
		ArrayList<RegistrationBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)setupDao.getAllPharmListOfReceiptsVouchers(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllListOfReceiptsVouchGroup(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllListOfReceiptsVouchGroup(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllMedicinePacks(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllMedicinePacks(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllMedicineForms(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllMedicineForms(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllListOfReceipts(SetupBean setupBean) throws DaoException 
	{
		ArrayList<RegistrationBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			if(setupBean.getOrderby()==null)
				setupBean.setOrderby(" limit 200");

			list=(ArrayList<RegistrationBean>)setupDao.getAllListOfReceipts(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllListOfClaimsSumm(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllListOfClaimsSumm(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllInsurares4Claim(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllInsurares4Claim(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllCreditBillsSumm(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllCreditBillsSumm(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllListOfClaimsSummary(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllListOfClaimsSummary(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllListOfClaims(SetupBean setupBean) throws DaoException 
	{
		//modified for club months xml generation
		ArrayList<RegistrationBean> list=null;
		if(setupBean.getOrderby()==null || setupBean.getOrderby().equals(""))
			setupBean.setOrderby("order by doctor_consult.insurar_id,doctor_consult.insurar_sub,doctor_consult.consult_date");
		//modified for club months xml generation
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)setupDao.getAllListOfClaims(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllListOfClaims4Report(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllListOfClaims4Report(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<RegistrationBean> getAllListOfClaimsFormat2(SetupBean setupBean) throws DaoException 
	{
		ArrayList<RegistrationBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)setupDao.getAllListOfClaimsFormat2(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllListOfServices(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllListOfServices(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllServicesForPreApp(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupBean.setCancel_status("N");
			list=(ArrayList)setupDao.getAllServicesForPreApp(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllListOfClaimsFormat3(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllListOfClaimsFormat3(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/*public ArrayList getAllLabTestList4Incentive(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllLabTestList4Incentive(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}*/

	public ArrayList getAllLabTestList4InsPlus(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllLabTestList4InsPlus(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabTestList4Ins(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllLabTestList4Ins(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public ArrayList getAllDiagrams() throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllDiagrams();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabTestList4InsNet(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllLabTestList4InsNet(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllInsurarConsult(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllInsurarConsult(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllProcedureList4Ins(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllProcedureList4Ins(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public ArrayList getAllConsultProcedure4Image(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=setupDao.getAllConsultProcedure4Image(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllConsultProcedure4Rep(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllConsultProcedure4Rep(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public ArrayList getAllConsultExercisePgm(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllConsultExercisePgm(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getAllConsultExercisePgmTempl(SetupBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllConsultExercisePgmTempl(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllExercisePgm(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllExercisePgm(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertIntoGymTempl(SetupBean registrationBean, HttpServletRequest request)throws DaoException
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.insertIntoGymTempl(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added a gym template From Doctor's/Nurse's Workbench", registrationBean.getOp_number(),registrationBean.getConsult_id(),"gym_template");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllGymPgmTempl(SetupBean setup)throws DaoException
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllGymPgmTempl(setup);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getConsultDateGymTempl(String id)throws DaoException
	{
		ArrayList  list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getConsultDateGymTempl(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void updateGymPgmTemplC(SetupBean registrationBean, HttpServletRequest request)throws DaoException
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.updateGymPgmTemplC(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added a gym template From Doctor's/Nurse's Workbench", registrationBean.getOp_number(),registrationBean.getConsult_id(),"gym_template");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList<RegistrationBean> getAllConsultedDoctors(SetupBean setupBean) throws DaoException 
	{
		ArrayList<RegistrationBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)registrationDao.getAllConsultedDoctors(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllConsultLabTest4Incentive(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllConsultLabTest4Incentive(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllConsultLabTest4Incentive2(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllConsultLabTest4Incentive2(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllConsultLabTest4Rep(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllConsultLabTest4Rep(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllProcedureList4InsPlus(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllProcedureList4InsPlus(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllProcedureList(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllProcedureList(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllPresentDiags(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllPresentDiags(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllPresentCompl(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllPresentCompl(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllDiagnosisCode(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllDiagnosisCode(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllMedGrpByDoc(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllMedGrpByDoc(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllAntibiotics(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)laboratoryDao.getAllAntibiotics(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllGeneric(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllGeneric(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllIncentives() throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllIncentives();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllDepartments(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllDepartments(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllResidenceArea(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllResidenceArea(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}




	public ArrayList getAllDepartmentsByOffice(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllDepartmentsByOffice(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 

	public ArrayList getAllRadiologyRepTypes(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllRadiologyRepTypes(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllMedRepTypes(RegistrationBean regBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllMedRepTypes(regBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllDocumentTypes() throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllDocumentTypes();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllMarkExecutives(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllMarkExecutives(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllMobileCodes() throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllMobileCodes();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllROS(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllROS(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllROSChildsHeads(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllROSChildsHeads(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllROSchilds(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllROSchilds(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public List<HistoryPresentIllBean> getPatientAllergies(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		String consid=hpiBean.getConsult_id();
		if (null == hpiBean.getDepartment_id() || hpiBean.getDepartment_id().equals("")) {
			//RegistrationBean regB = new RegistrationBean();
			//regB.setQuery("select department_id from doctor_consult where consult_id='" + hpiBean.getConsult_id() + "'");
			String dep_id = common.fetchValueWithSingleParam("doctor_consult", "department_id", "consult_id", hpiBean.getConsult_id(), null, null);
			if (null != dep_id && !dep_id.equals("")) {
				hpiBean.setDepartment_id(dep_id);
			}
		}
		hpiBean.setType("AH");
		hpiBean.setOp_number(hpiBean.getOp_number());
		hpiBean.setConsult_id(null);
		List<HistoryPresentIllBean> allergyList = getPatientHistoryByType(hpiBean);

		hpiBean.setConsult_id(consid);
		return allergyList;
	}

	public ArrayList getAllPMHdiseases(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllPMHdiseases(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllSearchList(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSearchList(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSearchList2(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSearchList2(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSearchList3(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSearchList3(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSearchList4(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSearchList4(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSearchList5(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSearchList5(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSearchList6(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSearchList6(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSearchList7(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSearchList7(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}





	public ArrayList getAllSympLocation(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSympLocation(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSympQuality(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSympQuality(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllSeverity(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSeverity(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSympDuration(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSympDuration(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSympTiming(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSympTiming(hpiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllLabUnits() throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllLabUnits();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLandCodes() throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllLandCodes();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public ArrayList getVaccScheduledPatients(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getVaccScheduledPatients(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getDHAStatistics1(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getDHAStatistics1(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllEclaimFiles(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllEclaimFiles(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public ArrayList getAllExecutiveIncentive(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllExecutiveIncentive(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public List<SetupBean> getAllDocumentTypesByPat(String id) throws DaoException 
	{
		List<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=setupDao.getAllDocumentTypesByPat(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllDoctorsAssign(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllDoctorsAssign(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllDocumentTypesAssign(String id) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllDocumentTypesAssign(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllDashboardTypesAssign(String id) throws DaoException 
	{
		ArrayList lists=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			lists=(ArrayList)loginDao.getAllDashboardTypesAssign(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lists;
	}

	public ArrayList getAllDoctorIncentive(String id) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllDoctorIncentive(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<SetupBean> getAllInsurarSub(String id) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllInsurarSub(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllToothCodesChild(String id) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllToothCodesChild(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllToothCodes(String id) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllToothCodes(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllInsurarNetwork(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllInsurarNetwork(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public void updateProcedure(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{     
			eclinicDaoManager.startTransaction();
			setupDao.updateProcedure(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "UPDATE", "Updated Treatment/Procedure Master", null, null, "procedure_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}



	public void insertConsult4Ins(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertConsult4Ins(setupBean);
			eclinicDaoManager.commitTransaction();
			//setupBean.setQuery("select doctors_name from doctors_setup where doctors_id="+setupBean.getDoctors_id());
			String Doc=common.fetchValueWithSingleParam("doctors_setup", "doctors_name", "doctors_id", setupBean.getDoctors_id(), null, null);
			String insurarName="";
			if(request.getParameter("insurar_name")!=null)
				insurarName=request.getParameter("insurar_name");
			else
				insurarName=setupBean.getInsurar_name();
			auditLogEntry(setupBean, request, "INSERT", "Added Doctor "+Doc+" Under Insurance -"+insurarName , null, null, "consult_insurar");
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertComms4Executive(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertComms4Executive(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added/ Updated Commission For Executives" , null, null, "markex_incentive");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertLabTest4Incentive(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertLabTest4Incentive(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added/ Updated Commission For Executives" , null, null, "markex_incentive");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertLabTestIncentiveDocWise(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertLabTestIncentiveDocWise(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added/ Updated Lab Test Incentive For Doctor  "+request.getAttribute("rdoctor_name") , null, null, "labtest_incentive_doctor");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertLabTest4Ins(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertLabTest4Ins(setupBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertLabTest4InsNet(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertLabTest4InsNet(setupBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertProcedure4Ins(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertProcedure4Ins(setupBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	/* public void updateProcedure4Ins(SetupBean setupBean) throws DaoException 
 	{

 try 
 		{        	
 	  eclinicDaoManager.startTransaction();
 	setupDao.updateProcedure4Ins(setupBean);
 	eclinicDaoManager.commitTransaction();

 } 
 catch (DaoException e) 
 		{
   try 
 			{
 	  eclinicDaoManager.rollbackTransaction();
   } 
   catch (Exception e2) 
 			{
   }
   throw ((DaoException) e.fillInStackTrace());
 		}

 	}
  public void updateLabtest4Ins(SetupBean setupBean) throws DaoException 
 	{

 try 
 		{        	
 	  eclinicDaoManager.startTransaction();
 	setupDao.updateLabtest4Ins(setupBean);
 	eclinicDaoManager.commitTransaction();

 } 
 catch (DaoException e) 
 		{
   try 
 			{
 	  eclinicDaoManager.rollbackTransaction();
   } 
   catch (Exception e2) 
 			{
   }
   throw ((DaoException) e.fillInStackTrace());
 		}

 	}*/


	// not used -start
	/*public void insertIncentives(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertIncentives(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void updateIncentives(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateIncentives(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}*/ // not used- end

	// to do later
	public void insertDentalTreatments(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertDentalTreatments(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertTreatmentPlanDetails(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertTreatmentPlanDetails(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public String insertEclaimFile(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{
		String fileno="";
		//RegistrationBean rbean=new RegistrationBean();
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertEclaimFile(setupBean);
			//rbean.setQuery("SELECT max(id) FROM eclaim_files");
			parameterBean =new ParameterBean();
			parameterBean.setTable_name("eclaim_files");
			fileno=commonDao.fetchMaxIdfromTable(parameterBean);
			parameterBean =null;
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Claim XML File Created. Batch No: " + fileno, null, null, "eclaim_files");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return fileno;

	}



	public void insertCommissionProcess(SetupBean setupBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			accountDao.insertCommissionProcess(setupBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(setupBean, request, "INSERT", "Processed Doctor's Commission", null,null,"commission_processed");	

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertMedicinesUnderGrp(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertMedicinesUnderGrp(setupBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertMedicines(SetupBean setupBean, HttpServletRequest request ) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertMedicines(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added Medicines", null, null, "medicine_setup");
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public String insertProcedure(SetupBean setupBean) throws DaoException 
	{
		String pid = "";
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertProcedure(setupBean);
			pid = setupDao.getLastProcedureId();
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return pid;
	}

	public String insertDepartment(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{
		String depid=null;

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertDepartment(setupBean);
			//depid=setupDao.getLastDepartmentID(setupBean);
			parameterBean=new ParameterBean();
			parameterBean.setField_name("department_id");
			parameterBean.setTable_name("department_setup");
			depid=commonDao.getCommonMaxValue(parameterBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added Department", null, null, "department_setup");
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return depid;

	}



	public void updateQuery(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateQuery(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void updateDepartment(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateDepartment(setupBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 




	public void updateDocumentIssued(DocumentDetailBean registrationBean) throws DaoException {

		try {

			eclinicDaoManager.startTransaction();
			registrationDao.updateDocumentIssued(registrationBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertDocumentIssued(DocumentDetailBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertDocumentIssued(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertPatientMSH(HistoryPresentIllBean hopiBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertPatientMSH(hopiBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(hopiBean, request, "INSERT", "Added Patient Medical/Surgical History From Doctor's/Nurse's Workbench", hopiBean.getOp_number(),
					hopiBean.getConsult_id(), hopiBean.getTablename());

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertPatientROSchilds(HistoryPresentIllBean hopiBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertPatientROSchilds(hopiBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertHOPI(HistoryPresentIllBean hopiBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertHOPI(hopiBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertAttachDocument(DocumentDetailBean registrationBean) throws DaoException {

		try {


			eclinicDaoManager.startTransaction();
			registrationDao.insertAttachDocument(registrationBean);
			eclinicDaoManager.commitTransaction();
			
			if(registrationBean.getDocumentId() != null && (registrationBean.getDocumentId().equals("Lab") || registrationBean.getDocumentId().equals("Radiology")) ) {
				String referConsultId=common.fetchValueWithSingleParam("doctor_consult", "refered_consult_id", "consult_id", registrationBean.getConsult_id(), null, null);
				if(referConsultId!=null && !referConsultId.trim().equals("")) {
					eclinicDaoManager.startTransaction();
					registrationBean.setConsult_id(referConsultId);
					registrationDao.insertAttachDocument(registrationBean);
					eclinicDaoManager.commitTransaction();
				}
			}
			
			
			

			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}



	public void insertConfStatement(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertConfStatement(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added Notes From Doctor's/Nurse's Workbench", registrationBean.getOp_number(), registrationBean.getConsult_id(),
					registrationBean.getTablename());

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertNonConfStatement(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertNonConfStatement(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added Remarks from Billing/Doctor's/Nurse's Workbench", registrationBean.getOp_number(),registrationBean.getConsult_id(),"nconf_statements");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public synchronized void insertNewRegistration(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException {

		try {

			if(registrationBean.getPatient_age()!=null && !registrationBean.getPatient_age().equals(""))
			{

			}
			else
			{
				registrationBean.setPatient_age("0");
			}

			if(registrationBean.getPatient_agemonth()!=null && !registrationBean.getPatient_agemonth().equals(""))
			{

			}
			else
			{
				registrationBean.setPatient_agemonth("0");
			}


			if(registrationBean.getPatient_ageweek()!=null && !registrationBean.getPatient_ageweek().equals(""))
			{

			}
			else
			{
				registrationBean.setPatient_ageweek("0");
			}
			if (registrationBean.getPatient_agedays() != null
					&& !registrationBean.getPatient_agedays().equals("")) {

			} else {
				registrationBean.setPatient_agedays("0");
			}
			if(null == registrationBean.getVip_status()  || registrationBean.getVip_status().equals("")) {
				registrationBean.setVip_status("N");
			}

			if(registrationBean.getDirect_lab()==null || registrationBean.getDirect_lab().equals(""))
				registrationBean.setDirect_lab("N");
			if(registrationBean.getTablename()==null)
				registrationBean.setTablename("new_registration");
			eclinicDaoManager.startTransaction();
			registrationDao.insertNewRegistration(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Registered a New Patient("+registrationBean.getPatient_name()+")", registrationBean.getOp_number(),registrationBean.getConsult_id(),"new_registration");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	/*public synchronized String insertNewRegistrationGOP(RegistrationBean registrationBean,String ab,String cd,HttpServletRequest request) throws DaoException {

		UserBean userBean=new UserBean();
		if(request.getAttribute("userDetails")!=null)
		{
			userBean=(UserBean)request.getAttribute("userDetails");
		}

		int prefixLength = 0;
		String opNoPrefix = "";
		if (null != userBean && null != userBean.getOp_number_prefix() && !userBean.getOp_number_prefix().equals("")) {
			prefixLength = userBean.getOp_number_prefix().length() + 1;
			opNoPrefix = userBean.getOp_number_prefix();
		}
		String minDigit = "0";
		if (null != userBean && null != userBean.getMin_digit() && !userBean.getMin_digit().equals("")) {
			minDigit = userBean.getMin_digit();
		}

		String opno = null;
		if(registrationBean.getTablename()==null)
			registrationBean.setTablename("new_registration");
		try {
			if(registrationBean.getPatient_age()!=null && !registrationBean.getPatient_age().equals(""))
			{

			}
			else
			{
				registrationBean.setPatient_age("0");
			}

			if(registrationBean.getPatient_agemonth()!=null && !registrationBean.getPatient_agemonth().equals(""))
			{

			}
			else
			{
				registrationBean.setPatient_agemonth("0");
			}


			if(registrationBean.getPatient_ageweek()!=null && !registrationBean.getPatient_ageweek().equals(""))
			{

			}
			else
			{
				registrationBean.setPatient_ageweek("0");
			}

			eclinicDaoManager.startTransaction();
			if(ab.equals("N"))
			{

				registrationBean.setQuery("SELECT max(1+mid(op_number,"+prefixLength+")) FROM "+registrationBean.getTablename()+"  where direct_lab='N' and office_id='"+registrationBean.getOffice_id()+"'");

				//For Normal Number Sequence
				//registrationBean.setQuery("SELECT max(0+op_number)+1 FROM "+registrationBean.getTablename()+"  where direct_lab='N'");

				//For Rosary
				//registrationBean.setQuery("SELECT max(1+mid(op_number,2)) FROM "+registrationBean.getTablename()+"  where direct_lab='N'");

				//For Oriana 
				//registrationBean.setQuery("SELECT max(1+mid(op_number,7)) FROM "+registrationBean.getTablename()+"  where direct_lab='N'");

				//For Al Tadawi
				//registrationBean.setQuery("SELECT max(1+mid(op_number,5)) FROM "+registrationBean.getTablename()+"  where direct_lab='N' and office_id='"+registrationBean.getOffice_id()+"'");

				//For Al Rami
				//registrationBean.setQuery("SELECT max(1+mid(op_number,6)) FROM "+registrationBean.getTablename()+"  where direct_lab='N'");

				//For RAK Medical Center
				//registrationBean.setQuery("SELECT max(1+mid(op_number,4)) FROM "+registrationBean.getTablename()+"  where direct_lab='N'");

				//For Al Shams Medical Center
				//registrationBean.setQuery("SELECT max(1+mid(op_number,4)) FROM "+registrationBean.getTablename()+"  where direct_lab='N' and op_number like 'SMC%'");

				//For Marina Medical Center
				//registrationBean.setQuery("SELECT max(1+mid(op_number,3)) FROM "+registrationBean.getTablename()+"  where direct_lab='N' and op_number like 'MM%'");

				// for Sultan Al Olama
				if (registrationBean.getOffice_id().equals("1"))
					registrationBean.setQuery("SELECT max(1+mid(op_number,8)) FROM " + registrationBean.getTablename() + "  where direct_lab='N' and op_number like 'SAMC01%'");
				else if (registrationBean.getOffice_id().equals("2"))
					registrationBean.setQuery("SELECT max(1+mid(op_number,8)) FROM " + registrationBean.getTablename() + "  where direct_lab='N' and op_number like 'SAMC02%'");
				else if (registrationBean.getOffice_id().equals("3")) 
					registrationBean.setQuery("SELECT max(1+mid(op_number,8)) FROM " + registrationBean.getTablename() + "  where direct_lab='N' and op_number like 'SAMC03%'");
				// for Sultan Al Olama
			}
			else
			{

				registrationBean.setQuery("SELECT max(1+mid(op_number,"+prefixLength+")) FROM "+registrationBean.getTablename()+"  where direct_lab='N' and office_id='"+registrationBean.getOffice_id()+"'");

				//registrationBean.setQuery("SELECT max(1+mid(op_number,"+(cd.length()+1)+")) FROM "+registrationBean.getTablename()+"  where direct_lab='N' and department_id="+registrationBean.getDepartment_id());

				//registrationBean.setQuery("SELECT max(1+mid(op_number,2)) FROM "+registrationBean.getTablename()+"  where direct_lab='N'");
				//registrationBean.setQuery("SELECT max(1+mid(op_number,3)) FROM "+registrationBean.getTablename()+"  where direct_lab='N'");

				//For Rosary
				//registrationBean.setQuery("SELECT max(1+mid(op_number,2)) FROM "+registrationBean.getTablename()+"  where direct_lab='N'");

				//For Oriana 
				//registrationBean.setQuery("SELECT max(1+mid(op_number,7)) FROM "+registrationBean.getTablename()+"  where direct_lab='N'");

				//For Al Tadawi
				//registrationBean.setQuery("SELECT max(1+mid(op_number,5)) FROM "+registrationBean.getTablename()+"  where direct_lab='N' and office_id='"+registrationBean.getOffice_id()+"'");

				//For Al Rami
				//registrationBean.setQuery("SELECT max(1+mid(op_number,6)) FROM "+registrationBean.getTablename()+"  where direct_lab='N'");

				//For RAK Medical Center
				//registrationBean.setQuery("SELECT max(1+mid(op_number,4)) FROM "+registrationBean.getTablename()+"  where direct_lab='N'");

				//For Al Shams Medical Center
				//registrationBean.setQuery("SELECT max(1+mid(op_number,4)) FROM "+registrationBean.getTablename()+"  where direct_lab='N' and op_number like 'SMC%'");

				//For Marina Medical Center
				//registrationBean.setQuery("SELECT max(1+mid(op_number,3)) FROM "+registrationBean.getTablename()+"  where direct_lab='N' and op_number like 'MM%'");

				// for Sultan Al Olama
				if (registrationBean.getOffice_id().equals("1"))
					registrationBean.setQuery("SELECT max(1+mid(op_number,8)) FROM " + registrationBean.getTablename() + "  where direct_lab='N' and op_number like 'SAMC01%'");
				else if (registrationBean.getOffice_id().equals("2"))
					registrationBean.setQuery("SELECT max(1+mid(op_number,8)) FROM " + registrationBean.getTablename() + "  where direct_lab='N' and op_number like 'SAMC02%'");
				else if (registrationBean.getOffice_id().equals("3")) 
					registrationBean.setQuery("SELECT max(1+mid(op_number,8)) FROM " + registrationBean.getTablename() + "  where direct_lab='N' and op_number like 'SAMC03%'");
				// for Sultan Al Olama
			}

			DecimalFormat df1 = new DecimalFormat(minDigit);

			//For Normal
			//DecimalFormat df=new DecimalFormat("0");

			//For Oriana
			//DecimalFormat df1=new DecimalFormat("000000");

			//For Al Tadawi
			//DecimalFormat df1=new DecimalFormat("00000000");

			//For Al Rami
			//DecimalFormat df1=new DecimalFormat("00000");

			//For RAK Medical center
			//DecimalFormat df1=new DecimalFormat("000000");

			//For Al Shams Medical center
			//DecimalFormat df1=new DecimalFormat("0000");

			//For Marina Medical center
			//DecimalFormat df1=new DecimalFormat("0000");

			//For Sultan Al Olama
			//DecimalFormat df1=new DecimalFormat("00000");

			opno=registrationDao.isAlreadyExist(registrationBean);
			if(opno==null)
			{
				if(ab.equals("Y") || (cd!=null && !cd.equals("") && !cd.equals("null")))
				{
					opno=cd+"1";
				}
				else
				{
					opno="1";
				}

				if(ab.equals("Y"))
			{
				opno=cd+"0001";
			}
			else
			{
				opno="MC0001";
			}
			}
			else
			{
				if(ab.equals("Y") || (cd!=null && !cd.equals("") && !cd.equals("null")))
				{
					opno=cd+df1.format(Integer.parseInt(opno));

					//opno=cd+opno;

					//opno=cd+"-"+df1.format(Integer.parseInt(opno));//for Oriana

					//opno=cd+df1.format(Integer.parseInt(opno));//for Tadawi

					//opno=cd+df1.format(Integer.parseInt(opno));//for RAK Medical Center

					//opno=cd+"-"+df1.format(Integer.parseInt(opno));//for Al Rami

					//opno=cd+df1.format(Integer.parseInt(opno));//for Al Shams Medical Center

					//opno=cd+df1.format(Integer.parseInt(opno));//for Marina Medical Center

					//opno=cd+df1.format(Integer.parseInt(opno));//for Sultan Al Olama
				}

				if(ab.equals("Y"))
			{
				opno=cd+""+df.format(Integer.parseInt(opno));
			}

			}


			registrationBean.setOp_number(opno);
			if(registrationBean.getDirect_lab()==null || registrationBean.getDirect_lab().equals(""))
				registrationBean.setDirect_lab("N");
			registrationDao.insertNewRegistration(registrationBean);
			//opno=registrationDao.getLastInsertOpNumber(); 	
			eclinicDaoManager.commitTransaction();
			auditLogEntry(registrationBean, request, "INSERT", "Registered a New Patient", registrationBean.getOp_number(),registrationBean.getConsult_id(),"new_registration");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {  ignore 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return opno;
	}*/

	public synchronized String insertNewRegistrationGOP(RegistrationBean registrationBean,String ab,String cd,HttpServletRequest request) throws DaoException {

		/** For All Clinics - With/ Without Prefix - Single Code **/
		UserBean userBean = new UserBean();
		if (request.getAttribute("userDetails") != null) {
			userBean = (UserBean) request.getAttribute("userDetails");
		}

		int prefixLength = 1;
		String opNoPrefix = "";
		if (null != userBean && null != userBean.getOp_number_prefix() && !userBean.getOp_number_prefix().equals("")) {
			prefixLength = userBean.getOp_number_prefix().length() + 1;
			opNoPrefix = userBean.getOp_number_prefix();
		}

		int vipPrefixLength = 1;
		String vipOpNoPrefix = "";
		if (null != userBean && null != userBean.getVip_op_number_prefix() && !userBean.getVip_op_number_prefix().equals("")) {
			vipPrefixLength = userBean.getVip_op_number_prefix().length() + 1;
			vipOpNoPrefix = userBean.getVip_op_number_prefix();
		}

		String minDigit = "0";
		if (null != userBean && null != userBean.getMin_digit() && !userBean.getMin_digit().equals("")) {
			minDigit = userBean.getMin_digit();
		}

		String opno = null;
		if (registrationBean.getTablename() == null)
			registrationBean.setTablename("new_registration");
		try {
			if (registrationBean.getPatient_age() != null && !registrationBean.getPatient_age().equals("")) {

			} else {
				registrationBean.setPatient_age("0");
			}

			if (registrationBean.getPatient_agemonth() != null && !registrationBean.getPatient_agemonth().equals("")) {

			} else {
				registrationBean.setPatient_agemonth("0");
			}

			if (registrationBean.getPatient_ageweek() != null && !registrationBean.getPatient_ageweek().equals("")) {

			} else {
				registrationBean.setPatient_ageweek("0");
			}
			if (registrationBean.getPatient_agedays() != null
					&& !registrationBean.getPatient_agedays().equals("")) {

			} else {
				registrationBean.setPatient_agedays("0");
			}
			eclinicDaoManager.startTransaction();

			if(registrationBean.getVip_status()!=null && registrationBean.getVip_status().equals("Y")){
				cd=vipOpNoPrefix;
				if (ab.equals("N")) {
					//registrationBean.setQuery("SELECT max(1+mid(op_number," + vipPrefixLength + ")) FROM " + registrationBean.getTablename()
							//+ "  where direct_lab='N' and office_id='" + registrationBean.getOffice_id() + "' and vip_status='Y'");
					registrationBean.setDirect_lab("N");
					registrationBean.setVip_status("Y");
					registrationBean.setDept_prefix(""+vipPrefixLength);
				} else {
					//registrationBean.setQuery("SELECT max(1+mid(op_number," + vipPrefixLength + ")) FROM " + registrationBean.getTablename()
						//	+ "  where direct_lab='N' and office_id='" + registrationBean.getOffice_id() + "' and vip_status='Y'");
					registrationBean.setDirect_lab("N");
					registrationBean.setVip_status("Y");
					registrationBean.setDept_prefix(""+vipPrefixLength);
				}
			} else {	
				cd=opNoPrefix;
				if (ab!=null && ab.equals("N")) {
					//registrationBean.setQuery("SELECT max(1+mid(op_number," + prefixLength + ")) FROM " + registrationBean.getTablename()
							//+ "  where direct_lab='N' and office_id='" + registrationBean.getOffice_id() + "' and vip_status='N'");
					registrationBean.setDirect_lab("N");
					registrationBean.setVip_status("N");
					registrationBean.setDept_prefix(""+prefixLength);
				} else {
					//registrationBean.setQuery("SELECT max(1+mid(op_number," + prefixLength + ")) FROM " + registrationBean.getTablename()
							//+ "  where direct_lab='N' and office_id='" + registrationBean.getOffice_id() + "' and vip_status='N'");
					registrationBean.setDirect_lab("N");
					registrationBean.setVip_status("N");
					registrationBean.setDept_prefix(""+prefixLength);
				}
				
			}


			DecimalFormat df1 = new DecimalFormat(minDigit);
			opno = registrationDao.getNextOPNumber(registrationBean);

			if (opno == null) { // mostly for fresh DB
				if (ab.equals("Y") || (cd != null && !cd.equals("") && !cd.equals("null"))) {
					opno = cd + df1.format(1);
				} else {
					opno = df1.format(1);
				}

			} else {
				if (ab !=null && ab.equals("Y") || (cd != null && !cd.equals("") && !cd.equals("null"))) {
					opno = cd + df1.format(Integer.parseInt(opno));
				} else {
					opno = df1.format(Integer.parseInt(opno));
				}

			}
			// sept23 2017
			if (null != registrationBean.getDepartment_name() && registrationBean.getDepartment_name().equals("IVF")) {
				if (null != request.getParameter("multiple_save") && !request.getParameter("multiple_save").equals("")) {
					opno = request.getParameter("multiple_save");
				}
				if (registrationBean.getSex().equals("Male"))
					registrationBean.setOp_number(opno + "-M");
				else
					registrationBean.setOp_number(opno + "-F");
				opno = registrationBean.getOp_number();
			} else
				registrationBean.setOp_number(opno);
			
			if (registrationBean.getDirect_lab() == null || registrationBean.getDirect_lab().equals(""))
				registrationBean.setDirect_lab("N");
			if(registrationBean.getFind_source()==null || registrationBean.getFind_source().equals(""))
				registrationBean.setFind_source(null);
			registrationDao.insertNewRegistration(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Registered a New Patient ("+registrationBean.getPatient_name()+")", registrationBean.getOp_number(), registrationBean.getConsult_id(),
					"new_registration");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return opno;
	}

	public synchronized String insertNewRegistrationDL(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException {
		/** For All Clinics - With/ Without Prefix - Single Code **/
		UserBean userBean = new UserBean();
		if (request.getAttribute("userDetails") != null) {
			userBean = (UserBean) request.getAttribute("userDetails");
		}

		int prefixLength = 1;
		String opNoPrefix = "";
		if (null != userBean && null != userBean.getOp_number_prefix() && !userBean.getOp_number_prefix().equals("")) {
			prefixLength = userBean.getOp_number_prefix().length() + 1;
			opNoPrefix = userBean.getOp_number_prefix();
		}

		int vipPrefixLength = 1;
		String vipOpNoPrefix = "";
		if (null != userBean && null != userBean.getVip_op_number_prefix() && !userBean.getVip_op_number_prefix().equals("")) {
			vipPrefixLength = userBean.getVip_op_number_prefix().length() + 1;
			vipOpNoPrefix = userBean.getVip_op_number_prefix();
		}

		String minDigit = "0";
		if (null != userBean && null != userBean.getMin_digit() && !userBean.getMin_digit().equals("")) {
			minDigit = userBean.getMin_digit();
		}
		/** For All Clinics - With/ Without Prefix - Single Code---ENDS **/

		String opno = null;
		try {

			if (registrationBean.getPatient_age() != null
					&& !registrationBean.getPatient_age().equals("")) {

			} else {
				registrationBean.setPatient_age("0");
			}

			if (registrationBean.getPatient_agemonth() != null
					&& !registrationBean.getPatient_agemonth().equals("")) {

			} else {
				registrationBean.setPatient_agemonth("0");
			}

			if (registrationBean.getPatient_ageweek() != null
					&& !registrationBean.getPatient_ageweek().equals("")) {

			} else {
				registrationBean.setPatient_ageweek("0");
			}
			
			if (registrationBean.getPatient_agedays() != null
					&& !registrationBean.getPatient_agedays().equals("")) {

			} else {
				registrationBean.setPatient_agedays("0");
			}

			if (registrationBean.getTablename() == null || registrationBean.getTablename().equals(""))
				registrationBean.setTablename("new_registration");

			eclinicDaoManager.startTransaction();

			//registrationBean.setQuery("SELECT max(0+op_number)+1 FROM new_registration where direct_lab='Y'");


			if (null == registrationBean.getVip_status() || registrationBean.getVip_status().equals("")){
				registrationBean.setVip_status("N");
			}


			if(registrationBean.getVip_status().equals("N")){
				/*registrationBean.setQuery("SELECT max(1+mid(op_number," + prefixLength + ")) FROM " + registrationBean.getTablename()
						+ "  where direct_lab='Y' and office_id='" + registrationBean.getOffice_id() + "' and vip_status='N'");*/
				parameterBean = new ParameterBean();
				parameterBean.setTable_name(""+registrationBean.getTablename());
				parameterBean.setPrefixLength(String.valueOf(prefixLength));
				parameterBean.setDirect_lab("Y");
				parameterBean.setOffice_id(registrationBean.getOffice_id());
				parameterBean.setVip_status("N");

			} else {
				opNoPrefix=vipOpNoPrefix;
				/*registrationBean.setQuery("SELECT max(1+mid(op_number," + vipPrefixLength + ")) FROM " + registrationBean.getTablename()
						+ "  where direct_lab='Y' and office_id='" + registrationBean.getOffice_id() + "' and vip_status='Y'");*/
				
				parameterBean = new ParameterBean();
				parameterBean.setTable_name(""+registrationBean.getTablename());
				parameterBean.setPrefixLength(String.valueOf(vipPrefixLength));
				parameterBean.setDirect_lab("Y");
				parameterBean.setOffice_id(registrationBean.getOffice_id());
				parameterBean.setVip_status("Y");

			}
			/*opno = registrationDao.isAlreadyExist(registrationBean);*/
			opno =commonDao.getNextOPNumber(parameterBean);
			parameterBean=null;
			/*if (opno == null) {
				opno = "1";
			} else {
				opno = "" + opno;
			}*/

			DecimalFormat df1 = new DecimalFormat(minDigit);
			if (opno == null) { // mostly for fresh DB
				opno = opNoPrefix + df1.format(1);

			} else {
				opno = opNoPrefix + df1.format(Integer.parseInt(opno));

			}

			registrationBean.setOp_number(opno);
			if(null!=registrationBean.getBilled_to() && registrationBean.getBilled_to().equals("P")){
				registrationBean.setUser_password("P"+opno);
			}
			registrationDao.insertNewRegistration(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Registered a New Patient("+registrationBean.getPatient_name()+")", registrationBean.getOp_number(),registrationBean.getConsult_id(),"new_registration");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return opno;
	}



	public ArrayList getAllPresentIncentives(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllPresentIncentives(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllReferredClinics(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllReferredClinics(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllDentTreatPlans(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllDentTreatPlans(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllVaccines(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllVaccines(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllVaccinePeriod(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllVaccinePeriod(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllReferredDoctors(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllReferredDoctors(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllReferDoctors(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllReferDoctors(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllDoctors(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllDoctors(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public String insertDoctor(SetupBean setupBean) throws DaoException 
	{

		String docid=null;
		try 
		{   

			eclinicDaoManager.startTransaction();
			setupDao.insertDoctor(setupBean);
			//	docid = setupDao.getLastDepartmentID(setupBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log Given in Action */

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return docid;

	}




	public void updateDoctor(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateDoctor(setupBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log Given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void deleteRefClinic(String id) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.deleteRefClinic(id);
			eclinicDaoManager.commitTransaction();
			/* Audit Log Given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void deleteSoRefClinic(String id, HttpServletRequest request) throws DaoException 
	{

		try 
		{   
			SetupBean oldBean = getSoClinicById(id);

			eclinicDaoManager.startTransaction();
			setupDao.deleteSoRefClinic(id);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted Send Out Clinic "+oldBean.getClinic_name()+" From Setup", null, null, "sendoutclinic_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	// to do
	public void deleteRefDoctor(String id, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.deleteRefDoctor(id);
			eclinicDaoManager.commitTransaction();

			/*if(null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted a Reference Doctor From Setup.", null, null, "refer_doctors");*/

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteDoctor(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.deleteDoctor(setupBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public ArrayList getAllReferClinicArea() throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllReferClinicArea();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<OfficeLetterHeadBean> getAllOffices(SetupBean setupBean) throws DaoException 
	{
		ArrayList<OfficeLetterHeadBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list= setupDao.getAllOffices(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllReferClinics() throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllReferClinics();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSoReferClinics(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllSoReferClinics(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllInsurares(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			if(setupBean.getType()!=null && !setupBean.getType().equals("") && setupBean.getType().equals("setup"))
				setupBean.setQuery(null);
			else
				setupBean.setQuery(" insurance_provider.insurar_type!='S'");
			list=(ArrayList)setupDao.getAllInsurares(setupBean);
			setupBean.setQuery(null);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllRegistration() throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllRegistration();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllConfStatements(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllConfStatements(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllDiagrams4Patient(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllDiagrams4Patient(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllNurseStatements(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList<RegistrationBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)registrationDao.getAllNurseStatements(registrationBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllDevelopmentHistory(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllDevelopmentHistory(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllDietHistory(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllDietHistory(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllNext4AppointSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllNext4AppointSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getDaysOfMonth(AppointmentBean appointmentBean) throws DaoException, ParseException 
	{
					ArrayList<AppointmentBean> list=new ArrayList<AppointmentBean>();
		//			eclinicDaoManager.startTransaction();
		//			list=(ArrayList<AppointmentBean>)appointDao.getDaysOfMonth(appointmentBean);
		//			eclinicDaoManager.commitTransaction();
					AppointmentBean appointBean = new AppointmentBean();
					String doctors_id=appointmentBean.getDoctors_id();
					SimpleDateFormat sdToDB = new SimpleDateFormat("yyyy-MM-dd");
					//SimpleDateFormat sdFromDB = new SimpleDateFormat("dd-MM-yyyy");
					Date fromDate = sdToDB.parse(appointmentBean.getAppoint_startdate());
					Date toDate = sdToDB.parse(appointmentBean.getAppoint_enddate());
					Calendar cal = Calendar.getInstance();
					cal.setTime(fromDate);
					appointBean.setDoctors_id(doctors_id);
					appointBean.setDtconvert(null);
				    appointBean.setAppoint_date(appointmentBean.getAppoint_startdate());
				    list.add(appointBean);
					while (cal.getTime().before(toDate)) {
					    cal.add(Calendar.DATE, 1);
					    appointBean = new AppointmentBean();
					    appointBean.setAppoint_date(sdToDB.format(cal.getTime()));
					    appointBean.setDoctors_id(doctors_id);
						appointBean.setDtconvert(null);
					    list.add(appointBean);
					}
					/* appointBean = new AppointmentBean();
					 appointBean.setAppoint_date(appointmentBean.getAppoint_enddate());
					 appointBean.setDoctors_id(doctors_id);
					 list.add(appointBean);*/
		return list;
	}

	public ArrayList<AppointmentBean> getNext7Days(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getNext7Days(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList<AppointmentBean> getReNext7Days(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getReNext7Days(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getNext3Days(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getNext3Days(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<AppointmentBean> getAllNext3AppointSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllNext3AppointSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList<AppointmentBean> getAllResAppointSlotsWithAppoint(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllResAppointSlotsWithAppoint(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<AppointmentBean> getAllNext3ResAppointSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllNext3ResAppointSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/**Resource Appointments Changes for Damas***/


	public SetupBean getDoctorRatesDetailByID(SetupBean setbean) throws DaoException 
	{
		SetupBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(SetupBean)accountDao.getDoctorRatesDetailByID(setbean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public SetupBean getDoctorRatesByID(SetupBean setbean) throws DaoException 
	{
		SetupBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(SetupBean)accountDao.getDoctorRatesByID(setbean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllProcessedDoctorRates(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllProcessedDoctorRates(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getSalNotProcessedDoctorRates(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getSalNotProcessedDoctorRates(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllDoctorRates(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllDoctorRates(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllDoctorSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllDoctorSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<AppointmentBean> getAllAppointSlotsWithAppoint(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllAppointSlotsWithAppoint(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllAppointSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllAppointSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllNonConfStatements(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllNonConfStatements(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}





	public ArrayList<SetupBean> getAllConsultDiagnosis(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			if(registrationBean.getStatus()==null)
				registrationBean.setStatus("F");
			list=(ArrayList<SetupBean>)registrationDao.getAllConsultDiagnosis(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllConsultProcedureCN(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllConsultProcedureCN(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllConsultProcedure(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)registrationDao.getAllConsultProcedure(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<DocumentDetailBean> getIdWiseDocsAttached(DocumentDetailBean registrationBean) throws DaoException 
	{
		ArrayList<DocumentDetailBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getIdWiseDocsAttached(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getIdWiseDocsIssued(DocumentDetailBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getIdWiseDocsIssued(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<AppointmentBean> getAllWaitings(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllWaitings(appointmentBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public AppointmentBean getWaitingListById(AppointmentBean appointmentBean) throws DaoException 
	{
		AppointmentBean list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(AppointmentBean)appointDao.getWaitingListById(appointmentBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<AppointmentBean> getTheTimeToSlot(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getTheTimeToSlot(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllAppointments(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllAppointments(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<SetupBean> getAllConsultPlanLabTest(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list= (ArrayList<SetupBean>)registrationDao.getAllConsultPlanLabTest(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllConsultPlanProcedure(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)registrationDao.getAllConsultPlanProcedure(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<SetupBean> getLabTestSensitivity(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)laboratoryDao.getLabTestSensitivity(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllConsultLabTestCN(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllConsultLabTestCN(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllConsultLabTest(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)registrationDao.getAllConsultLabTest(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public DocumentDetailBean getDocumentIssuedById(DocumentDetailBean setupBean) throws DaoException {

		DocumentDetailBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getDocumentIssuedById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public RegistrationBean getImage2Edit(SetupBean setupBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getImage2Edit(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getPreviousInsuranceDet(SetupBean setupBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getPreviousInsuranceDet(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public RegistrationBean getEditOpNumber(String opNumber) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getEditOpNumber(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public BirthHistoryBean getBirthHistory(String opNumber) throws DaoException {

		BirthHistoryBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getBirthHistory(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public GlassPrescriptionBean getGlassPrescriptionByConsult(String opNumber) throws DaoException {

		GlassPrescriptionBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getGlassPrescriptionByConsult(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList<GlassPrescriptionBean> getAllGlassPrescriptions(GlassPrescriptionBean glassBean) throws DaoException {

		ArrayList<GlassPrescriptionBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllGlassPrescriptions(glassBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public BpeScoreBean getBpeScoreByConsult(String opNumber) throws DaoException {

		BpeScoreBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getBpeScoreByConsult(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public GlassPrescriptionBean getEyeExamIOP(String opNumber) throws DaoException {

		GlassPrescriptionBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getEyeExamIOP(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public String insertDoctorConsult(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		String consid=null;//,labslno="";
		try {

			/** Patient Status For Specific Doc & Dept --- START **/
			/*registrationBean.setQuery("SELECT consult_id FROM doctor_consult WHERE op_number='" + registrationBean.getOp_number() + "' and doctors_id='"
					+ registrationBean.getDoctors_id() + "'");*/
			String docVisit = common.fetchValueWithSingleParam("doctor_consult", "consult_id", "op_number", registrationBean.getOp_number(), null, " doctors_id='"+ registrationBean.getDoctors_id() + "'");
			if (null != docVisit)
				docVisit = "R"; // revisit
			else
				docVisit = "N"; // new

			/*registrationBean.setQuery("SELECT consult_id FROM doctor_consult WHERE op_number='" + registrationBean.getOp_number() + "' and department_id='"
					+ registrationBean.getDepartment_id() + "'");*/
			String deptVisit = common.fetchValueWithSingleParam("doctor_consult", "consult_id", "op_number", registrationBean.getOp_number(), null, " department_id='"+ registrationBean.getDepartment_id() + "'");
			if (null != deptVisit)
				deptVisit = "R"; // revisit
			else
				deptVisit = "N"; // new

			registrationBean.setVisit_doctor(docVisit);
			registrationBean.setVisit_dept(deptVisit);
			registrationBean.setQuery(null);
			/** Patient Status For Specific Doc & Dept --- END **/

			if(registrationBean.getPatient_age()==null)
				registrationBean.setPatient_age("0");
			if(registrationBean.getPatient_agemonth()==null)
				registrationBean.setPatient_agemonth("0");
			if(registrationBean.getPatient_ageweek()==null)
				registrationBean.setPatient_ageweek("0");
			if(registrationBean.getPatient_agedays()==null)
				registrationBean.setPatient_agedays("0");

			if(registrationBean.getBilled_to()==null)
				registrationBean.setBilled_to("P");

			if(registrationBean.getVisit_status()==null)
				registrationBean.setVisit_status("N");

			if(registrationBean.getInsurar_id()==null || registrationBean.getInsurar_id().equals(""))
				registrationBean.setInsurar_id("0");

			if(registrationBean.getRefered_consult_id()==null || registrationBean.getRefered_consult_id().equals("") || registrationBean.getRefered_consult_id().equals("null"))
				registrationBean.setRefered_consult_id(null);

			if(registrationBean.getTablename()==null)
				registrationBean.setTablename("doctor_consult");


			/*SimpleDateFormat sdf = new SimpleDateFormat("dMMyy");
			SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
			registrationBean.setQuery("select max(0+lab_slno)+1 from "+registrationBean.getTablename()+" where consult_date='"+registrationBean.getConsult_date()+"'");*/

			eclinicDaoManager.startTransaction();
			/*try
		{
			labslno=registrationDao.isAlreadyExist(registrationBean);
			if(labslno==null)
				labslno="1";
		registrationBean.setBarcode_no(""+Integer.parseInt(sdf.format(sdf1.parse(registrationBean.getConsult_date())))+""+labslno);
		registrationBean.setLab_slno(labslno);
		}
		catch(Exception opp)
		{

		}*/
			registrationBean.setFee_app("Not Applicable");
			registrationDao.insertDoctorConsult(registrationBean);
			//registrationBean.setQuery("select max(consult_id) from "+registrationBean.getTablename());
			parameterBean = new ParameterBean();
			parameterBean.setField_name("consult_id");
			parameterBean.setTable_name(registrationBean.getTablename());
			consid=commonDao.getCommonMaxValue(parameterBean);
			parameterBean=null;
			
			/**Setting encounterId for the visit -START*/
			if(null != registrationBean.getVisit_type() && registrationBean.getVisit_type().equals("N")) {
				registrationBean.setEncounter_id(consid);
			} else {
				Integer encounterId = registrationDao.getEncounterIdOfPatient(registrationBean);
				if(null == encounterId || encounterId==0) {
					encounterId = Integer.parseInt(consid);
				}
				registrationBean.setEncounter_id(""+encounterId);
			}
			registrationBean.setConsult_id(consid);
			registrationDao.updateEncounterIdOfPatient(registrationBean);
			/**Setting encounterId for the visit -END*/
			
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Created a Patient Visit", registrationBean.getOp_number(),registrationBean.getConsult_id(),"doctor_consult");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return consid;
	}

	public void deleteQuery(RegistrationBean registrationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.deleteQuery(registrationBean);
			eclinicDaoManager.commitTransaction();
			registrationBean.setQuery(null);

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}



	public void insertConsultExercise(SetupBean registrationBean,HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertConsultExercise(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added An Exercise from Doctor's/Nurse's Workbench", registrationBean.getOp_number(),registrationBean.getConsult_id(),"consult_exercise");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertConsultDiagnosis(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			if(registrationBean.getStatus()==null)
				registrationBean.setStatus("F");
			registrationDao.insertConsultDiagnosis(registrationBean);
			eclinicDaoManager.commitTransaction();

			registrationBean.setUser_id(registrationBean.getEnteredby());
			auditLogEntry(registrationBean, request, "INSERT", "Added a Diagnosis from Doctor's Workbench/Insurance", registrationBean.getOp_number(),registrationBean.getConsult_id(),"consult_diagnosis");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}



	public void insertConsultDiagram(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertConsultDiagram(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added an Examination Diagram from Doctor's Workbench", registrationBean.getOp_number(),registrationBean.getConsult_id(),"diagnosis_diagram");


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertConsultMedicine(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertConsultMedicine(registrationBean);
			eclinicDaoManager.commitTransaction();

			String remarks = "Added a Medicine from Doctor's Workbench";
			if(request.getParameter("allergy_medicine")!=null && !request.getParameter("allergy_medicine").equals("") && request.getParameter("allergy_medicine").equals("Yes"))
				remarks = "Added an Allergeic Medicine from Doctor's Workbench";
			auditLogEntry(registrationBean, request, "INSERT", remarks, registrationBean.getOp_number(),registrationBean.getConsult_id(),"consult_medicine");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertTestAntibiotic(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertTestAntibiotic(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added Test Sensitivity For Lab ID No : "+registrationBean.getLab_idno(), registrationBean.getOp_number(),registrationBean.getConsult_id(),"test_sensitivity");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertCreditNote(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			if(registrationBean.getTablename()==null)
				registrationBean.setTablename("credit_notes");

			eclinicDaoManager.startTransaction();
			registrationDao.insertCreditNote(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added a Credit Note", registrationBean.getOp_number(),registrationBean.getConsult_id(),registrationBean.getTablename());

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertConsultProcedure(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException {

		try {
			DecimalFormat df=new DecimalFormat("#########.00");
			double cost_price=0;
			UserBean userBean=new UserBean();
			if(request.getAttribute("userDetails")!=null){
				userBean=(UserBean)request.getAttribute("userDetails");
			}
			RegistrationBean regis = new RegistrationBean();
			if(registrationBean.getTablename()==null)
				registrationBean.setTablename("consult_procedure");

			if(registrationBean.getGross_amt()==null || registrationBean.getGross_amt().equals("0.0"))
			{
				registrationBean.setGross_amt(registrationBean.getProcedure_price());
				registrationBean.setCorp_disc("0");
			}

			if(request.getParameter("vatOpt")!=null && !request.getParameter("vatOpt").equals("") && request.getParameter("vatOpt").equals("Y"))
				registrationBean.setVat_percent(request.getParameter("vat_per"));
			double vat_amount = 0.00;
			if(registrationBean.getVat_percent()!=null && Double.parseDouble(registrationBean.getVat_percent())>0)
			{
				double vat_percent = Double.parseDouble(registrationBean.getVat_percent());					
				double patient_share = 0.0;
				if (registrationBean.getDeductible() != null && Double.parseDouble(registrationBean.getDeductible())>0)
					patient_share = Double.parseDouble(registrationBean.getDeductible());
				if (registrationBean.getCopay_amt() != null && Double.parseDouble(registrationBean.getCopay_amt())>0)
					patient_share = patient_share + Double.parseDouble(registrationBean.getCopay_amt());
				if(patient_share>0){
					vat_amount = (patient_share * vat_percent)/100;
				}
			}
			else
				registrationBean.setVat_percent("0.00");
			registrationBean.setVat_amount(df.format(vat_amount));
			
			eclinicDaoManager.startTransaction();
			/*** Check if VAT is applicable for Locals***/
			if(userBean.getVat_for_locals()!=null && userBean.getVat_for_locals().equals("N"))
			{
			RegistrationBean countryBean = new RegistrationBean();
			countryBean = registrationDao.getPatientCountryDetails(registrationBean);
			countryBean.setCountry_id(userBean.getDef_country());
			businessLogic.checkVATApplicableForLocal(countryBean,registrationBean);
			}
			/*** Check if VAT is applicable for Locals***/

			if(registrationBean.getTablename().equals("consult_procedure"))
			{	
				regis=registrationDao.getProcedureDetailByID(registrationBean);
				if(regis!=null)
				{
					if(registrationBean.getGross_amt()==null || registrationBean.getGross_amt().equals("") || regis.getCost_price()==null || regis.getCost_price().equals("") || regis.getCostPrice_type()==null)
					{
						cost_price=0;
					}
					else
					{
						if(regis.getCostPrice_type().equalsIgnoreCase("1"))
						{
							regis.setCost_price(""+Double.parseDouble(regis.getCost_price())*(Double.parseDouble(registrationBean.getQuantity())));
							cost_price = Double.parseDouble(regis.getCost_price());
						}

						else
							cost_price = (Double.parseDouble(registrationBean.getGross_amt())*Double.parseDouble(regis.getCost_price())/100);

						registrationBean.setCost_price(df.format(cost_price));
					}
				}
			}

			if(registrationBean.getIp_id()==null || registrationBean.getIp_id().equals("")){
				if(request.getParameter("ip_id")!=null && !request.getParameter("ip_id").equals("") && !request.getParameter("ip_id").equals("null"))
					registrationBean.setIp_id(request.getParameter("ip_id"));
				else
					registrationBean.setIp_id(null);
			}

			String bill_request_service = "Y";
			//To save all requested services
			if(registrationBean.getDoctor_view()!=null && registrationBean.getDoctor_view().equals("true"))
			{
				if(request.getAttribute("userDetails")!=null){
					if(userBean!=null && userBean.getBill_request_service()!=null && !userBean.getBill_request_service().equals(""))
						bill_request_service = userBean.getBill_request_service();
					else
						bill_request_service = "N";
				}
				if(registrationBean.getPackage_status()!=null && registrationBean.getPackage_status().equals("Y"))
					bill_request_service = "Y";

				if(request.getAttribute("consumable")!=null && !request.getAttribute("consumable").equals("") && request.getAttribute("consumable").equals("true"))
					bill_request_service = "Y";
				
				if(registrationBean.getPreapp_stat()==null || registrationBean.getPreapp_stat().equals(""))
					registrationBean.setPreapp_stat("N");
				
				if(request.getAttribute("add_to_request_only")!=null && !request.getAttribute("add_to_request_only").equals("") && request.getAttribute("add_to_request_only").equals("true"))
					bill_request_service = "N";
				
				registrationBean.setTablename("consult_procedure_request");
				registrationDao.insertConsultProcedure(registrationBean);

				if(bill_request_service.equals("Y"))
				{
					/*registrationBean.setQuery("select id from consult_procedure_request where consult_id = '"+registrationBean.getConsult_id()+"' and procedure_id ='"+registrationBean.getProcedure_id()+"' order by id desc limit 1" );
					String request_id = registrationDao.isAlreadyExist(registrationBean);*/
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("consult_procedure_request");
					parameterBean.setConsult_id(registrationBean.getConsult_id());
					parameterBean.setProcedure_id(registrationBean.getProcedure_id());
					String request_id = commonDao.fetchRequestId(parameterBean);
					parameterBean=null;
					
					
					if(request_id!=null && !request_id.equals(""))
					{
						registrationBean.setRequest_id(request_id);

						/*registrationBean.setQuery("update consult_procedure_request set billed_status='Y' where id='" + request_id + "'");
						registrationDao.deleteQuery(registrationBean);*/
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("consult_procedure_request");
						parameterBean.setField_name("billed_status='Y'");
						parameterBean.setField_name1("id='" + request_id + "'");
						commonDao.updateQueryInCommon(parameterBean);
						parameterBean=null;
					}
				}				
			}
			
			if(registrationBean.getPreapp_stat()==null || registrationBean.getPreapp_stat().equals(""))
				registrationBean.setPreapp_stat("N");
			
			if(bill_request_service.equals("Y"))
			{
				registrationBean.setTablename("consult_procedure");
				registrationDao.insertConsultProcedure(registrationBean);
			}

			eclinicDaoManager.commitTransaction();
			//Omit duplicate log entry for package
			if(registrationBean.getProcedure_type()==null ||(registrationBean.getProcedure_type()!=null && !registrationBean.getProcedure_type().equals("G"))){
				auditLogEntry(registrationBean, request, "INSERT", "Added a Procedure/Treatment from Doctor's Workbench/Billing", registrationBean.getOp_number(),registrationBean.getConsult_id(),"consult_procedure");
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public synchronized String insertClaim(RegistrationBean registrationBean,String previnv, HttpServletRequest request) throws DaoException {
		String ab=null;
		try {
			eclinicDaoManager.startTransaction();

			DecimalFormat df=new DecimalFormat(registrationBean.getMin_digit()); 
			if(previnv!=null && !previnv.equals(""))
			{
				ab=previnv;
			}
			else
			{
				/*registrationBean.setQuery("SELECT max(0+invoice_no)+1 FROM claim_generated where office_id='"+registrationBean.getOffice_id()+"' and cancel_status='N'");
				ab=registrationDao.isAlreadyExist(registrationBean);*/
				
				parameterBean = new ParameterBean();
				parameterBean.setField_name(" invoice_no");
				parameterBean.setTable_name("claim_generated");
				parameterBean.setOffice_id(registrationBean.getOffice_id());
				//parameterBean.setCancel_status("N");
				ab=commonDao.fetchMaxNextNum(parameterBean);
				parameterBean=null;
				
				if (null != ab && !ab.equals("")) {
					ab = df.format(Double.parseDouble(ab));
				}
			}

			if(ab==null)
			{
				ab="1";
				ab = df.format(Double.parseDouble(ab));
			}

			//DecimalFormat df=new DecimalFormat(registrationBean.getMin_digit()); 
			//registrationBean.setInvoice_no(df.format(Double.parseDouble(ab)));
			registrationBean.setInvoice_no(ab);
			
			ab=registrationBean.getInvoice_no();
			registrationDao.insertClaim(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Generated a Claim Invoice", registrationBean.getOp_number(),registrationBean.getConsult_id(),"claim_generated");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ab;

	}


	public void insertDoctorRates4Calc(SetupBean registrationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			accountDao.insertDoctorRates4Calc(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertDoctorRates(SetupBean registrationBean,HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			accountDao.insertDoctorRates(registrationBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(registrationBean, request, "INSERT", "Added Doctor Rates", null,null,"rate_master");


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertDoctorSlots(AppointmentBean appointmentBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			appointDao.insertDoctorSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertDoctorTimeSlots(AppointmentBean appointmentBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			appointDao.insertDoctorTimeSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertToWaitingList(AppointmentBean appointmentBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			appointDao.insertToWaitingList(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public synchronized String insertAppointment(AppointmentBean appointmentBean) throws DaoException {
		SimpleDateFormat sdToDB = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat sdFromDB = new SimpleDateFormat("dd-MM-yyyy");
		Boolean appointExist = false;
		String exist = "1";
		String slots = "";
		RegistrationBean registrationBean = new RegistrationBean();
		try {

			if(appointmentBean.getResistant()==null)
				appointmentBean.setResistant("1");

			Date apdate = sdToDB.parse(appointmentBean.getAppoint_date());

			int j=Integer.parseInt(appointmentBean.getResistant());

			for(int i=0;i<j;i++)
			{
				if(i!=0)
				{
					apdate.setDate(apdate.getDate()+1);
					appointmentBean.setDtconvert("a");
					appointmentBean.setAppoint_date(sdFromDB.format(apdate));
				}

				/*** Check if this slot is already booked - before save --- @ START ***/
				AppointmentBean tempRegBean = new AppointmentBean();
				tempRegBean.setAppoint_hr(appointmentBean.getAppoint_hr());
				tempRegBean.setAppoint_min(appointmentBean.getAppoint_min());
				tempRegBean.setDtconvert("abc");
				tempRegBean.setAppoint_date(sdFromDB.format(sdToDB.parse(appointmentBean.getAppoint_date())));
				tempRegBean.setDoctors_id(appointmentBean.getDoctors_id());
				tempRegBean.setSlot_day("" + sdToDB.parse(tempRegBean.getAppoint_date()).getDay());
				tempRegBean.setOffice_id(appointmentBean.getOffice_id());
				tempRegBean.setQuery(" slots>='" + tempRegBean.getAppoint_hr() + "' and slots<'" + tempRegBean.getAppoint_min() + "'");
				boolean res = false;
				ArrayList<AppointmentBean> rescheduleAppSlots;
				if(appointmentBean.getResource_id()!=null &&!appointmentBean.getResource_id().equals("")) {
					res = true;
					tempRegBean.setResource_id(appointmentBean.getResource_id());
					rescheduleAppSlots = getAllResAppointSlots(tempRegBean);
				}else
					rescheduleAppSlots = getAllAppointSlots(tempRegBean);				
				
				
				tempRegBean.setQuery(null);
				ArrayList<AppointmentBean> allSlotsWithAppointList =  new ArrayList<AppointmentBean>();
				if(res)
					allSlotsWithAppointList = getAllResAppointSlotsWithAppoint(tempRegBean);
				else
					allSlotsWithAppointList = getAllAppointSlotsWithAppoint(tempRegBean);
				ArrayList<AppointmentBean> usedAppointSlots = new ArrayList<AppointmentBean>();

				for (AppointmentBean appointBean : allSlotsWithAppointList) {
					if(appointExist) 
						break;
					if (null != appointBean.getSlot_nos()) {
						appointBean.setDtconvert("abc");
						appointBean.setAppoint_date(appointBean.getAppoint_date());
						appointBean.setSlot_day("" + sdToDB.parse(tempRegBean.getAppoint_date()).getDay());
						if(res)
							usedAppointSlots = getResAppointmentSlots(appointBean);
						else
							usedAppointSlots = getAppointmentSlots(appointBean);
						
						for (AppointmentBean rescheduleSlotBean : rescheduleAppSlots) {
							for (AppointmentBean usedSlotBean : usedAppointSlots) {

								if (usedSlotBean.getSlots().equals(rescheduleSlotBean.getSlots())) {
									slots = "";
									registrationBean.setQuery("SELECT slots FROM appointment_sch_res WHERE active_status='Y'  and appointment_sch_res.slot_day="+appointBean.getSlot_day()+"  "
											+ " and '"+appointBean.getAppoint_date()+"' >= appointment_sch_res.fromdate and '"+appointBean.getAppoint_date()+"' <= appointment_sch_res.todate and "
											+ " appointment_sch_res.resource_id="+appointBean.getResource_id()+" and appointment_sch_res.office_id="+appointBean.getOffice_id());	
									slots = isAlreadyExist(registrationBean);
									exist = "0~"+appointBean.getSerial_id()+"~"+appointBean.getSlots()+"~"+appointBean.getSlot_nos()+"~"+slots;
									appointExist = true;
									break;

								}
							}
						}
					}

				}
				/*** Check if this slot is already booked --- @ end ***/


				eclinicDaoManager.startTransaction();
				if(!appointExist) {
					if(null != appointmentBean.getDepartment_id() && appointmentBean.getDepartment_id().equals("")){
						appointmentBean.setDepartment_id(null);
					}
					appointDao.insertAppointment(appointmentBean);
				}
				eclinicDaoManager.commitTransaction();
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return exist;

	}
	public void insertAppointmentWithoutCheck(AppointmentBean appointBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			appointBean.setSerial_id(null);
			appointDao.insertAppointment(appointBean);
			//RegistrationBean regBean = new RegistrationBean();
			//regBean.setQuery("select max(id) from appointments");
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("appointments");
			eclinicDaoManager.commitTransaction();
			appointBean.setSerial_id(common.fetchMaxIdfromTable(parameterBean));
			parameterBean=null;
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateBirthHistory(BirthHistoryBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateBirthHistory(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "UPDATE", "Updated Birth History From Doctor's/Nurse's Workbench", registrationBean.getOp_number(),
					null, "birth_history");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}



	public void insertEyeExamIOP(GlassPrescriptionBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertEyeExamIOP(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added Eye Examination - IOP From Doctor's/Nurse's Workbench", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "eyeexam_iop");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertGlassPrescription(GlassPrescriptionBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertGlassPrescription(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added Glass Prescription From Doctor's/Nurse's Workbench", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "glass_prescription");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertBpeScore(BpeScoreBean bpeScoreBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertBpeScore(bpeScoreBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(bpeScoreBean, request, "INSERT", "Added Dental BPE Scores From Doctor's/Nurse's Workbench", bpeScoreBean.getOp_number(),
					bpeScoreBean.getConsult_id(), "dental_bpescores");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertBirthHistory(BirthHistoryBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertBirthHistory(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added Birth history From Doctor's/Nurse's Workbench", registrationBean.getOp_number(), null,
					"birth_history");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void reSubmitClaim(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.reSubmitClaim(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "UPDATE", "Resubmitted the Claim From Insurance Module", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "claim_generated");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void submitClaim(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.submitClaim(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "UPDATE", "Submitted the Claim From Insurance Module", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "claim_generated");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void cancelInvoice(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.cancelInvoice(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "UPDATE", "Cancelled Claim Invoice", registrationBean.getOp_number(), registrationBean.getConsult_id(),
					"claim_generated");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateImageEdited(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateImageEdited(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "UPDATE", "Updated Examination Diagram From Doctor's Workbench", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "diagnosis_diagram");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public String updateReceiptBill(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		String billno=null;
		try {
			eclinicDaoManager.startTransaction();

			registrationDao.updateReceiptBill(registrationBean);
			//registrationBean.setQuery("select bill_no from bill_generated where cancel_status='N' and  consult_id='"+registrationBean.getConsult_id()+"'");
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("bill_generated");
			parameterBean.setField_name("bill_no");
			parameterBean.setField_name1("consult_id");
			parameterBean.setField_value1(registrationBean.getConsult_id());
			parameterBean.setOffice_id(null);
			parameterBean.setField_name2("cancel_status='N'");
			billno=commonDao.fetchValueWithSingleParam(parameterBean);
			parameterBean=null;
			if(billno==null)
				billno="";
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "UPDATE", "Updated Invoice Amount on Receipt Generation.", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "bill_generated");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return billno;
	}


	public void updatePreApprAuthStatus(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updatePreApprAuthStatus(registrationBean);
			eclinicDaoManager.commitTransaction();

			if(null != request) { // request= null when called from webservice/thread
				auditLogEntry(registrationBean, request, "UPDATE", "Updated Authorisation Status Of Pre-Approval Request", registrationBean.getOp_number(),
						registrationBean.getConsult_id(), registrationBean.getTablename());
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void updatePreApprRequestStatus(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updatePreApprRequestStatus(registrationBean);
			eclinicDaoManager.commitTransaction();

			if (null != request) { // request= null when called from webservice/thread
				auditLogEntry(registrationBean, request, "UPDATE", "Updated Request Status Of Pre-Approval Request", registrationBean.getOp_number(),
						registrationBean.getConsult_id(), registrationBean.getTablename());
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	
	public void updateOnlinePreApprRequestStatus(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			insuranceDao.updateOnlinePreApprRequestStatus(registrationBean);
			eclinicDaoManager.commitTransaction();

			if (null != request) { // request= null when called from webservice/thread
				auditLogEntry(registrationBean, request, "UPDATE", "Updated Online Request Status Of Pre-Approval Request", registrationBean.getOp_number(),
						registrationBean.getConsult_id(), registrationBean.getTablename());
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	
	public void updateRefundDetailProc(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateRefundDetailProc(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "UPDATE", "Updated Refund Details Of Procedure/Treatment", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "consult_procedure");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateRefundDetail(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateRefundDetail(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "UPDATE", "Updated Refund Details Of Investigation", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "consult_labtest");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void cancelReceiptVouch(RegistrationBean registrationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.cancelReceiptVouch(registrationBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log Given in Business Logic */


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void cancelReceipt(RegistrationBean registrationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.cancelReceipt(registrationBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log Given in Business Logic */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public synchronized String insertReceipt(RegistrationBean registrationBean,String previnv) throws DaoException {
		String ab=null;
		try {
			eclinicDaoManager.startTransaction();

			if(previnv!=null && !previnv.equals(""))
			{
				ab=previnv;
			}
			else
			{
				/*registrationBean.setQuery("SELECT max(0+bill_no)+1 FROM bill_generated where office_id='"+registrationBean.getOffice_id()+"' and cancel_status='N'");
				ab=registrationDao.isAlreadyExist(registrationBean);*/
				
				parameterBean = new ParameterBean();
				parameterBean.setField_name(" bill_no");
				parameterBean.setTable_name("bill_generated");
				parameterBean.setOffice_id(registrationBean.getOffice_id());
				parameterBean.setCancel_status("N");
				ab=commonDao.fetchMaxNextNum(parameterBean);
				parameterBean=null;
			}


			if(ab==null)
			{
				ab="1";
			}

			DecimalFormat df=new DecimalFormat(registrationBean.getMin_digit()); 
			registrationBean.setBill_no(df.format(Double.parseDouble(ab)));

			registrationDao.insertReceipt(registrationBean);

			ab=registrationBean.getBill_no();
			eclinicDaoManager.commitTransaction();

			/* Audit Log Given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ab;
	}


	public synchronized String insertReceiptVoucher(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		String ab=null;
		try {
			eclinicDaoManager.startTransaction();
			/*registrationBean.setQuery("SELECT max(0+receipt_no)+1 FROM receipt_generated");
			ab=registrationDao.isAlreadyExist(registrationBean);*/
			
			parameterBean = new ParameterBean();
			parameterBean.setField_name(" receipt_no");
			parameterBean.setTable_name("receipt_generated");
			ab=commonDao.fetchMaxNextNum(parameterBean);
			parameterBean=null;
			
			if(ab==null)
			{
				ab="1";
			}
			registrationBean.setReceipt_no(ab);
			if(registrationBean.getAdvance_status()==null)
				registrationBean.setAdvance_status("N");
			registrationDao.insertReceiptVoucher(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Receipt Generated", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "receipt_generated");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ab;
	}

	public void insertConsultLabTest(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException {

		try {
			UserBean userBean=new UserBean();
			if(request.getAttribute("userDetails")!=null){
				userBean=(UserBean)request.getAttribute("userDetails");
			}
			DecimalFormat df=new DecimalFormat("#########.00");
			
			if (registrationBean.getCopay_amt() != null && Double.parseDouble(registrationBean.getCopay_amt())<0)
			{
				registrationBean.setCopay_amt("0");
			}
			
			if(registrationBean.getTablename()==null)
				registrationBean.setTablename("consult_labtest");
			if(Double.parseDouble(registrationBean.getGross_amt())==0)
			{
				registrationBean.setGross_amt(registrationBean.getLabtest_price());
				registrationBean.setCorp_disc("0");
			}

			if(request.getParameter("vatOpt")!=null && !request.getParameter("vatOpt").equals("") && request.getParameter("vatOpt").equals("Y"))
				registrationBean.setVat_percent(request.getParameter("vat_per"));
			double vat_amount = 0.00;
			if(registrationBean.getVat_percent()!=null && Double.parseDouble(registrationBean.getVat_percent())>0)
			{
				double vat_percent = Double.parseDouble(registrationBean.getVat_percent());					
				double patient_share = 0.0;
				if (registrationBean.getDeductible() != null && Double.parseDouble(registrationBean.getDeductible())>0)
					patient_share = Double.parseDouble(registrationBean.getDeductible());
				if (registrationBean.getCopay_amt() != null && Double.parseDouble(registrationBean.getCopay_amt())>0)
					patient_share = patient_share + Double.parseDouble(registrationBean.getCopay_amt());
				if(patient_share>0){
					vat_amount = (patient_share * vat_percent)/100;
				}
			}
			else
				registrationBean.setVat_percent("0.00");
			registrationBean.setVat_amount(df.format(vat_amount));
			
			if(registrationBean.getPrice_set_status()==null)
				registrationBean.setPrice_set_status("Y");
			String remarks = "";
			if(registrationBean.getRemarks()!=null && !registrationBean.getRemarks().equals(""))
				remarks = registrationBean.getRemarks();
			if(request.getParameter("remarks")!=null && request.getParameter("remarks")!="")
				remarks = request.getParameter("remarks");
			if(request.getParameter("teethcodevalue")!=null && !request.getParameter("teethcodevalue").equals(""))
				remarks = remarks + "[Teeth : "+request.getParameter("teethcodevalue")+"]";
			registrationBean.setRemarks(remarks);
			
			eclinicDaoManager.startTransaction();
			/*** Check if VAT is applicable for Locals***/
			if(userBean.getVat_for_locals()!=null && userBean.getVat_for_locals().equals("N"))
			{
			RegistrationBean countryBean = new RegistrationBean();
			countryBean = registrationDao.getPatientCountryDetails(registrationBean);
			countryBean.setCountry_id(userBean.getDef_country());
			businessLogic.checkVATApplicableForLocal(countryBean,registrationBean);
			}
			/*** Check if VAT is applicable for Locals***/
			if(registrationBean.getTablename().equals("consult_labtest"))
			{
				RegistrationBean regis = new RegistrationBean();				
				regis=registrationDao.getEditTestSetup(registrationBean);
				if(regis!=null)
				{
					double cost_price=0;
					if(registrationBean.getGross_amt()==null || registrationBean.getGross_amt().equals("") || regis.getCost_price()==null || regis.getCost_price().equals("") || regis.getCostPrice_type()==null)
					{
						cost_price=0;
					}
					else
					{
						if(regis.getCostPrice_type()!=null && regis.getCostPrice_type().equalsIgnoreCase("1"))
						{	
							regis.setCost_price(""+Double.parseDouble(regis.getCost_price())*(Double.parseDouble(registrationBean.getQuantity())));
							cost_price = Double.parseDouble(regis.getCost_price());
						}						
						else
						{
							cost_price = (Double.parseDouble(registrationBean.getGross_amt())-(Double.parseDouble(registrationBean.getGross_amt())*Double.parseDouble(regis.getCost_price())/100));
						}
					}
					registrationBean.setCost_price(df.format(cost_price));
				}

			}
			if(registrationBean.getEmergency()==null || registrationBean.getEmergency().equals(""))
				registrationBean.setEmergency("N");

			if(registrationBean.getIp_id()==null || registrationBean.getIp_id().equals("")){
				if(request.getParameter("ip_id")!=null && !request.getParameter("ip_id").equals("") && !request.getParameter("ip_id").equals("null"))
					registrationBean.setIp_id(request.getParameter("ip_id"));
				else
					registrationBean.setIp_id(null);
			}

			String bill_request_service = "Y";
			//To save all requested services
			if(registrationBean.getDoctor_view()!=null && registrationBean.getDoctor_view().equals("true"))
			{
				if(request.getAttribute("userDetails")!=null){
					if(userBean!=null && userBean.getBill_request_service()!=null && !userBean.getBill_request_service().equals(""))
						bill_request_service = userBean.getBill_request_service();
					else
						bill_request_service = "N";					
				}
				if(registrationBean.getPackage_status()!=null && registrationBean.getPackage_status().equals("Y"))
					bill_request_service = "Y";
				if(request.getAttribute("add_to_request_only")!=null && !request.getAttribute("add_to_request_only").equals("") && request.getAttribute("add_to_request_only").equals("true"))
					bill_request_service = "N";

				registrationBean.setTablename("consult_labtest_request");
				registrationDao.insertConsultLabTest(registrationBean);

				if(bill_request_service.equals("Y"))
				{
					/*registrationBean.setQuery("select id from consult_labtest_request where consult_id = '"+registrationBean.getConsult_id()+"' and labtest_id ='"+registrationBean.getLabtest_id()+"' order by id desc limit 1" );
					String req_id = registrationDao.isAlreadyExist(registrationBean);*/
					
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("consult_labtest_request");
					parameterBean.setConsult_id(registrationBean.getConsult_id());
					parameterBean.setLabtest_id(registrationBean.getLabtest_id());
					String req_id = commonDao.fetchRequestId(parameterBean);
					parameterBean=null;
					
					if(req_id!=null && !req_id.equals(""))
					{
						registrationBean.setRequest_id(req_id);

						/*registrationBean.setQuery("update consult_labtest_request set billed_status='Y' where id='" + req_id + "'");
						registrationDao.deleteQuery(registrationBean);*/
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("consult_labtest_request");
						parameterBean.setField_name("billed_status='Y'");
						parameterBean.setField_name1("id='" + req_id + "'");
						commonDao.updateQueryInCommon(parameterBean);
						parameterBean=null;
					}
				}				
			}

			if(bill_request_service.equals("Y"))
			{
				registrationBean.setTablename("consult_labtest");
				registrationDao.insertConsultLabTest(registrationBean);
			}

			eclinicDaoManager.commitTransaction();
			registrationBean.setUser_id(registrationBean.getEnteredby());
			auditLogEntry(registrationBean, request, "INSERT", "Added an Investigation from Doctor's Workbench/Billing", registrationBean.getOp_number(),registrationBean.getConsult_id(),"consult_labtest");
			userBean=null;registrationBean=null;

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public List<RegistrationBean> getPatientOutstanding(RegistrationBean rgistrationBean) throws DaoException {

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getPatientOutstanding(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List getAllDoctorId(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllDoctorId(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public List getAllConsultMedicine(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllConsultMedicine(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public String getRosCount(HistoryPresentIllBean hopiBean) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getRosCount(hopiBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public String getMedicineIdByNFP(RegistrationBean registrationBean ) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getMedicineIdByNFP(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public String getDoctorIdOpNoIfExist(RegistrationBean registrationBean ) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getDoctorIdOpNoIfExist(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public RegistrationBean getopnumberedit(String opNumber) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getopnumberedit(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public List<RegistrationBean> getAllConsultationList(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllConsultationList(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}



	public List getAllCreditDebitNotes(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllCreditDebitNotes(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<RegistrationBean> getAllConsultationListSearch(RegistrationBean rgistrationBean) throws DaoException {

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllConsultationListSearch(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public List<RegistrationBean> getAllPatientCountList(RegistrationBean rgistrationBean) throws DaoException {

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllPatientCountList(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List getAllConsultationListSearchOBB(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllConsultationListSearchOBB(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public List<RegistrationBean> getAllConsultationList4Lab(RegistrationBean rgistrationBean) throws DaoException {

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllConsultationList4Lab(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<RegistrationBean> getAllOPList(RegistrationBean rgistrationBean) throws DaoException {

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllOPList(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}



	public ArrayList getAllMedicines4SearchByGrp(SetupBean rgistrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllMedicines4SearchByGrp(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getAllMedicines4Search(RegistrationBean rgistrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllMedicines4Search(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getAllMedicines(RegistrationBean rgistrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllMedicines(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public String getDoctorFee(String id) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getDoctorFee(id);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public AppointmentBean getAppointmentDetailByID(AppointmentBean appointmentBean) throws DaoException {

		AppointmentBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = appointDao.getAppointmentDetailByID(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getEditDrConsult(String consultId) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getEditDrConsult(consultId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getAllCountries() throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllCountries();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateSubIns(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateSubIns(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public String insertInsurarNetwork(SetupBean setupBean) throws DaoException {
		String networkId = "";
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertInsurarNetwork(setupBean);
			networkId = setupDao.getLastInsertNetworkID();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return networkId;

	}

	public void insertInsurarSub(SetupBean setupBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertInsurarSub(setupBean);
			eclinicDaoManager.commitTransaction();

			//RegistrationBean regBean=new RegistrationBean();
			//regBean.setQuery("select insurar_name from insurance_provider where insurar_id="+setupBean.getInsurar_id());
			String insurarName=common.fetchValueWithSingleParam("insurance_provider", "insurar_name", "insurar_id", setupBean.getInsurar_id(), null, null);
			auditLogEntry(setupBean, request, "INSERT", "New Sub-Insurance "+setupBean.getInsurar_subname()+" added under Insurance "+insurarName, null, null, "insurar_sub");
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertMarkEx(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertMarkEx(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void insertAntibiotic(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertAntibiotic(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertNationality(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertNationality(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateReferDoctor(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateReferDoctor(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public String insertReferDoctor(SetupBean setupBean) throws DaoException 
	{
		String refdoc=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertReferDoctor(setupBean);
			refdoc=setupDao.getLastRefDocID();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return refdoc;
	}


	public void updateReferClinic(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateReferClinic(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateSoReferClinic(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateSoReferClinic(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertReferClinic(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertReferClinic(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertSoReferClinic(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertSoReferClinic(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public String getDoctorConsFee(SetupBean setBean) throws DaoException 
	{
		String fee=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			fee=setupDao.getDoctorConsFee(setBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return fee;
	}


	public String getVaccinationSchedule(SetupBean setupBean) throws DaoException 
	{
		String fee=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			fee=setupDao.getVaccinationSchedule(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return fee;
	}

	public String getVaccinationSchedulePat(SetupBean setupBean) throws DaoException 
	{
		String fee=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			fee=setupDao.getVaccinationSchedulePat(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return fee;
	}

	public SetupBean getVaccinationSchedulePatDet(SetupBean setupBean) throws DaoException 
	{
		SetupBean fee=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			fee=setupDao.getVaccinationSchedulePatDet(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return fee;
	}


	public void insertVaccSchedule(SetupBean setupBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertVaccSchedule(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added Vaccination Schedule", setupBean.getOp_number(),
					setupBean.getConsult_id(), "vaccination_patient");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void updateDentTreatStatus(SetupBean setupBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{   
			SetupBean oldBean=getDentalTreatById(setupBean);   

			eclinicDaoManager.startTransaction();
			setupDao.updateDentTreatStatus(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Updated Dental Vaccination Details", oldBean.getOp_number(),
						oldBean.getConsult_id(), "dental_treatments");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateVaccSchedule(SetupBean setupBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{   
			SetupBean oldBean=new SetupBean();
			oldBean = getVaccinationSchedulePatDet(setupBean); 

			eclinicDaoManager.startTransaction();
			setupDao.updateVaccSchedule(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Updated Vaccination Schedule", oldBean.getOp_number(), oldBean.getConsult_id(),
						"vaccination_patient");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public String insertProvider(SetupBean setupBean) throws DaoException 
	{
		String insid=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertProvider(setupBean);
			insid=setupDao.getLastInsurarID();
			eclinicDaoManager.commitTransaction();
			/*Audit Log given in Action */

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return insid;
	}

	public String insertTreatPlan(SetupBean setupBean,HttpServletRequest request) throws DaoException 
	{
		String insid=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertTreatPlan(setupBean);
			insid=setupDao.getLastTreatPlanID();
			eclinicDaoManager.commitTransaction();
			auditLogEntry(setupBean, request, "INSERT", "Added Dental Treatment Plan", setupBean.getOp_number(), setupBean.getConsult_id(), "treatment_plan");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return insid;
	}


	public SetupBean getClinicById(String id) throws DaoException 
	{
		SetupBean setupBean1=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupBean1=setupDao.getClinicById(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean1;
	} 

	public SetupBean getSoClinicById(String id) throws DaoException 
	{
		SetupBean setupBean1=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupBean1=setupDao.getSoClinicById(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean1;
	} 



	public ArrayList getAllDentalTreatPlanDetById(SetupBean setupBean) throws DaoException 
	{
		ArrayList setupBean1=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupBean1=setupDao.getAllDentalTreatPlanDetById(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean1;
	} 


	public ArrayList getAllDentalTreatById(SetupBean setupBean) throws DaoException 
	{
		ArrayList setupBean1=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupBean1=setupDao.getAllDentalTreatById(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean1;
	} 

	public SetupBean getDentalTreatById(SetupBean setupBean) throws DaoException 
	{
		SetupBean setupBean1=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupBean1=setupDao.getDentalTreatById(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean1;
	} 

	public SetupBean getInsurarConsult(SetupBean setupBean) throws DaoException 
	{
		SetupBean setupBean1=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupBean1=setupDao.getInsurarConsult(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean1;
	} 



	// method commented in SetupAction.
	/*public void updateAntibiotics(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateAntibiotics(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}*/ 

	public void updateCountries(SetupBean setupBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{   //SetupBean oldbean=getCountriesById(setupBean);     	
		eclinicDaoManager.startTransaction();
		setupDao.updateCountries(setupBean);
		eclinicDaoManager.commitTransaction();
		auditLogEntry(setupBean, request, "UPDATE", "Updated a Country", null, null, "country_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 


	public void deleteNetworkIns(String id,HttpServletRequest request) throws DaoException 
	{
		try 
		{   
			SetupBean oldBean=new SetupBean();
			oldBean.setSerial_id(id);
			oldBean = getInsurarNetwork(oldBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteNetworkIns(id);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted Insurance Network From this Office (ID=" + oldBean.getOffice_id() + ")", null, null,
						"insurar_network_office");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteSubIns(String id,HttpServletRequest request) throws DaoException 
	{

		try 
		{   
			SetupBean oldBean=new SetupBean();
			oldBean.setInsurar_sub(id);
			oldBean = getInsurarSubById(oldBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteSubIns(id);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted Sub-Insurance "+oldBean.getInsurar_subname(), null, null, "insurar_sub");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteDiagCat(String id,HttpServletRequest request) throws DaoException 
	{
		try 
		{   
			SetupBean oldBean=new SetupBean();
			oldBean.setDiagnosis_category(id);
			oldBean = getDiagnosisCategoryById(oldBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteDiagCat(id);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Removed a Diagnosis Category", null, null, "diagnosis_category");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	/* Method Commented in SetupAction.java -START*/
	public void deleteMarkEx(String id) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.deleteMarkEx(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	/*public void deleteAntibiotics(String id) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.deleteAntibiotics(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}*/
	/* Method Commented in SetupAction.java -END*/

	public void deleteCountries(String id,HttpServletRequest request) throws DaoException 
	{

		try 
		{   
			SetupBean oldBean = new SetupBean();
			oldBean.setCountry_id(id);
			oldBean = getCountriesById(oldBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteCountries(id);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted a Country", null, null, "country_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	// method commented in action
	public void updateMarkEx(SetupBean setupBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateMarkEx(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void updateProvider(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{        
			SetupBean oldBean=getInsuranceProviderById(setupBean);
			eclinicDaoManager.startTransaction();
			setupDao.updateProvider(setupBean);
			setupDao.updateOfficeInsurar(setupBean);
			eclinicDaoManager.commitTransaction();

			if(oldBean!=null){
				auditLogEntry(oldBean,request, "UPDATE", "Edited & Updated Insurance/Company/Sponsor "+oldBean.getInsurar_name(), null,null,"insurance_provider");
			}
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 


	public void deleteProcedure(SetupBean setupBean, HttpServletRequest request) throws DaoException {
		try {

			RegistrationBean oldBean = new RegistrationBean();
			oldBean.setProcedure_id(setupBean.getProcedure_id());
			oldBean.setOffice_id(setupBean.getOffice_id());
			oldBean = getProcedureDetailByID(oldBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteProcedure(setupBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted Procedure From Office (ID=" + setupBean.getOffice_id() + ")", null, null,
						"procedure_setup_office");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void deleteProvider(SetupBean setupBean, HttpServletRequest request) throws DaoException {
		try {

			SetupBean oldBean = getInsuranceProviderById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteProvider(setupBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted an Insurance/Company/Sponsor - "+oldBean.getInsurar_name(), null, null, "office_insurar");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}



	public void updateSessionDetails(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateSessionDetails(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(rgistrationBean, request, "UPDATE", "Updated Physiotherapy Session Details from Doctor Workbench", rgistrationBean.getOp_number(),
					rgistrationBean.getConsult_id(), "doctor_consult");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateReferDetails(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateReferDetails(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(rgistrationBean, request, "UPDATE", "Updated Patient Referral Details", rgistrationBean.getOp_number(),
					rgistrationBean.getConsult_id(), "doctor_consult");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateMedicalSection(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateMedicalSection(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(rgistrationBean, request, "UPDATE", "Added Physiotherapy Details Of the patient From Doctor's Workbench",
					rgistrationBean.getOp_number(), rgistrationBean.getConsult_id(), "doctor_consult");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void updateSOAP(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.updateSOAP(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(rgistrationBean, request, "UPDATE", "Added/Updated Physiotherapy SOAP Details Of the Patient From Doctor's Workbench",
					rgistrationBean.getOp_number(), rgistrationBean.getConsult_id(), "doctor_consult");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void updateLeaveCertificate(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateLeaveCertificate(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(rgistrationBean, request, "UPDATE", "Added/Updated Leave Certificate Details Of the Patient From Doctor's Workbench",
					rgistrationBean.getOp_number(), rgistrationBean.getConsult_id(), "doctor_consult");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updatePreviousMedicalHistory(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.updatePreviousMedicalHistory(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(rgistrationBean, request, "UPDATE", "Added/Updated Previous Medical History Of the Patient From Doctor's Workbench",
					rgistrationBean.getOp_number(), rgistrationBean.getConsult_id(), "new_registration");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void updateRegistrationOnly(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {

			RegistrationBean oldBean = getRegistrationDetails(registrationBean);

			eclinicDaoManager.startTransaction();
			registrationDao.updateRegistrationOnly(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Edited & Updated Patient Registration Details From Registration Search/OP List", oldBean.getOp_number(),
					oldBean.getConsult_id(), "new_registration");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateRegistration(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {

			RegistrationBean oldBean = getRegistrationDetails(registrationBean);

			eclinicDaoManager.startTransaction();
			registrationDao.updateRegistration(registrationBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Edited & Updated Patient Registration Details From Billing/Registration", oldBean.getOp_number(),
						oldBean.getConsult_id(), "new_registration");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void deleteRegistration(String opNo , HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			RegistrationBean oldBean = new RegistrationBean();
			oldBean.setOp_number(opNo);
			oldBean = getRegistrationDetails(oldBean);

			eclinicDaoManager.startTransaction();
			registrationDao.deleteRegistration(opNo);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "DELETE", "Deleted Patient Registration", oldBean.getOp_number(), oldBean.getConsult_id(), "new_registration");
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public RegistrationBean getCreditNoteDetailByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getCreditNoteDetailByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getConsultReceiptVouchDetailByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getConsultReceiptVouchDetailByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getConsultReceiptDetailByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getConsultReceiptDetailByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getConsultClaimDetailByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getConsultClaimDetailByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getProcedureDetailByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getProcedureDetailByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getProcedureDetailInsByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getProcedureDetailInsByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getLabTestDetailByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getLabTestDetailByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getLabTestInsDetailByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getLabTestInsDetailByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}



	public RegistrationBean getConsultDetailByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getConsultDetailByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public RegistrationBean getConsultProcedureByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getConsultProcedureByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getConsultPlanProcedureByID(RegistrationBean regbean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getConsultPlanProcedureByID(regbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getConsultLabTestByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getConsultLabTestByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getConsultPlanLabTestByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getConsultPlanLabTestByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getConsultPlanDetailByID(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getConsultPlanDetailByID(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public RegistrationBean getMSRC(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getMSRC(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getConsultingCharges(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getConsultingCharges(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateDrconsult(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException {
		try {

			RegistrationBean oldBean = getConsultationDetailsByConsultId(rgistrationBean);

			eclinicDaoManager.startTransaction();
			if (rgistrationBean.getRefer_status() == null)
				rgistrationBean.setRefer_status("N");
			if (rgistrationBean.getPackage_status() == null)
				rgistrationBean.setPackage_status("N");
			if (rgistrationBean.getBilled_to() == null)
				rgistrationBean.setBilled_to("P");
			if (rgistrationBean.getInsurar_id() == null || rgistrationBean.getInsurar_id().equals(""))
				rgistrationBean.setInsurar_id("0");
			if(rgistrationBean.getRdoctor_id()!=null && rgistrationBean.getRdoctor_id().equals(""))
				rgistrationBean.setRdoctor_id(null);
			registrationDao.updateDrconsult(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			if(rgistrationBean.getRefer_status() != null && rgistrationBean.getRefer_status().equals("Y")) {
				oldBean.setRefer_status(rgistrationBean.getRefer_status());
				oldBean.setRefer_by(rgistrationBean.getRefer_by());
			}
				
			auditLogEntry(oldBean, request, "UPDATE", "Edited & Updated Patient Consultation/Visit Details From Billing/Registration", oldBean.getOp_number(),
					oldBean.getConsult_id(), "doctor_consult");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public List getAllSamples() throws DaoException 
	{

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllSamples();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}



	public RegistrationBean getTestDetailsById(RegistrationBean rgistrationBean) throws DaoException 
	{

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getTestDetailsById(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<RegistrationBean> getAllTestByLabNo(String sampleId ) throws DaoException 
	{

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllTestByLabNo(sampleId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public List<RegistrationBean> getAlltestinSampleId(RegistrationBean registrationBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAlltestinSampleId(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public String insertTestDetails(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{
		String testDetailsid = null;
		try {

			eclinicDaoManager.startTransaction();

			registrationDao.insertTestDetails(rgistrationBean);

			//rgistrationBean.setQuery("SELECT max(test_Detailsid) FROM test_details");
			parameterBean = new ParameterBean();
			parameterBean.setField_name("test_Detailsid");
			parameterBean.setTable_name("test_details");
			testDetailsid=commonDao.getCommonMaxValue(parameterBean);
			parameterBean=null;

			eclinicDaoManager.commitTransaction();

			auditLogEntry(rgistrationBean, request, "INSERT", "Added Test Details Entry on Sample Collection - Laboratory", rgistrationBean.getOp_number(),
					rgistrationBean.getConsult_id(), "test_details");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return testDetailsid;
	}


	public List<RegistrationBean> getAllTestofParticularPatient(RegistrationBean registrationBean) throws DaoException 
	{

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllTestofParticularPatient(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public String OpNumberStatusNoExists(String opNumber) throws DaoException 
	{

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.OpNumberStatusNoExists(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public void deleteLTR(String testDetailsid)throws DaoException 
	{

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.deleteLTR(testDetailsid);
			eclinicDaoManager.commitTransaction();

			// TODO

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void DeleteTestDetailsIn1(String testDetailsid)throws DaoException 
	{

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.DeleteTestDetailsIn1(testDetailsid);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List getAllsubtestdetails() throws DaoException 
	{

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllsubtestdetails();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public RegistrationBean getEditTestSetup(RegistrationBean registrationBean) throws DaoException 
	{

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getEditTestSetup(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public void insertTestResultsdetails(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			if(rgistrationBean.getIs_bold()==null)
				rgistrationBean.setIs_bold("N");
			registrationDao.insertTestResultsdetails(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			if(null != request) {
				auditLogEntry(rgistrationBean, request, "INSERT", "Added Test Results Details On Sample Collection - Laboratory/Radiology",
						rgistrationBean.getOp_number(), rgistrationBean.getConsult_id(), "test_results");
			}

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void UpdateTestStatus(String testDetailsid, HttpServletRequest request)throws DaoException {

		try {
			SetupBean oldBean = new SetupBean();
			oldBean.setTest_Detailsid(testDetailsid);
			oldBean=getTestDetailsByTestDtlsId(oldBean);

			eclinicDaoManager.startTransaction();
			registrationDao.UpdateTestStatus(testDetailsid);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Edited & Updated Test Status", oldBean.getOp_number(), oldBean.getConsult_id(), "test_details");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List getAllSubTests(String testDetailsid ) throws DaoException 
	{

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllSubTests(testDetailsid);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List getAllsubtestdetailsStatusYes() throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllsubtestdetailsStatusYes();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getEditSavedTestResult(String testDetailsid) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getEditSavedTestResult(testDetailsid);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public List getAllSubTestResultSaved(String testDetailsid ) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllSubTestResultSaved(testDetailsid);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void UpdatetestResult(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.UpdatetestResult(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(rgistrationBean, request, "UPDATE", "Updated Test Status", rgistrationBean.getOp_number(), rgistrationBean.getConsult_id(),
					"test_details");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public RegistrationBean getTestHeading(String testDetailsid) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getTestHeading(testDetailsid);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public List getTestResultForReport2(RegistrationBean registrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getTestResultForReport2(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<RegistrationBean> getTestResultForReport(RegistrationBean rgistrationBean) throws DaoException {

		List<RegistrationBean> samplelist = null;
		try {
			eclinicDaoManager.startTransaction();
			samplelist = registrationDao.getTestResultForReport(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return samplelist;
	}

	/* Unused Method */
	/*public void UpdateReportStatus(String testDetailsid) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.UpdateReportStatus(testDetailsid);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} */


	public List getAllTestCategoryName() throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllTestCategoryName();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}



	public RegistrationBean getEditTestCategorysetup(String categoryId) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getEditTestCategorysetup(categoryId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public void DeletetestCategorySetup(String categoryId, HttpServletRequest request)throws DaoException {

		try {
			RegistrationBean oldBean = getEditTestCategorysetup(categoryId);

			eclinicDaoManager.startTransaction();
			registrationDao.DeletetestCategorySetup(categoryId);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean) {
				auditLogEntry(oldBean, request, "DELETE", "Deleted Test Category "+oldBean.getCategoryName()+" from Master", null, null, "test_category");
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public String gettestCategoryNameIfExist(String name) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.gettestCategoryNameIfExist(name);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertTestCategory(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.insertTestCategory(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(rgistrationBean, request, "INSERT", "Added a Test Category "+rgistrationBean.getCategoryName()+" in Setup", null, null, "test_category");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void TestCategoryUpdate(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			RegistrationBean oldBean = getEditTestCategorysetup(rgistrationBean.getCategoryId());

			eclinicDaoManager.startTransaction();
			registrationDao.TestCategoryUpdate(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean) {
				auditLogEntry(oldBean, request, "UPDATE", "Edited & Updated Test Category "+rgistrationBean.getCategoryName()+" in Setup", null, null, "test_category");
			}
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 


	public RegistrationBean getEditTestSample(String categoryId) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getEditTestSample(categoryId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public void DeleteSamples(String categoryId, HttpServletRequest request)throws DaoException {

		try {
			RegistrationBean oldBean = getEditTestSample(categoryId);

			eclinicDaoManager.startTransaction();
			registrationDao.DeleteSamples(categoryId);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean) {
				auditLogEntry(oldBean, request, "DELETE", "Deleted a Test Sample Setup Entry", null, null, "test_sample_setup");
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public String getSampleNameifExists(String name) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getSampleNameifExists(name);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertTestSamples(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.insertTestSamples(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(rgistrationBean, request, "INSERT", "Added a Test Sample Setup Entry", null, null, "test_sample_setup");
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void samplesUpdate(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			RegistrationBean oldBean = getEditTestSample(rgistrationBean.getSampleId());

			eclinicDaoManager.startTransaction();
			registrationDao.samplesUpdate(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean) {
				auditLogEntry(oldBean, request, "INSERT", "Edited & Updated a Test Sample Setup Entry", null, null, "test_sample_setup");
			}

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public List<RegistrationBean> getAllTestsetupMaster(RegistrationBean registrationBean) throws DaoException {

		List<RegistrationBean> masterBean = null;
		try {
			eclinicDaoManager.startTransaction();
			masterBean = registrationDao.getAllTestsetupMaster(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return masterBean;
	}

	public RegistrationBean getTestSetupDetailsById(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean masterBean = null;
		try {
			eclinicDaoManager.startTransaction();
			masterBean = registrationDao.getTestSetupDetailsById(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return masterBean;
	}

	public List<RegistrationBean> getAllTestsetupByCrit(RegistrationBean rgistrationBean) throws DaoException {

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllTestsetupByCrit(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public List<HistoryPresentIllBean> getAllROSchildByPatient(HistoryPresentIllBean hopiBean) throws DaoException {

		List<HistoryPresentIllBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllROSchildByPatient(hopiBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<HistoryPresentIllBean> getAllROSheadByPatient(HistoryPresentIllBean hopiBean) throws DaoException {

		List<HistoryPresentIllBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllROSheadByPatient(hopiBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List getAllHOPIByPatient(HistoryPresentIllBean hopiBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllHOPIByPatient(hopiBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public String getTestNameExists(String tname) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getTestNameExists(tname);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public String insertTestSetup(RegistrationBean rgistrationBean) throws DaoException 
	{
		String testId = "";
		try 
		{       
			if(rgistrationBean.getGroup_name()==null)
				rgistrationBean.setGroup_name("N");
			eclinicDaoManager.startTransaction();
			registrationDao.insertTestSetup(rgistrationBean);
			testId = registrationDao.getLastInsertTestId();
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return testId;
	} 

	/*public String getLastInsertTestId() throws DaoException {

		String testId = null;
		try {
			eclinicDaoManager.startTransaction();
			testId = registrationDao.getLastInsertTestId();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return testId;
	}*/

	public void insertTestSetupOffice(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{       
			eclinicDaoManager.startTransaction();
			registrationDao.insertTestSetupOffice(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(rgistrationBean, request, "INSERT", "Added/Updated the Test to Office", null, null, "test_setup_office");
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 

	public void TestSetupUpdate(RegistrationBean rgistrationBean) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.TestSetupUpdate(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 
	public void TestSetupOfficeUpdate(RegistrationBean rgistrationBean) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.TestSetupOfficeUpdate(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 
	public void DeleteTestSetupMaster(RegistrationBean registrationBean)throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.DeleteTestSetupMaster(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void DeleteTestSetup(RegistrationBean registrationBean)throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.DeleteTestSetup(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public String getTestNameExistsinTestSubSetup(String ssname) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getTestNameExistsinTestSubSetup(ssname);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public String insertTestParameterSetup(RegistrationBean rgistrationBean) throws DaoException 
	{
		String stid=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			//rgistrationBean.setQuery("select max(parameter_id) from test_parameter_setup");
			parameterBean =new ParameterBean();
			parameterBean.setField_name("parameter_id");
			parameterBean.setTable_name("test_parameter_setup");
			registrationDao.insertTestParameterSetup(rgistrationBean);
			stid=commonDao.getCommonMaxValue(parameterBean);
			parameterBean =null;
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return stid;
	} 

	public void updateTestParameterSetup(RegistrationBean rgistrationBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.updateTestParameterSetup(rgistrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 

	public void deleteTestParameterSetup(String parameter_id)throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.deleteTestParameterSetup(parameter_id);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public RegistrationBean getTestParameterSetup(String parameter_id) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getTestParameterSetup(parameter_id);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List getAllTestParameterSetup(RegistrationBean registrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllTestParameterSetup(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList selectNormalValues(String testId) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.selectNormalValues(testId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public ArrayList defaultResultSets(String testId) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.defaultResultSets(testId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public List<RegistrationBean> selectSubsetupItems(RegistrationBean registrationBean) throws DaoException {

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.selectSubsetupItems(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertNormalValue(RegistrationBean rgistrationBean) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.insertNormalValue(rgistrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 

	public void updateNormalValue(RegistrationBean rgistrationBean) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.updateNormalValue(rgistrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 

	public void insertDefResult(RegistrationBean rgistrationBean) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.insertDefResult(rgistrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}


	public String isAlreadyExist(RegistrationBean rgistrationBean) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.isAlreadyExist(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public String isAlreadyExist(SetupBean sbean) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.isAlreadyExist(sbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	////Accountssssssssssssssssssss

	public ArrayList<PaymentBean> getDayBookDetails(AccountBean accountBean) throws DaoException {
		ArrayList<PaymentBean> list = null;
		try {
			// Handles cases where head_id is present but account_id(ie;parent_hierarchy) is not set in bean.
			AccountBean accBean = new AccountBean();
			if (null == accountBean.getAccount_id() || accountBean.getAccount_id().equals("")) {
				if (null != accountBean.getHead_id() && !accountBean.getHead_id().equals("")) {
					accBean.setOffice_id(accountBean.getOffice_id());
					accBean.setAccount_code(accountBean.getHead_id());
					accBean = getAccountHeadById(accBean);
					
					if (null != accBean && null != accBean.getAccount_id()) {
						accountBean.setAccount_id(accBean.getAccount_id());
					}
				}
			}
			
			eclinicDaoManager.startTransaction();
			list = (ArrayList<PaymentBean>) accountDao.getDayBookDetails(accountBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList<PaymentBean> getDayBookDetailsGrouped(AccountBean accountBean) throws DaoException 
	{
		ArrayList<PaymentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list = (ArrayList<PaymentBean>)accountDao.getDayBookDetailsGrouped(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AccountBean> getTrialBalanceReport(AccountBean accountBean) throws DaoException 
	{
		ArrayList<AccountBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AccountBean>)accountDao.getTrialBalanceReport(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList<AccountBean> getTrialBalanceReportGroupByHead(AccountBean accountBean) throws DaoException 
	{
		ArrayList<AccountBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AccountBean>)accountDao.getTrialBalanceReportGroupByHead(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList<AccountBean> getTrialBalanceReportWithOpening(AccountBean accountBean) throws DaoException 
	{
		ArrayList<AccountBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AccountBean>)accountDao.getTrialBalanceReportWithOpening(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList<AccountBean> getTrialBalanceReportWithOpeningGroupByHead(AccountBean accountBean) throws DaoException 
	{
		ArrayList<AccountBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AccountBean>)accountDao.getTrialBalanceReportWithOpeningGroupByHead(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllGrpsUnderPandL(AccountBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllGrpsUnderPandL(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllAccountHeads2Edit(AccountBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllAccountHeads2Edit(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllAccountChildsByParent(AccountBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllAccountChildsByParent(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList getAllAccountChildsByParentWithValues(AccountBean accountBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) accountDao.getAllAccountChildsByParentWithValues(accountBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllAccountChilds(AccountBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllAccountChilds(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllAccountHeads(AccountBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	

			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllAccountHeads(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllAccountHeadsWithValues(AccountBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	

			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllAccountHeadsWithValues(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertNextAccountYear(AccountBean accountBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			accountDao.insertNextAccountYear(accountBean);

			eclinicDaoManager.commitTransaction();
			auditLogEntry(accountBean, request, "INSERT", "Added Next Account Year", null, null, "acc_transaction");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 	

	public void deleteHead(AccountBean accountBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{    AccountBean oldbean=getAccountHeadById(accountBean);   	
		eclinicDaoManager.startTransaction();
		accountDao.deleteHead(accountBean);

		eclinicDaoManager.commitTransaction();
		if(oldbean!=null)
		{
			auditLogEntry(oldbean, request, "DELETE", "Deleted from Account Head", null, null, "account_head");
		}

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void deleteOpeningBalance(AccountBean accountBean,HttpServletRequest request, PaymentBean paymentBean) throws DaoException 
	{

		try 
		{ 


			PaymentBean oldbean=new PaymentBean();
			oldbean.setOffice_id(accountBean.getOffice_id());
			oldbean.setFinancial_year(accountBean.getFinancial_year());
			oldbean=getVoucherDetailsById(oldbean);
			eclinicDaoManager.startTransaction();
			accountDao.deleteOpeningBalance(accountBean);

			eclinicDaoManager.commitTransaction();
			if(oldbean!=null)
			{
				auditLogEntry(oldbean!=null, request, "DELETE", "Deleted Opening Balance ", null, null, "voucher_details");
			}

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void updateAccountHeadChild(AccountBean accountBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			accountDao.updateAccountHeadChild(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateAccountHead(AccountBean accountBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{    AccountBean oldbean=getAccountHeadById(accountBean);    	
		eclinicDaoManager.startTransaction();
		accountDao.updateAccountHead(accountBean);

		eclinicDaoManager.commitTransaction();
		if(oldbean!=null)
		{
			auditLogEntry(oldbean, request, "UPDATE", "Updated Account Head", null, null, "account_head");
		}

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 


	public void insertAccountChildHead(AccountBean accountBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			if(null != accountBean.getItem_status() && !accountBean.getItem_status().equals("OTHR")){
				accountBean.setCreate_status("S");
			} else {
				accountBean.setCreate_status("U");
			}
			accountDao.insertAccountChildHead(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public String insertAccountChild(AccountBean accountBean) throws DaoException 
	{
		String childid=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			accountDao.insertAccountChild(accountBean);
			childid=accountDao.getNewChildID();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return childid;
	} 




	public void insertDailyTransaction(AccountBean accountBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			accountDao.insertDailyTransaction(accountBean);

			eclinicDaoManager.commitTransaction();
			auditLogEntry(accountBean, request, "INSERT", "Inserted Daily Transaction", null, null, "daily_transaction");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void insertAccountHead(AccountBean accountBean,HttpServletRequest request) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			insertAccountHeadAndFlow(accountBean);
			eclinicDaoManager.commitTransaction();
			
			auditLogEntry(accountBean, request, "INSERT", "Inserted Account Head", null, null, "account_head");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 

	/**
	 * Code for insert account head and its hierarchy flow without transaction start and commit. 
	 * @param accountBean
	 * @throws DaoException
	 */
	public void insertAccountHeadAndFlow(AccountBean accountBean) throws DaoException {
		try {

			AccountBean parentBean = new AccountBean();
			parentBean.setOffice_id(accountBean.getOffice_id());
			parentBean.setAccount_code(accountBean.getAccount_parent());
			parentBean = accountDao.getAccountHeadById(parentBean);

			if (null != parentBean) {
				// Account head insert
				String parentId = parentBean.getAccount_id();
				accountBean.setHierarchy_level("" + (Integer.parseInt(parentBean.getHierarchy_level()) + 1));
				accountBean.setHierarchy_tree(parentBean.getHierarchy_tree() + "," + parentBean.getAccount_id());
				accountBean.setParent_hierarchy(parentBean.getAccount_id());

				if (null != accountBean.getItem_status() && !accountBean.getItem_status().equals("OTHR")) {
					accountBean.setCreate_status("S");
				} else {
					accountBean.setCreate_status("U");
				}
				accountDao.insertAccountHead(accountBean);

				accountBean = accountDao.getAccountHeadById(accountBean);
				String headId = "";
				if (null != accountBean && null != accountBean.getAccount_id()) {
					headId = accountBean.getAccount_id();
				}

				// Account hierarchy flow insert
				String hierarchytree = accountBean.getHierarchy_tree() + "," + headId;
				String ar[] = hierarchytree.split(",");
				for (int i = 0; i < ar.length; i++) {
					accountBean.setAbove_hierarchy(ar[i]);
					accountBean.setBelow_hierarchy(headId);

					if (parentId.equals(ar[i])) {
						accountBean.setDirect_under("Y");
					} else {
						accountBean.setDirect_under("N");
					}
					accountDao.insertAccountHeadHierarchyFlow(accountBean);
				}
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public AccountBean getAccountHeadByFunction(AccountBean accountBean) throws DaoException 
	{
		AccountBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getAccountHeadByFunction(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 


	public AccountBean getAccountChildById(AccountBean accountBean) throws DaoException 
	{
		AccountBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getAccountChildById(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 


	public AccountBean getAccountHeadById(AccountBean accountBean) throws DaoException 
	{
		AccountBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getAccountHeadById(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 


	public String isAlreadyExists(AccountBean accountBean) throws DaoException 
	{
		String list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.isAlreadyExists(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 

	public String getNextAccountYear(AccountBean accountBean) throws DaoException 
	{
		String list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getNextAccountYear(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 

	public String getAccountAmountByCode(AccountBean accountBean) throws DaoException 
	{
		String list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getAccountAmountByCode(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 

	public String getLinkIdByName(AccountBean accountBean) throws DaoException 
	{
		String list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getLinkIdByName(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 



	public String getAccountAmountFrmVoucher(AccountBean accountBean) throws DaoException 
	{
		String list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getAccountAmountFrmVoucher(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 

	public String getAccountAmount(AccountBean accountBean) throws DaoException 
	{
		String list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getAccountAmount(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 


	public ArrayList getAllPendingTransactionDays(AccountBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getAllPendingTransactionDays(accountBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 

	public ArrayList getDeptWiseLedger(AccountBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getDeptWiseLedger(accountBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 


	public String getAccountIdByInventId(AccountBean accountBean) throws DaoException 
	{
		String list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getAccountIdByInventId(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 

	public String getAccountSlNoById(AccountBean accountBean) throws DaoException 
	{
		String list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getAccountSlNoById(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	//accountsssssssssssssssssssssssssss


	//payment



	public void updateVoucherOpnBalance(PaymentBean paymentBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			paymentDao.updateVoucherOpnBalance(paymentBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(paymentBean, request, "UPDATE", "Updated Voucher Opening Balance", null, null, "voucher_details");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateVoucherDetails(PaymentBean paymentBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();

			paymentDao.updateVoucherDetails(paymentBean);

			eclinicDaoManager.commitTransaction();

			//Audit Log for updating Voucher is  Details written on Payment Action.

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public void insertVoucherDetails(PaymentBean paymentBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			if(paymentBean.getOpening()!=null)
			{

			}
			else
			{
				paymentBean.setOpening("N");
			}

			paymentBean.setNewentry("Y");

			paymentDao.insertVoucherDetails(paymentBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}


	public void updatePayment(PaymentBean paymentBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			paymentDao.updatePayment(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public String getMaxLinkNo(PaymentBean paymentBean) throws DaoException 
	{
		String list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=paymentDao.getMaxLinkNo(paymentBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 

	public String insertPayment(PaymentBean paymentBean) throws DaoException 
	{
		String payid=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			paymentDao.insertPayment(paymentBean);
			payid=paymentDao.getLastPaymentId();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return payid;

	}


	public ArrayList getPaymentWiseInvoices(String id) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)paymentDao.getPaymentWiseInvoices(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}
	public ArrayList<SetupBean> getPaymentWiseInv4ReferClinic(String id) throws DaoException  {
		ArrayList<SetupBean> list=null;
		try	{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)paymentDao.getPaymentWiseInv4ReferClinic(id);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public PaymentBean getPaymentById(String id) throws DaoException 
	{
		PaymentBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(PaymentBean)paymentDao.getPaymentById(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public ArrayList getAllPaymentList4Display(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)paymentDao.getAllPaymentList4Display(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public ArrayList getAllPaymentList(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)paymentDao.getAllPaymentList(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}


	public ArrayList getAllReceivedReceipts(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)paymentDao.getAllReceivedReceipts(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}


	public PaymentBean checkReceivedCheque(PaymentBean paymentBean) throws DaoException 
	{
		PaymentBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(PaymentBean)paymentDao.checkReceivedCheque(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public PaymentBean checkIssuedCheque(PaymentBean paymentBean) throws DaoException 
	{
		PaymentBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(PaymentBean)paymentDao.checkIssuedCheque(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public ArrayList getAllIssuedPayments(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)paymentDao.getAllIssuedPayments(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}


	public ArrayList getAllVoucherDetailsSearch(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)paymentDao.getAllVoucherDetailsSearch(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public ArrayList<PaymentBean> getAllVoucherDetails(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList<PaymentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList<PaymentBean>)paymentDao.getAllVoucherDetails(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}


	public void deletePaymentDetails(String id) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			paymentDao.deletePaymentDetails(id);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deletePayment(String id) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			paymentDao.deletePayment(id);
			eclinicDaoManager.commitTransaction();

			/* Audit Log in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void deleteVoucherDetailsByLNO(String id) throws DaoException 
	{

		try 
		{   	
			eclinicDaoManager.startTransaction();
			paymentDao.deleteVoucherDetailsByLNO(id);
			eclinicDaoManager.commitTransaction();

			//auditLogEntry(oldBean, request, "DELETED", "Deleted Voucher Details By LNo", null,null,"voucher_details");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteVoucherDetailsByEID(String id) throws DaoException 
	{

		try 
		{  
			eclinicDaoManager.startTransaction();
			paymentDao.deleteVoucherDetailsByEID(id);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteVoucherDetails(String id) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			paymentDao.deleteVoucherDetails(id);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateBouncedStatus(PaymentBean paymentBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			paymentDao.updateBouncedStatus(paymentBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public String insertPaymentDetails(PaymentBean paymentBean,HttpServletRequest request) throws DaoException 
	{
		String id=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			paymentDao.insertPaymentDetails(paymentBean);
			id=paymentDao.getLastPDID();
			eclinicDaoManager.commitTransaction();
			auditLogEntry(paymentBean, request, "INSERT", "Added Payment Details", null, null, "payment_details");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return id;
	}

	//payment

	//Receipt


	public void updateRSClaimReconcil(PaymentBean paymentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{    PaymentBean oldBean=getClaimReconcileById(paymentBean);    	     	
		eclinicDaoManager.startTransaction();
		receiptDao.updateRSClaimReconcil(paymentBean);

		eclinicDaoManager.commitTransaction();
		auditLogEntry(oldBean, request, "UPDATE", "Reconciliation Done for Claim Resubmission." , null, null, "claim_generated");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public void updateClaimReconcil(PaymentBean paymentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{   PaymentBean oldBean=getClaimReconcileById(paymentBean);    	
		eclinicDaoManager.startTransaction();
		receiptDao.updateClaimReconcil(paymentBean);

		eclinicDaoManager.commitTransaction();
		auditLogEntry(oldBean, request, "UPDATE", "Reconciliation Done for Claim Submission" , null, null, "claim_generated");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public ArrayList<OfficeLetterHeadBean> getOfficeDetails(OfficeLetterHeadBean offBean)
			throws DaoException {
		ArrayList<OfficeLetterHeadBean> lst = null;
		try {
			eclinicDaoManager.startTransaction();
			lst = (ArrayList<OfficeLetterHeadBean>)setupDao.getOfficeDetails(offBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lst;

	}
	public OfficeLetterHeadBean getMailSetupsById(OfficeLetterHeadBean officeBean) throws DaoException{

		OfficeLetterHeadBean offBean = null;
		try {
			eclinicDaoManager.startTransaction();
			offBean = setupDao.getMailSetupsById(officeBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return offBean;
	}

	public OfficeLetterHeadBean getMaildetailsByFns(OfficeLetterHeadBean officeBean) throws DaoException{

		OfficeLetterHeadBean offBean = null;
		try {
			eclinicDaoManager.startTransaction();
			offBean = setupDao.getMaildetailsByFns(officeBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return offBean;	
	}


	public String insertMailDetails(RegistrationBean registrationBean)
			throws DaoException {
		String pid = null;
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertMailDetails(registrationBean);
			//		pid = registrationDao.getLastInsertMailDetail();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return pid;
	}
	public ArrayList getAllMailSetups(OfficeLetterHeadBean officeBean) throws DaoException{

		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllMailSetups(officeBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getMailFunctions(OfficeLetterHeadBean officeBean) throws DaoException{

		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getMailFunctions(officeBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllMailFunctions(OfficeLetterHeadBean officeBean) throws DaoException{

		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllMailFunctions(officeBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertMailSetupDetails(OfficeLetterHeadBean offBean, HttpServletRequest request)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertMailSetupDetails(offBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(offBean, request, "INSERT", "Added E-Mail Details of Office", null, null, "mail_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void updateMailSetupDetails(OfficeLetterHeadBean offBean, HttpServletRequest request)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.updateMailSetupDetails(offBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(offBean, request, "UPDATE", "Edited & Updated E-Mail Details of Office", null, null, "mail_setup");


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateReceiptEdit(PaymentBean paymentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{   //PaymentBean oldBean=getReceiptEditById(paymentBean);
		eclinicDaoManager.startTransaction();
		receiptDao.updateReceiptEdit(paymentBean);

		eclinicDaoManager.commitTransaction();
		auditLogEntry(paymentBean, request, "UPDATE", "Updated Receipt " , null, null, "receipts");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	// method commented in ReceiptAction.java
	/*public void updateReceipt(PaymentBean paymentBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			receiptDao.updateReceipt(paymentBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}*/

	public String insertReceipt(PaymentBean paymentBean,HttpServletRequest request) throws DaoException 
	{
		String payid=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			receiptDao.insertReceipt(paymentBean);
			payid=receiptDao.getLastReceiptId();
			eclinicDaoManager.commitTransaction();

			if(null != request)
				auditLogEntry(paymentBean, request, "INSERT", "Created A Receipt - " + paymentBean.getNarration(), null, null, "receipts");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return payid;

	}

	public void deleteReceiptDetails(String id) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			receiptDao.deleteReceiptDetails(id);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action*/

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public void deleteReceipt(String id,HttpServletRequest request) throws DaoException 
	{

		try 
		{   PaymentBean oldBean=getReceiptById(id);  	
		eclinicDaoManager.startTransaction();

		receiptDao.deleteReceipt(id);
		eclinicDaoManager.commitTransaction();
		auditLogEntry(oldBean, request, "DELETED", "Deleted Receipt", null,null,"receipts");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public PaymentBean getReceiptById(String id) throws DaoException 
	{
		PaymentBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(PaymentBean)receiptDao.getReceiptById(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public ArrayList<PurchaseBean> getReceiptWiseInvoices(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList<PurchaseBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<PurchaseBean>)receiptDao.getReceiptWiseInvoices(paymentBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<PurchaseBean> getReceiptWisePharmacyInvoices(String id) throws DaoException 
	{
		ArrayList<PurchaseBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<PurchaseBean>)receiptDao.getReceiptWisePharmacyInvoices(id);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<PaymentBean> getAllReceiptList(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList<PaymentBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<PaymentBean>)receiptDao.getAllReceiptList(paymentBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getInsRevenueReport(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();

			list = (ArrayList) receiptDao.getInsRevenueReport(paymentBean);
			eclinicDaoManager.commitTransaction();

		}
		catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getInsRevenueReportWithSub(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();

			list = (ArrayList) receiptDao.getInsRevenueReportWithsub(paymentBean);
			eclinicDaoManager.commitTransaction();

		}
		catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllReceiptList4Display(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)receiptDao.getAllReceiptList4Display(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public void insertReceiptDetails(PaymentBean paymentBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			receiptDao.insertReceiptDetails(paymentBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		//audit log given in   action

	}



	public List getServiceWiseIncome(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getServiceWiseIncome(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getAllServiceDiscount(RegistrationBean rgistrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			rgistrationBean = registrationDao.getAllServiceDiscount(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return rgistrationBean;
	}


	public ArrayList getAllRejectReasons() throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getAllRejectReasons();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertReconciliationData(SetupBean setupBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertReconciliationData(setupBean);
			eclinicDaoManager.commitTransaction();

			//auditLogEntry(setupBean, request, "INSERT", "Uploaded Insurance Remittance XML File ( "+setupBean.getFile_name() +" )", null, null, "reconciliation_data");


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllReconciliationUploadData(SetupBean setupBean) throws DaoException 
	{
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllReconciliationUploadData(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllReconciliationUploadDataByInvoice(SetupBean setupBean) throws DaoException 
	{
		ArrayList list = null;
		if(setupBean.getPharm_flag()!=null && setupBean.getPharm_flag().equals("Y")){			
			setupBean.setTablename("claim_generated_pharm");
		}else{
			setupBean.setTablename("claim_generated");
		}
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllReconciliationUploadDataByInvoice(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void updateReconciliationUploadData(SetupBean setupBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			setupDao.updateReconciliationUploadData(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != request)
				auditLogEntry(setupBean, request, "UPDATE", "Same Remittance XML File( "+setupBean.getFile_name() +" ) Already Uploaded. Hence Updated the Details.", null, null, "reconciliation_data");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public String getDuplicateOfUploadFile(SetupBean setupBean) throws DaoException {
		String desc = null;
		try {
			eclinicDaoManager.startTransaction();
			desc = setupDao.getDuplicateOfUploadFile(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return desc;
	}

	public ArrayList getAllReceiptList4Report(PaymentBean paymentBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();

			list = (ArrayList) receiptDao.getAllReceiptList4Report(paymentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
		}
		return list;
	}


	public void insertEclaimRemittance(InsuranceBean irBean) throws DaoException{
		//ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();		
			insuranceDao.insertEclaimRemittance(irBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public ArrayList<InsuranceBean> getAllOverdueInsur(InsuranceBean irBean) throws DaoException{
		ArrayList<InsuranceBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();		
			list=(ArrayList<InsuranceBean>)insuranceDao.getAllInsurOverdues(irBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public ArrayList getAllSummaryInsAmount(InsuranceBean irBean) throws DaoException{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();		
			list=(ArrayList)insuranceDao.getAllSummaryInsAmount(irBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getForReconciliation(InsuranceBean irBean) throws DaoException{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();		
			list=(ArrayList)insuranceDao.getForReconciliation(irBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/*=======================================================================*/
	/* ================== START ---Dashboard For Kamkar ===================== */

	public List<DashboardBean> getNoOfPatientsPerPhysician(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dbList=new ArrayList<DashboardBean>();
		try {
			eclinicDaoManager.startTransaction();
			dbList=dashboardDao.fetchNoOfPatientsPerPhysician(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dbList;
	}

	public List<DashboardBean> getNoOfInsuredPatientsPerPhysician(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dbList=new ArrayList<DashboardBean>();
		try {
			eclinicDaoManager.startTransaction();
			dbList=dashboardDao.fetchNoOfInsuredPatientsPerPhysician(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dbList;
	}

	public List<DashboardBean> getTotalRevenuePerDept(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dbList=new ArrayList<DashboardBean>();
		try {
			eclinicDaoManager.startTransaction();
			dbList=dashboardDao.fetchTotalRevenuePerDept(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dbList;
	}

	public List<DashboardBean> getCashCardRevenuePerDept(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dbList=new ArrayList<DashboardBean>();
		try {
			eclinicDaoManager.startTransaction();
			dbList=dashboardDao.fetchCashCardRevenuePerDept(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dbList;
	}

	/*public List<DashboardBean> getCardRevenuePerDept(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dbList=new ArrayList<DashboardBean>();
		try {
			eclinicDaoManager.startTransaction();
			dbList=dashboardDao.fetchCardRevenuePerDept(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dbList;
	}*/

	public List<DashboardBean> getTotalRevenuePerPhysician(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dbList=new ArrayList<DashboardBean>();
		try {
			eclinicDaoManager.startTransaction();
			dbList=dashboardDao.fetchTotalRevenuePerPhysician(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dbList;
	}

	public List<DashboardBean> getCashCardRevenuePerPhysician(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dbList=new ArrayList<DashboardBean>();
		try {
			eclinicDaoManager.startTransaction();
			dbList=dashboardDao.fetchCashCardRevenuePerPhysician(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dbList;
	}

	public List<DashboardBean> getReferalCount(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dbList=new ArrayList<DashboardBean>();
		try {
			eclinicDaoManager.startTransaction();
			dbList=dashboardDao.fetchReferalCount(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dbList;
	}

	public List<DashboardBean> getRefPatientsPerPhysician(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dbList=new ArrayList<DashboardBean>();
		try {
			eclinicDaoManager.startTransaction();
			dbList=dashboardDao.fetchRefPatientsPerPhysician(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dbList;
	}

	public List<DashboardBean> getInsuranceWiseRevenue(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dbList=new ArrayList<DashboardBean>();
		try {
			eclinicDaoManager.startTransaction();
			dbList=dashboardDao.fetchInsuranceWiseRevenue(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dbList;
	}

	public List<String> getAllReferalDoctors() throws DaoException {
		List<String> refDoctors=new ArrayList<String>();
		try {
			eclinicDaoManager.startTransaction();
			refDoctors=dashboardDao.fetchAllReferalDoctors();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return refDoctors;
	}

	public List<String> getAllDoctorNames() throws DaoException {
		List<String> doctrs=new ArrayList<String>();
		try {
			eclinicDaoManager.startTransaction();
			doctrs=dashboardDao.fetchAllDoctorNames();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return doctrs;
	}

	/* ================== END ---Dashboard For Kamkar ===================== */
	/*=======================================================================*/

	public void deleteDiagrams(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException {

		try {
			RegistrationBean oldBean=getDiagramsById(registrationBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteDiagrams(registrationBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted Diagnosis Diagram", oldBean.getOp_number(), oldBean.getConsult_id(), "diagnosis_diagram");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	/*========END --- BODY DIAGRAM & MOTION DIAGRAM - IMAGE EDITOR========*/

	/* =============== START --- Insurance Network Wise Price========== */
	public ArrayList getAllProcedureList4InsNet(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllProcedureList4InsNet(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getAllConsult4InsNet(SetupBean setupBean) throws DaoException{
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllConsult4InsNet(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertConsult4InsNet(SetupBean setupBean,HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertConsult4InsNet(setupBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(setupBean, request, "INSERT", "Added Doctor Fee For Insurance Network", null, null, "consult_insurar_net");


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertProcedure4InsNet(SetupBean setupBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertProcedure4InsNet(setupBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public RegistrationBean getProcedureDetailInsByNetwork(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getProcedureDetailInsByNetwork(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getLabTestInsDetailByNetwork(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getLabTestInsDetailByNetwork(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public SetupBean getInsurarConsultByNetwork(SetupBean setupBean) throws DaoException {
		SetupBean setupBean1 = null;
		try {
			eclinicDaoManager.startTransaction();
			setupBean1 = setupDao.getInsurarConsultByNetwork(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean1;
	}

	/* =============== END --- Insurance Network Wise Price========== */

	public ArrayList getAllLabSubTestList(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllLabSubTestList(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabTestPendingPriceList(SetupBean setupbean)
			throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao
					.getAllLabTestPendingPriceList(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public String getNetReceiptAmtCard(String consid) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getNetReceiptAmtCard(consid);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList getAllFindSources() throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getAllFindSources();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	/***Finance****/
	public ArrayList  getVoucherDetailsByEid(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)paymentDao.getVoucherDetailsByEid(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}
	public ArrayList  getAllAccountsbyCode(AccountBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllAccountsbyCode(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList  getAllParentsByChildName(AccountBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllParentsByChildName(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void updateCostPriceConsultProcedure(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {

			eclinicDaoManager.startTransaction();
			registrationDao.updateCostPriceConsultProcedure(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "UPDATE", "Updated Cost Price Of Procedure/Treatment", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "cost_price");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deleteChild(AccountBean accountBean) throws DaoException{
		try{        	
			eclinicDaoManager.startTransaction();
			accountDao.deleteHeadChild(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 

	public ArrayList getInsuranceAmountForAccounts(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getInsuranceAmountForAccounts(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList returnListofValues(AccountBean accountBean) throws DaoException {	    
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList)accountDao.returnListofValues(accountBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getBaseVoucherDetailsSearch(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)paymentDao.getBaseVoucherDetailsSearch(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}
	public ArrayList getDetailsRemarksVoucher(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)paymentDao.getDetailsVoucher(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public void updateDelStatusByEID(String id) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			paymentDao.updateDelStatusByEID(id);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public ArrayList getAllUserReportsOnType(UserBean usebean) throws DaoException 
	{
		ArrayList userDetails=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			userDetails=loginDao.getAllUserReportsOnType(usebean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	}

	public ArrayList getCSRemarks(PaymentBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getCSRemarks(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}public ArrayList getCSAccounts(PaymentBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getCSAccounts(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getVouhcerNoByChildId(AccountBean aBean) throws DaoException {
		ArrayList voucherDetails=null;
		try {
			eclinicDaoManager.startTransaction();
			voucherDetails = (ArrayList)accountDao.getVouhcerNoByChildId(aBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return voucherDetails;
	}

	/***Finance****/
	// Methods Not used
	/*public void deleteRateMasterById(SetupBean setbean) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.deleteRateMasterById(setbean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void deleteRateDeatilsByMasterId(SetupBean setbean) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.deleteRateDeatilsByMasterId(setbean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void insertDoctorRatesWithId(SetupBean setBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertDoctorRatesWithId(setBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setBean, request, "INSERT", "Added Rate Details of Doctor", null, null, "rate_master");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {  ignore 
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}*/
	public void updateActiveStatus(SetupBean setBean) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			accountDao.updateActiveStatus(setBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList getDoctors4Sal(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getDoctors4Sal(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllCommProcessed(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllCommProcessed(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllCommProcessedMonths(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllCommProcessedMonths(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllCommProcessedDepartments(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllCommProcessedDepartments(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} public ArrayList getAllLabDetailsByDoctorId(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllLabDetailsByDoctorId(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public RegistrationBean getDietHistoryById(String serialId) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getDietHistoryById(serialId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getDevelopmentHistoryById(String serialId) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getDevelopmentHistoryById(serialId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<RegistrationBean> getAllDailyTransactionDetails(RegistrationBean rgistrationBean) throws DaoException {

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllDailyTransactionDetails(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public List getAllDailyTransactionDetails4RefDoc(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllDailyTransactionDetails4RefDoc(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	/*******Kamkar DTR Report Format ********/
	public List getAllDailyTransactionDetailsForKamkar(RegistrationBean registrationBean) throws DaoException{
		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllDailyTransactionDetailsForKamkar(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List getAllCreditDebitNotesDoctors(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllCreditDebitNotesDoctors(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List getAllCreditDebitNotesInsurars(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllCreditDebitNotesInsurars(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertPaymentReference(SetupBean setupBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertPaymentReference(setupBean);
			eclinicDaoManager.commitTransaction();

			/*auditLogEntry(setupBean, request, "INSERT", "Added Payment Reference Upon Claim Reconciliation.", setupBean.getOp_number(),
					setupBean.getConsult_id(), "payment_reference");*/
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public ArrayList<SetupBean> getPaymentReferenceByInsId(SetupBean setupBean)
			throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) setupDao.getPaymentReferenceByInsId(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public PaymentBean getReceiptWiseInvoicesByClaimId(PaymentBean paymentBean) throws DaoException 
	{
		PaymentBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (PaymentBean) receiptDao.getReceiptWiseInvoicesByClaimId(paymentBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public PaymentBean getReceiptWisePharmacyInvoicesByClaimId(PaymentBean paymentBean) throws DaoException 
	{
		PaymentBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (PaymentBean) receiptDao.getReceiptWisePharmacyInvoicesByClaimId(paymentBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	/**** E&M SERVICES @ START *********/

	public void deleteHOPI(HistoryPresentIllBean historyPresentIllBean, HttpServletRequest request) throws DaoException {
		try {
			HistoryPresentIllBean oldBean = getHOPIById(historyPresentIllBean);

			eclinicDaoManager.startTransaction();
			consultationDao.deleteHOPI(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "DELETE", "Deleted a HOPI entry.", oldBean.getOp_number(),
					oldBean.getConsult_id(), "history_presentill");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getPatientPastDiseases(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getPatientPastDiseases(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/**
	 * 
	 * Method to delete patient Medical OR Surgical history
	 * 
	 * @param hopiBean
	 * @throws DaoException
	 */
	public void deletePatientMSH(HistoryPresentIllBean hopiBean, HttpServletRequest request) throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			consultationDao.deletePatientMSH(hopiBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(hopiBean, request, "DELETE", "Deleted Medical/ Surgical/ Social/ Family history Of Patient", hopiBean.getOp_number(),
					hopiBean.getConsult_id(), hopiBean.getTablename());


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void updateConsultProc(RegistrationBean registrationBean, HttpServletRequest request)throws DaoException
	{
		UserBean userBean=new UserBean();
		if(request.getAttribute("userDetails")!=null){
			userBean=(UserBean)request.getAttribute("userDetails");
		}
		double vat_amount = 0.00;
		if(registrationBean.getVat_percent()!=null && Double.parseDouble(registrationBean.getVat_percent())>0)
		{
			double vat_percent = Double.parseDouble(registrationBean.getVat_percent());					
			double patient_share = 0.0;
			if (registrationBean.getDeductible() != null && Double.parseDouble(registrationBean.getDeductible())>0)
				patient_share = Double.parseDouble(registrationBean.getDeductible());
			if (registrationBean.getCopay_amt() != null && Double.parseDouble(registrationBean.getCopay_amt())>0)
				patient_share = patient_share + Double.parseDouble(registrationBean.getCopay_amt());
			if(patient_share>0){
				vat_amount = (patient_share * vat_percent)/100;
			}
		}
		registrationBean.setVat_amount(""+vat_amount);
		try {
			eclinicDaoManager.startTransaction();
			
			/*** Check if VAT is applicable for Locals***/
			if(userBean.getVat_for_locals()!=null && userBean.getVat_for_locals().equals("N"))
			{
			RegistrationBean countryBean = new RegistrationBean();
			countryBean = registrationDao.getPatientCountryDetails(registrationBean);
			countryBean.setCountry_id(userBean.getDef_country());
			businessLogic.checkVATApplicableForLocal(countryBean,registrationBean);
			}
			/*** Check if VAT is applicable for Locals***/
			
			registrationDao.updateConsultProc(registrationBean);
			eclinicDaoManager.commitTransaction();
			//registrationBean.setUser_id(registrationBean.getEnteredby());
			auditLogEntry(registrationBean, request, "UPDATE", "Edited & Updated a Procedure/Treatment from Billing", registrationBean.getOp_number(),registrationBean.getConsult_id(),registrationBean.getTablename());

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void updateConsultLab(RegistrationBean registrationBean, HttpServletRequest request)throws DaoException
	{
		try {
			UserBean userBean=new UserBean();
			if(request.getAttribute("userDetails")!=null){
				userBean=(UserBean)request.getAttribute("userDetails");
			}
			double vat_amount = 0.00;
			if(registrationBean.getVat_percent()!=null && Double.parseDouble(registrationBean.getVat_percent())>0)
			{
				double vat_percent = Double.parseDouble(registrationBean.getVat_percent());					
				double patient_share = 0.0;
				if (registrationBean.getDeductible() != null && Double.parseDouble(registrationBean.getDeductible())>0)
					patient_share = Double.parseDouble(registrationBean.getDeductible());
				if (registrationBean.getCopay_amt() != null && Double.parseDouble(registrationBean.getCopay_amt())>0)
					patient_share = patient_share + Double.parseDouble(registrationBean.getCopay_amt());
				if(patient_share>0){
					vat_amount = (patient_share * vat_percent)/100;
				}
			}
			registrationBean.setVat_amount(""+vat_amount);
			
			eclinicDaoManager.startTransaction();
			
			/*** Check if VAT is applicable for Locals***/
			if(userBean.getVat_for_locals()!=null && userBean.getVat_for_locals().equals("N"))
			{
			RegistrationBean countryBean = new RegistrationBean();
			countryBean = registrationDao.getPatientCountryDetails(registrationBean);
			countryBean.setCountry_id(userBean.getDef_country());
			businessLogic.checkVATApplicableForLocal(countryBean,registrationBean);
			}
			/*** Check if VAT is applicable for Locals***/
			
			registrationDao.updateConsultLab(registrationBean);
			eclinicDaoManager.commitTransaction();
			//registrationBean.setUser_id(registrationBean.getEnteredby());
			auditLogEntry(registrationBean, request, "UPDATE", "Edited & Updated an Investigation from Billing", registrationBean.getOp_number(),registrationBean.getConsult_id(),registrationBean.getTablename());

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}



	public ArrayList getAllSocialHistory(HistoryPresentIllBean hpiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllSocialHistory(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getPatientSocialHistory(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getPatientSocialHistory(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertPatientSocialHistory(HistoryPresentIllBean hopiBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertPatientSocialHistory(hopiBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(hopiBean, request, "INSERT", "Added Social history Of the Patient from Doctor Workbench", hopiBean.getOp_number(),
					hopiBean.getConsult_id(), "patient_soh");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public HistoryPresentIllBean getDiseaseByName(HistoryPresentIllBean hopiBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			hopiBean=consultationDao.getDiseaseByName(hopiBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return hopiBean;
	}


	public ArrayList getAllHistoryOfCheifComp(HistoryPresentIllBean hpiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllHistoryOfCheifComp(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllExamHeads(HistoryPresentIllBean hpiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllExamHeads(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getExamChilds(HistoryPresentIllBean hpiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getExamChilds(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public String insertPatientExamChilds(HistoryPresentIllBean hopiBean) throws DaoException {
		String last_id = "";
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertPatientExamChilds(hopiBean);
			last_id = consultationDao.getLastInsertPatientExamId();
			eclinicDaoManager.commitTransaction();

			/* audit log given in action */
			/*auditLogEntry(hopiBean, request, "INSERT", "Added Clinical Examination Childs Of Patient from Doctor Workbench", hopiBean.getOp_number(),
					hopiBean.getConsult_id(), "patient_examchild");*/
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return last_id;
	}
	public String getExamChildNextEntryId(HistoryPresentIllBean hpiBean) throws DaoException {
		String entry_id = null;
		try {
			eclinicDaoManager.startTransaction();
			entry_id = (String) consultationDao.getExamChildNextEntryId(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return entry_id;
	}
	public ArrayList getPatientExaminations(HistoryPresentIllBean hpiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getPatientExaminations(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public HistoryPresentIllBean getPatientExaminationById(HistoryPresentIllBean hpiBean) throws DaoException {
		HistoryPresentIllBean examBean = null;
		try {
			eclinicDaoManager.startTransaction();
			examBean = (HistoryPresentIllBean) consultationDao.getPatientExaminationById(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return examBean;
	}
	public ArrayList getPatientExamHeads(HistoryPresentIllBean hpiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getPatientExamHeads(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public void deletePatientExamChilds(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.deletePatientExamChilds(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

			/* audit log given in action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updatePatientExamChilds(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updatePatientExamChilds(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

			/* audit log given in action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void saveVitalSigns(List<VitalSignsBean> vitalList) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			//consultationDao.deleteVitalSigns(registrationBean);
			consultationDao.saveVitalSigns(vitalList);
			eclinicDaoManager.commitTransaction();

			/* audit log given in action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List<VitalSignsBean> getVitalSigns(VitalSignsBean vitalSignsBean) throws DaoException {
		List<VitalSignsBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (List<VitalSignsBean>) consultationDao.getVitalSigns(vitalSignsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getAllPreviousDiagnosis(RegistrationBean registrationBean) throws DaoException {
		List list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (List)consultationDao.getAllPreviousDiagnosis(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}	

	public void deleteROSChild(HistoryPresentIllBean hopi) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.deleteROSChild(hopi);
			eclinicDaoManager.commitTransaction();

			/* audit log given in action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List getExaminationCount(HistoryPresentIllBean hpiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getExaminationCount(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public RegistrationBean getProcedureDetailByCode(RegistrationBean registrationBean) throws DaoException {
		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getProcedureDetailByCode(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateDoctorConsult(RegistrationBean registrationBean, String updateSection) throws DaoException {
		try {
			/* Audit Log Given in Action. Only called for saveErxtabDetails */
			eclinicDaoManager.startTransaction();
			consultationDao.updateDoctorConsult(registrationBean,updateSection);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public synchronized void insertConsult4EachSpeciality(ConsultationBean consBean, HttpServletRequest request) throws DaoException{
		try {
			String logRemrks ="";
			String tableNm="";

			eclinicDaoManager.startTransaction();
			ConsultationBean oldBean = new ConsultationBean();
			if (null != consBean) {
				oldBean = consultationDao.getConsult4EachSpeciality(consBean);

				if (null != oldBean && null != oldBean.getId() && oldBean.getId() != "") {
					consBean.setId(oldBean.getId());
					consultationDao.updateConsult4EachSpeciality(consBean);

				} else {
					consultationDao.insertConsult4EachSpeciality(consBean);
					logRemrks ="INSERT";
				}
			}
			eclinicDaoManager.commitTransaction();

			/** For Audit Log START**/
			if (null != consBean && consBean.getSpeciality().equalsIgnoreCase("cardio")) {
				tableNm = "consult_cardio";

			} else if (consBean.getSpeciality().equalsIgnoreCase("gyn")) {
				tableNm = "consult_gyn";

			} else if (consBean.getSpeciality().equalsIgnoreCase("diet")) {
				tableNm = "consult_diet";

			} else if (consBean.getSpeciality().equalsIgnoreCase("physio")) {
				tableNm = "consult_physio";

			} else if (consBean.getSpeciality().equalsIgnoreCase("physio_soap")) {
				tableNm = "consult_physio";

			} else if (consBean.getSpeciality().equalsIgnoreCase("physio_session")) {
				tableNm = "consult_physio";

			} else if (consBean.getSpeciality().equalsIgnoreCase("ucaf")) {
				tableNm = "consult_ucaf";
			}
			else if (consBean.getSpeciality().equalsIgnoreCase("significantsigns")) {
				tableNm = "consult_ucaf";
			}

			if (logRemrks.equals("INSERT")) {
				auditLogEntry(consBean, request, logRemrks, "Added " + consBean.getSpeciality() + " details in Casesheet.", consBean.getOp_number(),
						consBean.getConsult_id(), tableNm);

			} else {
				auditLogEntry(oldBean, request, logRemrks, "Updated " + consBean.getSpeciality() + " details in Casesheet.", consBean.getOp_number(),
						consBean.getConsult_id(), tableNm);
			}
			/** For Audit Log END**/

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ConsultationBean getConsult4EachSpeciality(ConsultationBean consBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			consBean = consultationDao.getConsult4EachSpeciality(consBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return consBean;
	}

	public RegistrationBean getConsultationDetailsByConsultId(RegistrationBean registrationBean) throws DaoException {
		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getConsultationDetailsByConsultId(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public String getModifiedDates(SetupBean setupBean) throws DaoException {
		String list = null;
		try {
			eclinicDaoManager.startTransaction();

			list = setupDao.getModifiedDates(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<HistoryPresentIllBean> getPatientHistory(HistoryPresentIllBean historyPresentIllBean) throws DaoException{
		List<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  consultationDao.getPatientHistory(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public List<HistoryPresentIllBean> getPatientHistoryGroup(HistoryPresentIllBean historyPresentIllBean) throws DaoException{
		List<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  consultationDao.getPatientHistoryGroup(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<HistoryPresentIllBean> getPatientHistoryByType(HistoryPresentIllBean historyPresentIllBean) throws DaoException{
		List<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  consultationDao.getPatientHistoryByType(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getAllPatientHistory(HistoryPresentIllBean historyPresentIllBean) throws DaoException  {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  consultationDao.getAllPatientHistory(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertPatientHistory(HistoryPresentIllBean hopiBean,HttpServletRequest request) throws DaoException{
		try {
			
			if(!hopiBean.getSymptom_id().equals("Y")) {
				eclinicDaoManager.startTransaction();
				consultationDao.insertPatientHistory(hopiBean);
				eclinicDaoManager.commitTransaction();

				auditLogEntry(hopiBean, request, "INSERT", "Saved Patient Medical History from Doctor's/Nurse's Workbench", hopiBean.getOp_number(),hopiBean.getConsult_id(),"patient_history");

			}
			
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deletePatientHistory(HistoryPresentIllBean historyPresentIllBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.deletePatientHistory(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getEyeRefractionByOpNo(RegistrationBean registrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getEyeRefractionByOpNo(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getGlassPrescriptionByOpNo(RegistrationBean registrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			if(null == registrationBean.getStatus()) {
				registrationBean.setStatus("G");
			}
			us = consultationDao.getGlassPrescriptionByOpNo(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public GlassPrescriptionBean getEyeRefractionByConsult(String opNumber) throws DaoException {

		GlassPrescriptionBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getEyeRefractionByConsult(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateEyeExamIOP(GlassPrescriptionBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			GlassPrescriptionBean oldBean = getEyeExamIOP(registrationBean.getSerial_id());

			eclinicDaoManager.startTransaction();
			consultationDao.updateEyeExamIOP(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Updated Eye Examination - IOP From Doctor's/Nurse's Workbench.",
					oldBean.getOp_number(), oldBean.getConsult_id(), "eyeexam_iop");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteEyeExamIOP(String serial_id, HttpServletRequest request) throws DaoException {
		try {
			GlassPrescriptionBean oldBean = getEyeExamIOP(serial_id);

			eclinicDaoManager.startTransaction();
			consultationDao.deleteEyeExamIOP(serial_id);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "DELETE", "Deleted Eye Examination - IOP From Doctor's/Nurse's Workbench.",
					oldBean.getOp_number(), oldBean.getConsult_id(), "eyeexam_iop");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getEyeExamIOPByOpNo(RegistrationBean registrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getEyeExamIOPByOpNo(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateGlassPrescription(GlassPrescriptionBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			GlassPrescriptionBean oldBean = getGlassPrescriptionById(registrationBean);

			eclinicDaoManager.startTransaction();
			consultationDao.updateGlassPrescription(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Updated Patient's Glass Prescription From Doctor's/Nurse's Workbench.",
					oldBean.getOp_number(), oldBean.getConsult_id(), "glass_prescription");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllDiagnosisDiagrams(RegistrationBean registrationBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllDiagnosisDiagrams(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllGrpByDoc(SetupBean setupBean) throws DaoException{
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllGrpByDoc(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public String getFavouriteItemIdByNm(RegistrationBean registrationBean) throws DaoException{
		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getFavouriteItemIdByNm(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertItemsUnderGrp(SetupBean setupBean, HttpServletRequest request) throws DaoException{
		try 
		{
			eclinicDaoManager.startTransaction();
			consultationDao.insertItemsUnderGrp(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added an item to Favourites By Doctor", null, null, "favourite_items");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllFavouriteItems4SearchByGrp(SetupBean setupBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getAllFavouriteItems4SearchByGrp(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertDiseases(HistoryPresentIllBean hopiBean, HttpServletRequest request) throws DaoException {
		try 
		{
			eclinicDaoManager.startTransaction();
			consultationDao.insertDiseases(hopiBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(hopiBean, request, "INSERT", "Added a Disease to Master", null, null, hopiBean.getTablename());

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		} 
	}

	/**** E&M SERVICES @ END *********/

	public ArrayList getAllProcedureList4Insur(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllProcedureList4Insur(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabTestList4Insur(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllLabTestList4Insur(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertPatientROSheads(HistoryPresentIllBean hopiBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertPatientROSheads(hopiBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(hopiBean, request, "INSERT", "Added ROS Head For a Patient From Doctor's/Nurse's Workbench", hopiBean.getOp_number(), hopiBean.getConsult_id(), "patient_rosheads");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}




	public PaymentBean getVoucherDetailsById(PaymentBean paymentBean) throws DaoException {
		PaymentBean list = null;
		try {
			eclinicDaoManager.startTransaction();

			list = (PaymentBean) paymentDao.getVoucherDetailsById(paymentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getOtherSuppliers(AccountBean accBean) throws DaoException{
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();

			list = (ArrayList)accountDao.getOtherSuppliers(accBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllUsersByDesig(UserBean userBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllUsersByDesig(userBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertInternalReferal(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertInternalReferal(registrationBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllInternalReferals(RegistrationBean registrationBean) throws  DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllInternalReferals(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public String getCountInternalReferalsTo(RegistrationBean registrationBean) throws  DaoException {
		String count = "0";
		try {
			eclinicDaoManager.startTransaction();
			count =  consultationDao.getCountInternalReferalsTo(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return count;
	}
	public ArrayList getConsultLabtests(RegistrationBean registrationBean) throws DaoException{

		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getConsultLabtests(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getConsultProcedures(RegistrationBean registrationBean) throws DaoException{

		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getConsultProcedures(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getDoctorConsultDetails(RegistrationBean registrationBean) throws DaoException{

		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getDoctorConsultDetails(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getInvoicesforDocInc(SetupBean setBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getInvoicesforDocInc(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getDoctorsRatesforReport(SetupBean setBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getDoctorsRatesforReport(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getOpeningBalanceReport(AccountBean accountBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getOpeningBalanceReport(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList getOpeningBalanceForPosting(AccountBean accountBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) accountDao.getOpeningBalanceForPosting(accountBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/** E-Prescription @ START **/
	public EPrescriptionBean getEclaimLoginDetails(UserBean userBean) throws DaoException {
		EPrescriptionBean ePrescriptionBean = null;
		try {
			eclinicDaoManager.startTransaction();
			ePrescriptionBean = eprescriptionDao.getEclaimLoginDetails(userBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ePrescriptionBean;
	}

	public void updateEprescriptionUploadStatus(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateEprescriptionUploadStatus(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateEprescriptionCancelStatus(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateEprescriptionCancelStatus(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void insertEprescription(EPrescriptionBean ePrescriptionBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.insertEprescription(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ePrescriptionBean, request, "INSERT", "Submitted eRx to DHPO from Doctor's Workbench", ePrescriptionBean.getOp_number(),ePrescriptionBean.getConsult_id(),"eprescription");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateEprescriptionDownloadStatus(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateEprescriptionDownloadStatus(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public EPrescriptionBean getErxDetails(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ePrescriptionBean = eprescriptionDao.getErxDetails(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ePrescriptionBean;
	}

	public EPrescriptionBean getPatientDetails(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ePrescriptionBean = eprescriptionDao.getPatientDetails(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ePrescriptionBean;
	}

	public String getErxReferenceNo(String consultId) throws DaoException {
		String erxReferenceNo="";
		try {
			eclinicDaoManager.startTransaction();
			erxReferenceNo = eprescriptionDao.getErxReferenceNo(consultId);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return erxReferenceNo;
	}

	/** E-Prescription @ END **/

	//Synergy Customization

	public int insertFolowupChargeProcedure(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		int i=0;

		try 
		{      

			eclinicDaoManager.startTransaction();
			registrationDao.insertFolowupChargeProcedure(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added Follow-up Charges For Treatment/Procedure", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "consult_procedure");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return i;


	}

	public ArrayList getAllConsultDetailsNA(RegistrationBean registrationBean) throws DaoException {
		// TODO Auto-generated method stub
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAllConsultDetailsNA(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}	
	//Synergy Customization


	public AppointmentBean getAppointmentSlot(AppointmentBean appointmentBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			appointmentBean = appointDao.getAppointmentSlot(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return appointmentBean;
	}

	public AppointmentBean getAppointmentConfirmDtls (AppointmentBean appointmentBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			appointmentBean = appointDao.getAppointmentConfirmDtls(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return appointmentBean;
	}


	/** E-Prescription @ START **/
	public List<EPrescriptionBean> getEclaimFacilityDtls() throws DaoException {
		List<EPrescriptionBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (List<EPrescriptionBean>)eprescriptionDao.getEclaimFacilityDtls();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertErxAuthorizationDtls(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.insertErxAuthorizationDtls(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateErxAuthorizationDtls(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateErxAuthorizationDtls(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateConsultMedAuthDtls(ERxParseBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateConsultMedAuthDtls(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List<EPrescriptionBean> getErxTransactions(EPrescriptionBean ePrescriptionBean) throws DaoException {
		List<EPrescriptionBean> epresList=null;
		try {
			eclinicDaoManager.startTransaction();
			epresList = (List<EPrescriptionBean>)eprescriptionDao.getErxTransactions(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return epresList;
	}


	public EPrescriptionBean getErxTransactionsById(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ePrescriptionBean = eprescriptionDao.getErxTransactionsById(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ePrescriptionBean;
	}

	public List getMedicineAuthorizationDtls(EPrescriptionBean ePrescriptionBean) throws DaoException {
		List list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (List)eprescriptionDao.getMedicineAuthorizationDtls(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getAllNewPriorAuthorizations(EPrescriptionBean ePrescriptionBean) throws DaoException {
		List list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (List)eprescriptionDao.getAllNewPriorAuthorizations(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void saveMedicinesFromPreviousVisit(RegistrationBean registrationBean, HttpServletRequest request)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.saveMedicinesFromPreviousVisit(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added Medicines From Previous Visit - Doctor's/Nurse's Workbench", registrationBean.getOp_number(),registrationBean.getConsult_id(),"consult_medicine");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}


	public List getAllConsultVisits(RegistrationBean registrationBean) throws DaoException {
		List list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (List)eprescriptionDao.getAllConsultVisits(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/** E-Prescription @ END **/

	public ArrayList getFindSourcesCount(RegistrationBean registrationBean) throws DaoException {
		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = (ArrayList)consultationDao.getFindSourcesCount(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getNewRegCount (RegistrationBean regBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			regBean = consultationDao.getNewRegCount(regBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return regBean;
	}

	public AppointmentBean getAppointmentSlotCount (AppointmentBean appointmentBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			appointmentBean = appointDao.getAppointmentSlotCount(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return appointmentBean;
	}

	public ArrayList getReceivedInvoiceDetails(RegistrationBean registrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = (ArrayList)registrationDao.getReceivedInvoiceDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList getAllReportsonType(UserBean usebean) throws DaoException 
	{
		ArrayList userDetails=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			userDetails=loginDao.getAllReportsonType(usebean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	}
	public ArrayList getDetailedRIReport(RegistrationBean registrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = (ArrayList)registrationDao.getDetailedRIReport(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getDifferentReportTypes(UserBean userBean) throws DaoException 
	{
		ArrayList userDetails=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			userDetails=loginDao.getDifferentReportTypes(userBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	} 


	public ArrayList getListofDiscReport(RegistrationBean registrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = (ArrayList)registrationDao.getListofDiscReport(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateVitalSigns4Erx(VitalSignsBean vitalSignsBean) throws DaoException {
		/*try {
				eclinicDaoManager.startTransaction();
				VitalSignsBean oldVitalSigns=consultationDao.getVitalSigns(vitalSignsBean);
				if(null != oldVitalSigns && null != oldVitalSigns.getConsult_id()) {
					consultationDao.updateVitalSigns4Erx(vitalSignsBean);
				} else {
					RegistrationBean registrationBean= new RegistrationBean();
					registrationBean.setWeight(vitalSignsBean.getWeight());
					registrationBean.setConsult_id(vitalSignsBean.getConsult_id());
					consultationDao.saveVitalSign(vitalSignsBean);
				}
				eclinicDaoManager.commitTransaction();

			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}*/
	}

	// Setting To Time For Appointment while reshedule @ START MAR 06 2014
	public AppointmentBean getAppointmentEndTime (AppointmentBean appointmentBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ArrayList list = (ArrayList)appointDao.getAppointmentEndTime(appointmentBean);
			if(null !=list && list.size()>0) {
				AppointmentBean regBean2= (AppointmentBean)list.get(list.size()-1);
				appointmentBean.setAppoint_min(regBean2.getAppoint_min());
			}
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return appointmentBean;
	}
	// Setting To Time For Appointment while Reshedule @ END MAR 06 2014

	public ArrayList<AppointmentBean> getAppointmentSlots (AppointmentBean appointmentBean) throws DaoException {
		ArrayList<AppointmentBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list= (ArrayList<AppointmentBean>)appointDao.getAppointmentSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public RegistrationBean getConsultMedicineById(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationBean = consultationDao.getConsultMedicineById(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return registrationBean;
	}

	public void updateConsultMedicine(RegistrationBean registrationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateConsultMedicine(registrationBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}



	public ArrayList getAllProcedures(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllProcedures(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/*** Medical History save - by Nishitha @ START***/ // Not used now
	/*public void savePatientMedicalHistory(ConsultationBean consultationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			consultationDao.savePatientMedicalHistory(consultationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updatePatientMedicalHistory(ConsultationBean consultationBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updatePatientMedicalHistory(consultationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}*/

	/*public List<ConsultationBean> getPatientMedicalHistory(ConsultationBean consultationBean) throws DaoException{
		List list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (List)consultationDao.getPatientMedicalHistory(consultationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}*/

	public List getAllHistoryMaster(HistoryPresentIllBean hopiBean) throws DaoException {
		List list=null;
		try {
			
			//RegistrationBean tempBean = new RegistrationBean();
			String gender = "'C'";
			if (null != hopiBean.getOp_number() && !hopiBean.getOp_number().equals("")) {
				//tempBean.setQuery("SELECT sex FROM new_registration WHERE op_number='" + hopiBean.getOp_number() + "'");
				String sex = common.fetchValueWithSingleParam("new_registration", "sex", "op_number", hopiBean.getOp_number(), null, null);
				//tempBean = null;
				if (null != sex) {
					if (sex.equals("Female")) {
						gender = gender + ",'F'";
					} else if (sex.equals("Male")) {
						gender = gender + ",'M'";
					}
				}
			}
			hopiBean.setGender(gender);
			
			eclinicDaoManager.startTransaction();
			list = (List)consultationDao.getAllHistoryMaster(hopiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<HistoryPresentIllBean> getAllHistoryMasterByType(HistoryPresentIllBean hopiBean) throws DaoException {
		List<HistoryPresentIllBean> list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (List<HistoryPresentIllBean>)consultationDao.getAllHistoryMasterByType(hopiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public HistoryPresentIllBean getPatientMedicalHistoryById(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			historyPresentIllBean = consultationDao.getPatientMedicalHistoryById(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return historyPresentIllBean;
	}

	public void updatePatientHistory(HistoryPresentIllBean historyPresentIllBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updatePatientHistory(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public synchronized void saveConsultDtls(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.saveConsultDtls(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Saved Patient Medical Details from Doctor's/Nurse's Workbench",
					registrationBean.getOp_number(), registrationBean.getConsult_id(), "consult_dtls");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public synchronized RegistrationBean getConsultDtls(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationBean=consultationDao.getConsultDtls(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return registrationBean;
	}

	public void updateConsultDtls(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateConsultDtls(registrationBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(registrationBean, request, "UPDATE", "Updated Patient Medical Details from Doctor's/Nurse's Workbench", registrationBean.getOp_number(),registrationBean.getConsult_id(),"consult_dtls");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List getServiceWiseDoctorRevenue(RegistrationBean registrationBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getServiceWiseDoctorRevenue(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getServiceWiseDoctorRevenue1(RegistrationBean registrationBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getServiceWiseDoctorRevenue1(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getCollectionSummaryDoctorWise(RegistrationBean registrationBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getCollectionSummaryDoctorWise(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getAllListOfPatientDiscounts(RegistrationBean regBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllListOfPatientDiscounts(regBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<VitalSignsBean> getVitalSignsNormalRanges(VitalSignsBean vitalSignsBean) throws DaoException {
		List<VitalSignsBean> list=null;
		try {
			eclinicDaoManager.startTransaction();
			list=(List<VitalSignsBean>)consultationDao.getVitalSignsNormalRanges(vitalSignsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public void deactivateDepartment(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException 
	{
		try 
		{   
			SetupBean oldBean=getDepartmentById(registrationBean);   

			eclinicDaoManager.startTransaction();
			setupDao.deactivateDepartment(registrationBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Deactivated Department (" + oldBean.getDepartment_name() + ") in this Office", null, null,
						"department_office");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void activateDepartment(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException 
	{
		try 
		{     
			SetupBean oldBean=getDepartmentById(registrationBean);    	

			eclinicDaoManager.startTransaction();
			setupDao.activateDepartment(registrationBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Activated Department (" + oldBean.getDepartment_name() + ") in this Office", null, null,
						"department_office");
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}


	public void activateRefDoctors(String id, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			SetupBean oldBean = new SetupBean();
			oldBean.setRdoctor_id(id);
			oldBean = getReferDoctorById(oldBean);

			eclinicDaoManager.startTransaction();
			setupDao.activateRefDoctors(id);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE",
						"Activated Referral Doctor (" + oldBean.getRdoctor_name() + ") of Clinic (" + oldBean.getClinic_name() + ")", null, null,
						"refer_doctors");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}



	public void deactivateRefDoctors(String id, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			SetupBean oldBean = new SetupBean();
			oldBean.setRdoctor_id(id);
			oldBean = getReferDoctorById(oldBean);

			eclinicDaoManager.startTransaction();
			setupDao.deactivateRefDoctors(id);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE",
						"Deactivated Referral Doctor (" + oldBean.getRdoctor_name() + ") of Clinic (" + oldBean.getClinic_name() + ")", null, null,
						"refer_doctors");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}




	public void deactivateSoClinic(String id, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			SetupBean oldBean= getSoClinicById(id);

			eclinicDaoManager.startTransaction();
			setupDao.deactivateSoClinic(id);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Deactivated Send Out Clinic (" + oldBean.getClinic_name() + ")", null, null, "sendoutclinic_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void activateSoClinic(String id, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			SetupBean oldBean= getSoClinicById(id);

			eclinicDaoManager.startTransaction();
			setupDao.activateSoClinic(id);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Activated Send Out Clinic (" + oldBean.getClinic_name() + ")", null, null, "sendoutclinic_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deleteDepartment(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			SetupBean oldBean=getDepartmentById(registrationBean);   

			eclinicDaoManager.startTransaction();
			setupDao.deleteDepartment(registrationBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted Department("+oldBean.getDepartment_name()+") From Office", null, null, "department_office");
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteFindUs(SetupBean setupBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			SetupBean oldBean = getFindSourceById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteFindUs(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted How did you find us From Setup - " + oldBean.getFind_source(), null, null, "find_sources");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void activateProcedure(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			SetupBean oldBean = getProcedureSetupById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.activateProcedure(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Activated Procedure "+oldBean.getProcedure_name()+" in Master", null, null, "procedure_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deactivateProcedure(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			SetupBean oldBean = getProcedureSetupById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deactivateProcedure(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Deactivated Procedure "+oldBean.getProcedure_name()+" in Master", null, null, "procedure_setup");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deactivateCategory(String id, HttpServletRequest request) throws DaoException {
		try {
			RegistrationBean oldBean = getEditTestCategorysetup(id);

			eclinicDaoManager.startTransaction();
			registrationDao.deactivateCategory(id);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Deactivated Test Category - "+oldBean.getCategoryName(), null, null, "test_category");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void activateCategory(String id, HttpServletRequest request) throws DaoException {
		try {
			RegistrationBean oldBean = getEditTestCategorysetup(id);

			eclinicDaoManager.startTransaction();
			registrationDao.activateCategory(id);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Activated Test Category - "+oldBean.getCategoryName(), null, null, "test_category");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}


	public void deactivateSample(String id, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			RegistrationBean oldBean = getEditTestSample(id);

			eclinicDaoManager.startTransaction();
			registrationDao.deactivateSample(id);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Deactivated Test Sample - " + oldBean.getSampleName(), null, null, "test_sample_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}


	public void activateSample(String id, HttpServletRequest request) throws DaoException 
	{
		try 
		{        
			RegistrationBean oldBean = getEditTestSample(id);

			eclinicDaoManager.startTransaction();
			registrationDao.activateSample(id);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Activated Test Sample - "+oldBean.getSampleName() , null, null, "test_sample_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}



	public void activateTestSetup(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{   
			RegistrationBean oldBean = getEditTestSetup(registrationBean);

			eclinicDaoManager.startTransaction();
			registrationDao.activateTestSetup(registrationBean);
			eclinicDaoManager.commitTransaction();

			if(oldBean!=null)
				auditLogEntry(oldBean, request, "UPDATE", "Activated an Investigation ("+oldBean.getTestName()+") In this Office", null, null, "test_setup_office");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deactivateTestSetup(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			RegistrationBean oldBean = getEditTestSetup(registrationBean);

			eclinicDaoManager.startTransaction();
			registrationDao.deactivateTestSetup(registrationBean);
			eclinicDaoManager.commitTransaction();

			if(oldBean!=null)
				auditLogEntry(oldBean, request, "UPDATE", "Deactivated an Investigation ("+oldBean.getTestName()+") In this Office", null, null, "test_setup_office");
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deactivateProvider(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			SetupBean oldBean = getInsuranceProviderById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deactivateProvider(setupBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Deactivated an Insurance/Company/Sponsor - "+oldBean.getInsurar_name(), null, null, "office_insurar");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void activateProvider(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			SetupBean oldBean = getInsuranceProviderById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.activateProvider(setupBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Deactivated an Insurance/Company/Sponsor - "+oldBean.getInsurar_name(), null, null, "office_insurar");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deactivateDoctor(SetupBean setupBean,HttpServletRequest request) throws DaoException
	{
		try 
		{  
			SetupBean oldBean = getDoctorById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deactivateDoctor(setupBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Deactivated Doctor - "+oldBean.getDoctors_name(), null, null, "doctors_office");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void activateDoctor(SetupBean setupBean,HttpServletRequest request ) throws DaoException
	{

		try 
		{        	
			SetupBean oldBean = getDoctorById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.activateDoctor(setupBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Activated Doctor - "+oldBean.getDoctors_name(), null, null, "doctors_office");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void activateReferClinic(String id, HttpServletRequest request ) throws DaoException 
	{
		try 
		{      
			SetupBean oldBean = getClinicById(id);

			eclinicDaoManager.startTransaction();
			setupDao.activateReferClinic(id);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Activated Referral Clinic - "+oldBean.getClinic_name(), null, null, "clinics_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deactivateReferClinic(String id, HttpServletRequest request ) throws DaoException 
	{

		try 
		{        
			SetupBean oldBean = getClinicById(id);

			eclinicDaoManager.startTransaction();
			setupDao.deactivateReferClinic(id);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Deactivated Referral Clinic - "+oldBean.getClinic_name(), null, null, "clinics_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public List<ReportBean> getDailyDocWiseCollectionSummary(RegistrationBean registrationBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getDailyDocWiseCollectionSummary(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<ReportBean> getAccumulatedCollectionSummary(RegistrationBean registrationBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getAccumulatedCollectionSummary(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public RegistrationBean getCurrDueDetails(RegistrationBean regBean) throws DaoException{
		RegistrationBean registrationBean = null;
		try{
			eclinicDaoManager.startTransaction();
			registrationBean = registrationDao.getCurrDueDetails(regBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return registrationBean;

	}
	public ArrayList getPreviousDueDetails(RegistrationBean registrationBean) throws DaoException{
		ArrayList list = null;
		try{

			eclinicDaoManager.startTransaction();
			list = (ArrayList)registrationDao.getPreviousDueDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return list;
	}



	/*Start:For credit note entry*/
	public ArrayList getPreviousDueDetailsRefund(RegistrationBean registrationBean) throws DaoException
	{
		ArrayList list = null;
		try{

			eclinicDaoManager.startTransaction();
			list = (ArrayList)registrationDao.getPreviousDueDetailsRefund(registrationBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return list;
	}
	/*End :Credit Debit Entry*/
	public RegistrationBean getCreditNotesDetails(RegistrationBean reg)throws DaoException 
	{
		RegistrationBean list = null;
		try{

			eclinicDaoManager.startTransaction();
			list = (RegistrationBean)registrationDao.getCreditNotesDetails(reg);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return list;
	}

	public RegistrationBean getConsultReceiptVouchDetailRefundByID(RegistrationBean reg)throws DaoException 
	{
		RegistrationBean list = null;
		try{

			eclinicDaoManager.startTransaction();
			list = (RegistrationBean)registrationDao.getConsultReceiptVouchDetailRefundByID(reg);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getPatListDemography (RegistrationBean regBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list= (ArrayList) registrationDao.getPatListDemography(regBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertReminderDetails(AppointmentBean appointmentBean)throws DaoException  
	{
		try {        	
			eclinicDaoManager.startTransaction();
			appointDao.insertReminderDetails(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList<AppointmentBean> getAllReminders(AppointmentBean appointmentBean)throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllReminders(appointmentBean);
			eclinicDaoManager.commitTransaction();

		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public AppointmentBean getReminderById(AppointmentBean appointmentBean)throws DaoException 
	{
		AppointmentBean remBean = new AppointmentBean();

		try{        	
			eclinicDaoManager.startTransaction();
			remBean=(AppointmentBean)appointDao.getReminderById(appointmentBean);
			eclinicDaoManager.commitTransaction();

		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return remBean;
	}

	public void deleteReminder(AppointmentBean appointmentBean)throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			appointDao.deleteReminder(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList<AppointmentBean> getAllRemindersForRefresh(AppointmentBean appointmentBean)throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllRemindersForRefresh(appointmentBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllInsurarSub4Registration(String id) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllInsurarSub4Registration(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllAppointments4Report(AppointmentBean appointmentBean) throws DaoException {
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllAppointments4Report(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertReferralClinic(RegistrationBean oldRegBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertReferralClinic(oldRegBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log Given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getReferalClinics(RegistrationBean registrationBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getReferalClinics(registrationBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getRejctdReasonCount(RegistrationBean regBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getRejctdReasonCount(regBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getlabRejctdReasonCount(RegistrationBean regBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getlabRejctdReasonCount(regBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getconsultRejctdReasonCount(RegistrationBean regBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getconsultRejctdReasonCount(regBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllBlockedPatients(RegistrationBean regBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllBlockedPatients(regBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertBlockedPatients(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertBlockedPatients(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Blocked the Patient  - "+registrationBean.getPatient_name(),registrationBean.getOp_number() ,null,"blocked_patients");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public RegistrationBean getAllBlockedPatientDetails(RegistrationBean reg) throws DaoException {
		RegistrationBean registrationBean = null;
		try{
			eclinicDaoManager.startTransaction();
			registrationBean = registrationDao.getAllBlockedPatientDetails(reg);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return registrationBean;
	}


	/***May 24 Ramya**/
	public ArrayList getAdvanceAmountAdjustedDets(RegistrationBean regBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getAdvanceAmountAdjustedDets(regBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/*TAT REPORT*/
	public ArrayList getAllDetforTatReport(RegistrationBean rgistrationBean)
			throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllDetforTatReport(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getDoctorInsurPrice(SetupBean setup)throws DaoException{
		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getDoctorInsurPrice(setup);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public String getLastInsertRemit_id() throws DaoException {
		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getLastInsertRemitid();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void reReSubmitClaim(RegistrationBean registrationBean, HttpServletRequest request)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.reReSubmitClaim(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "UPDATE", "Re-re-submitted the Claim From Insurance Module", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "claim_generated");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	/*****Start:New Requirement on Sep9 2014  as part of Monthly Census Report for RAK*********/
	public RegistrationBean getMonthlyCensusReport(RegistrationBean regBean) throws DaoException 
	{
		RegistrationBean reg=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			reg=(RegistrationBean)registrationDao.getMonthlyCensusReport(regBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return reg;
	}

	/*****End:New Requirement on Sep9 2014  as part of Monthly Census Report for RAK*********/

	/*******Start:Link From HRMS to Finance*********/
	public ArrayList<AccountBean> getEmpList(AccountBean accountBean)throws DaoException {

		ArrayList<AccountBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AccountBean>)accountDao.getEmpList(accountBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/*******End:Link From HRMS to Finance*********/

	public void updateClaimReconcil4Resub(PaymentBean paymentBean,HttpServletRequest request)throws DaoException {

		try 
		{   PaymentBean oldBean=getClaimReconcileById(paymentBean);        	
		eclinicDaoManager.startTransaction();
		receiptDao.updateClaimReconcil4Resub(paymentBean);

		eclinicDaoManager.commitTransaction();
		auditLogEntry(oldBean, request, "UPDATE", "Reconciliation Done for Claim Resubmission." , null, null, "claim_generated");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public RegistrationBean getAllConsultationDetails(RegistrationBean consultDetails)throws DaoException {
		RegistrationBean registrationBean = null;
		try{
			eclinicDaoManager.startTransaction();
			registrationBean = registrationDao.getAllConsultationDetails(consultDetails);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return registrationBean;
	}


	public void updateConsultDetails(RegistrationBean registrationBean,String updateSection,RegistrationBean oldBean, HttpServletRequest request)throws DaoException { 
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateConsultDetails(registrationBean,updateSection);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Updated Patient's Case Sheet From Doctor's/Nurse's Workbench", oldBean.getOp_number(),oldBean.getConsult_id(),"consult_dtls");


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertChequeDetails(RegistrationBean reg, HttpServletRequest request)throws DaoException
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.insertChequeDetails(reg);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(reg, request, "INSERT", "Added Cheque Details On Cash Invoice Payment via Cheque - Billing", reg.getOp_number(),reg.getConsult_id(),"cheque_details");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllHistoryHeadings(HistoryPresentIllBean hopiBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)consultationDao.getAllHistoryHeadings(hopiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public ArrayList getAllHistorySubs(HistoryPresentIllBean hopiBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)consultationDao.getAllHistorySubs(hopiBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getPatientRecallDetails(AppointmentBean appointmentBean)throws DaoException {
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getPatientRecallDetails(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSeatsUnderGroup(String groupId) throws DaoException 
	{
		ArrayList lst=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			lst=(ArrayList)setupDao.getAllSeatsUnderGroup(groupId);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lst;

	}

	public ArrayList getAllSeatsUnderOffice(String groupId) throws DaoException 
	{
		ArrayList lst=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			lst=(ArrayList)setupDao.getAllSeatsUnderOffice(groupId);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lst;

	}

	public String getParentLevelId(String groupId) throws DaoException 
	{
		String lst=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			lst=setupDao.getParentLevelId(groupId);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lst;

	}

	public ArrayList getAllGroupsUnderAnother(String groupId) throws DaoException 
	{
		ArrayList lst=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			lst=(ArrayList)setupDao.getAllGroupsUnderAnother(groupId);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lst;

	}

	public ArrayList getClaimsCountList(SetupBean setBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getClaimsCountList(setBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/* DHA Statistics Queries July 2014 ---- Start*/

	public ArrayList<RegistrationBean> getAllDiagnosisWiseConsultations(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getAllDiagnosisWiseConsultations(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getAllProcedureWiseConsultations(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getAllProcedureWiseConsultations(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getAllConsultationWaitingTime(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getAllConsultationWaitingTime(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllDHADepartments(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllDHADepartments(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllAppointmentWaitingTime(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getAllAppointmentWaitingTime(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/* DHA Statistics Queries July 2014 ---- End*/ 

	/* Package implementation for Ramy - September 2014 - Start */
	public ArrayList<SetupBean> getPackageDetailsById(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) setupDao.getPackageDetailsById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 
	public void insertPackageDetails(SetupBean setupBean,HttpServletRequest request) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertPackageDetails(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT",
					"Added a Procedure/Labtest (" + setupBean.getProcedure_name() + ") under Package " + setupBean.getPackage_name(), null, null,
					"package_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void insertConsultPackageDetails(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException 
	{
		try {
			/*UserBean userBean=new UserBean();
			if(request.getAttribute("userDetails")!=null){
				userBean=(UserBean)request.getAttribute("userDetails");
			}*/
			eclinicDaoManager.startTransaction();
			setupDao.insertConsultPackageDetails(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added a Package from Billing/Registration", registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "consult_package");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<SetupBean> getConsultPackageServiceDetails(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) setupDao.getConsultPackageServiceDetails(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getConsultPackageDetailsById(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) setupDao.getConsultPackageDetailsById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllConsultPackageList(SetupBean setupBean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getAllConsultPackageList(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public RegistrationBean getConsultPackageDetails(RegistrationBean registrationBean) throws DaoException {
		RegistrationBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (RegistrationBean) setupDao.getConsultPackageDetails(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getPackageUsageHistoryById(RegistrationBean registrationBean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getPackageUsageHistoryById(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getChequeDetailsById(RegistrationBean registrationBean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getChequeDetailsById(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<String> getPackageServiceUsageSumById(RegistrationBean registrationBean) throws DaoException {
		ArrayList<String> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<String>) setupDao.getPackageServiceUsageSumById(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getPackageOutstanding(SetupBean setupBean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getPackageOutstanding(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/* Package implementation for Ramy - September 2014 - End */

	/** HAAD Reports --- August 2014 --- Starts **/

	public ArrayList<RegistrationBean> getHAADReport1Details(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getHAADReport1Details(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getHAADReport2Details(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getHAADReport2Details(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getHAADReport3Details(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getHAADReport3Details(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getKPIReportDetails(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getKPIReportDetails(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/** HAAD Reports --- August 2014 --- Ends **/

	public ArrayList getFreeAppointmentList(RegistrationBean registrationBean) throws DaoException { 
		ArrayList list=null;
		try
		{
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getFreeAppointmentList(registrationBean);
			eclinicDaoManager.commitTransaction();
		}
		catch (DaoException e)
		{
			try
			{
				eclinicDaoManager.rollbackTransaction();
			}
			catch (Exception e2)
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void deleteGlassPresc(String id, HttpServletRequest request) throws DaoException {
		try {
			GlassPrescriptionBean oldBean = new GlassPrescriptionBean();
			oldBean.setSerial_id(id);
			oldBean = getGlassPrescriptionById(oldBean);

			eclinicDaoManager.startTransaction();
			consultationDao.deleteGlassPresc(id);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "DELETE", "Deleted Glass Prescription Of Patient From Doctor's / Nurse's Workbench", oldBean.getOp_number(),
					oldBean.getConsult_id(), "glass_prescription");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList<HistoryPresentIllBean> getPatientExaminationsBasedOnChildId(HistoryPresentIllBean hpiBean) throws DaoException {
		ArrayList<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			if (null == hpiBean.getDisplay_order() || hpiBean.getDisplay_order().equals("")) {/*
				hpiBean.setDisplay_order("GROUP BY patient_examchild.entry_id,patient_examchild.exam_childid,patient_examchild.exam_headid,exam_child.exam_childname,exam_head.exam_headname,patient_examchild.consult_id,patient_examchild.op_number,     patient_examchild.ip_number,patient_examchild.ip_id,to_varchar(patient_examchild.entered_date,'YYYY-MM-DD HH:MM'),patient_examchild.enteredby,user_setup.user_label,exam_head.is_table " +
						"ORDER BY exam_head.exam_headname,patient_examchild.entry_id desc,to_varchar(patient_examchild.entered_date,'YYYY-MM-DD HH:MM') desc,exam_child.exam_childname  ");
			*/}
			list = (ArrayList<HistoryPresentIllBean>) consultationDao.getPatientExaminationsBasedOnChildId(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getExamSubChilds(HistoryPresentIllBean hpiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getExamSubChilds(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllEmployers(SetupBean setupbean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) setupDao.getAllEmployers(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllUnaddedProcedures(SetupBean setBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) setupDao.getAllUnaddedProcedures(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/***Start:Referred Doctor Report done on 15Nov 2014 for Oriana***/
	public ArrayList<SetupBean> getReferredDoctors(SetupBean setupbean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) setupDao.getReferredDoctors(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateTrmtConsultDtls(RegistrationBean registrationBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateTrmtConsultDtls(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* audit log given in action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateTrmtMedConsultDtls(RegistrationBean registrationBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateTrmtMedConsultDtls(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* audit log given in action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}
	/***End:Referred Doctor Report done o 15Nov 2014 for Oriana***/
	//to send b'day wish

	public List getPatientsBirthDayList(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getPatientsBirthDayList(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List getSendGreetingList(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getSendGreetingList(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getPatientDetailsFromOpNumber(String op_number) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getPatientDetailsFromOpNumber(op_number);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertPatientsGreetings(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.insertPatientsGreetings(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added Patient's Birthday Greetings", registrationBean.getOp_number(), null,"birthday_wishes");

		}catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public SetupBean getFavMedDetailsByMedID(SetupBean setbean) throws DaoException 
	{
		SetupBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(SetupBean)setupDao.getFavMedDetailsByMedID(setbean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertofficeInsurar(SetupBean setupBean) throws DaoException  {
		try {
			eclinicDaoManager.startTransaction();
			if(setupBean.getCo_gross()==null)
				setupBean.setCo_gross("N");
			setupDao.insertofficeInsurar(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntryForLogic(setupBean, null, "INSERT","Insert the insurance based on the office", null, null, "office_insurar");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	//Preapproval Flow Correction --- Changes --- 28 Jan 2015 --- Starts
	public ArrayList<SetupBean> getAllConsultLabTestRequest(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)registrationDao.getAllConsultLabTestRequest(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getAllConsultProcedureRequest(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)registrationDao.getAllConsultProcedureRequest(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public RegistrationBean getConsultLabTestRequestById(RegistrationBean registrationBean) throws DaoException 
	{
		RegistrationBean testBean=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			testBean = (RegistrationBean)registrationDao.getConsultLabTestRequestById(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return testBean;
	}
	public RegistrationBean getConsultProcedureRequestById(RegistrationBean registrationBean) throws DaoException 
	{
		RegistrationBean procedureBean=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			procedureBean =(RegistrationBean)registrationDao.getConsultProcedureRequestById(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return procedureBean;
	}
	//Preapproval Flow Correction --- Changes --- Ends

	//Billing Posting changes ---- 10 Feb 2015 ---- Starts
	public ArrayList<AccountBean> getAllDiscountHeads(AccountBean accountBean) throws DaoException {

		ArrayList<AccountBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AccountBean>)accountDao.getAllDiscountHeads(accountBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public AccountBean getDiscountHeadById(AccountBean accountBean) throws DaoException {

		AccountBean headBean = null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			headBean=(AccountBean)accountDao.getDiscountHeadById(accountBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return headBean;
	}
	public ArrayList<AccountBean> getAllSponsorHeads(AccountBean accountBean) throws DaoException {

		ArrayList<AccountBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AccountBean>)accountDao.getAllSponsorHeads(accountBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public AccountBean getSponsorHeadById(AccountBean accountBean) throws DaoException {

		AccountBean headBean = null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			headBean=(AccountBean)accountDao.getSponsorHeadById(accountBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return headBean;
	}
	//Billing Posting changes ---- Ends


	public ArrayList<SetupBean> getAllMedicineGenericNames(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) setupDao.getAllMedicineGenericNames(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public List<VitalSignsBean> getVitalSignsParameters(VitalSignsBean vitalSignsBean) throws DaoException {
		List<VitalSignsBean> list=null;
		try {
			eclinicDaoManager.startTransaction();
			list=(List<VitalSignsBean>)consultationDao.getVitalSignsParameters(vitalSignsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/*	public void updateVitalSigns(List<VitalSignsBean> vitalList)throws DaoException 
			{
				try {
					eclinicDaoManager.startTransaction();
					//consultationDao.deleteVitalSigns(registrationBean);
					consultationDao.saveVitalSigns(vitalList);
					eclinicDaoManager.commitTransaction();

				} catch (DaoException e) {
					try {
						eclinicDaoManager.rollbackTransaction();
					} catch (Exception e2) {
					}
					throw ((DaoException) e.fillInStackTrace());
				}
			}*/

	public ArrayList getAllLabTestList4InsurNetwork(SetupBean setupBean) throws DaoException 
	{
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllLabTestList4InsurNetwork(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public ArrayList getAllProcedureList4InsurNetwork(
			SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllProcedureList4InsurNetwork(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	//ViewConsult4Bill code optimization changes -- Starts --- 26 Feb 2015
	public RegistrationBean getPatientDueDetails(RegistrationBean registrationBean) throws DaoException 
	{
		RegistrationBean dueBean=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			dueBean =(RegistrationBean)registrationDao.getPatientDueDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dueBean;
	}
	public RegistrationBean getPreviousVisitDetails(RegistrationBean registrationBean) throws DaoException 
	{
		RegistrationBean visitBean=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			visitBean =(RegistrationBean)registrationDao.getPreviousVisitDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return visitBean;
	}
	public RegistrationBean getConsultPackageServiceCount(RegistrationBean registrationBean) throws DaoException 
	{
		RegistrationBean packageBean=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			packageBean =(RegistrationBean)registrationDao.getConsultPackageServiceCount(registrationBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return packageBean;
	}
	//ViewConsult4Bill code optimization changes -- Ends


	public ArrayList<SetupBean> getAllServicesList(SetupBean setBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllServicesList(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getPatientsCountPerMonthDoctorwise(SetupBean setBean) throws DaoException {
		ArrayList<SetupBean> patCountList = null;

		try {
			eclinicDaoManager.startTransaction();
			patCountList = (ArrayList) setupDao.getPatientsCountPerMonthDoctorwise(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return patCountList;
	}

	public void insertFindUs(SetupBean setupBean,HttpServletRequest request)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertFindUs(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Inserted How did you find us From Setup - "+setupBean.getFind_source(),null ,null,"find_sources");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void insertDepartmentOffice(RegistrationBean registrationBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertDepartmentOffice(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertDoctorsOffice(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertDoctorsOffice(setupBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public void updateDoctorsOffice(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.updateDoctorsOffice(setupBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public ArrayList getAllPackages(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllPackages(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllServicesForPackageId(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllServicesForPackageId(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllPacakageResults(SetupBean setupBean) throws DaoException
	{
		ArrayList list=null;
		try{
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllPacakageResults(setupBean);
			eclinicDaoManager.commitTransaction();

		}catch(DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e2){

			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllPackagePatientsList(SetupBean setupBean) throws DaoException
	{
		ArrayList list = null;

		try{
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllPackagePatientsList(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException e){
			try
			{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e2){

			}
			throw((DaoException) e.fillInStackTrace()); 
		}


		return list;

	}



	public ArrayList getReceiptWiseInv4SponLiab(String id) throws DaoException  {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)receiptDao.getReceiptWiseInv4SponLiab(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getReceiptWiseInv4ReferClinic(String id) throws DaoException  {
		ArrayList<SetupBean> list=null;
		try	{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)receiptDao.getReceiptWiseInv4ReferClinic(id);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void updateClaimReconcil4ReResub(PaymentBean paymentBean,HttpServletRequest request)throws DaoException {

		try 
		{    PaymentBean oldBean=getClaimReconcileById(paymentBean);      	
		eclinicDaoManager.startTransaction();
		receiptDao.updateClaimReconcil4ReResub(paymentBean);

		eclinicDaoManager.commitTransaction();
		auditLogEntry(oldBean, request, "UPDATE", "Reconciliation Done for Claim ReResubmission " , null, null, "claim_generated");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllWards(InPatientBean ipBean) throws DaoException {
		// TODO Auto-generated method stub
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllWards(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllBeds(InPatientBean ipBean) throws DaoException {
		// TODO Auto-generated method stub
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllBeds(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public String insertWard(InPatientBean ipBean)throws DaoException {
		String sid=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.insertWard(ipBean);
			sid=inpatientDao.getLastWardId();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return sid;
	}

	public InPatientBean getWardByID(InPatientBean ipBean) throws DaoException {
		InPatientBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getWardByID(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<InPatientBean> getAllDepartmentsforIP(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)inpatientDao.getAllDepartmentsforIP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllWardTypes(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllWardTypes(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertWardDep(InPatientBean ipBean)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.insertWardDep(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public String isAlreadyExist(InPatientBean ipBean)throws DaoException  {
		// TODO Auto-generated method stub
		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.isAlreadyExist(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getAllDepartmentsAssigned(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllDepartmentsAssigned(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateWards(InPatientBean ipBean)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.updateWards(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public void deletewardDepartments(String id)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.deletewardDepartments(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllRoomTypes(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllRoomTypes(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public InPatientBean getRoomTypeById(InPatientBean ipBean)throws DaoException {
		InPatientBean list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(InPatientBean)inpatientDao.getRoomTypeById(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void addroomtype(InPatientBean ipBean)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.addroomtype(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 
	//Room Type
	public ArrayList getAllRoomCategories(InPatientBean ipBean)throws DaoException{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllRoomCategories(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	// Bed Type Starts
	public ArrayList getAllBedTypes(InPatientBean ipBean)throws DaoException{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllBedTypes(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void addbedtype(InPatientBean ipBean)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.addbedtype(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}


	public void updatebedtype(InPatientBean ipBean,HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.updatebedtype(ipBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ipBean, request, "UPDATE", "Updated BedType ,Bed description  From Setup - "+ipBean.getBed_type()+ipBean.getBed_description(),null ,null,"bed_type,bed_description");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deletebedType(InPatientBean ipBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.deletebedType(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	// Bed Type 
	public String addRoomDetails(InPatientBean ipBean)throws DaoException {

		String sid=null;
		try 

		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.addRoomDetails(ipBean);
			sid=inpatientDao.getLastRoomId();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return sid;

	}

	public InPatientBean getAllroomDetails(InPatientBean ipBean)throws DaoException {

		InPatientBean ip=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			ip=(InPatientBean)inpatientDao.getAllroomDetails(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ip;
	}
	/*public ArrayList getAllWardsByCrit(InPatientBean ipBean) throws DaoException {
		// TODO Auto-generated method stub
		 ArrayList list=null;
			try 
					{        	
				eclinicDaoManager.startTransaction();
				list=(ArrayList)inpatientDao.getAllBeds(ipBean);
				eclinicDaoManager.commitTransaction();

			} 
			catch (DaoException e) 
					{
			try 
						{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
						{
			}
			throw ((DaoException) e.fillInStackTrace());
			}
			return list;
	}

	public ArrayList getAllBedNames(InPatientBean ipBean) throws DaoException {
		// TODO Auto-generated method stub
		 ArrayList list=null;
			try 
					{        	
				eclinicDaoManager.startTransaction();
				list=(ArrayList)inpatientDao.getAllBedNames(ipBean);
				eclinicDaoManager.commitTransaction();

			} 
			catch (DaoException e) 
					{
			try 
						{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
						{
			}
			throw ((DaoException) e.fillInStackTrace());
			}
			return list;
	}*/

	public void deleteWardSetup(String w_id) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.deleteWardSetup(w_id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deleteQuery(InPatientBean ip) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.deleteQuery(ip);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllRooms(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllRooms(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateRoomsEdit(InPatientBean ipBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.updateRoomsEdit(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deleteWardRoom(String r_id) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.deleteWardRoom(r_id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void insertBedId(InPatientBean ipBean) throws DaoException {

		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.insertBedId(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public String getBedId()throws DaoException {
		String bid=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			bid=inpatientDao.getBedId();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return bid;
	}

	public InPatientBean getWardName(InPatientBean ipBean) throws DaoException {
		// TODO Auto-generated method stub
		InPatientBean ip=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			ip=(InPatientBean)inpatientDao.getWardName(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ip;
	}

	public Integer addBedDetails(InPatientBean ipBean)throws DaoException {
		int bid=0;
		try 

		{        	
			eclinicDaoManager.startTransaction();
			bid=inpatientDao.addBedDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return bid;
	}

	public ArrayList getBedDetails(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getBedDetails(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList listallrooms(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.listallrooms(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertIntoIPRegistration(RegistrationBean registrationBean)throws DaoException {
		//String ip_no="";
		try {

			if(registrationBean.getPatient_age()!=null && !registrationBean.getPatient_age().equals(""))
			{

			}
			else
			{
				registrationBean.setPatient_age("0");
			}

			if(registrationBean.getPatient_agemonth()!=null && !registrationBean.getPatient_agemonth().equals(""))
			{

			}
			else
			{
				registrationBean.setPatient_agemonth("0");
			}


			if(registrationBean.getPatient_ageweek()!=null && !registrationBean.getPatient_ageweek().equals(""))
			{

			}
			else
			{
				registrationBean.setPatient_ageweek("0");
			}
			if(registrationBean.getTablename()==null)
				registrationBean.setTablename("ip_registration");
			eclinicDaoManager.startTransaction();
			inpatientDao.insertIntoIPRegistration(registrationBean);


			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	/*	public void insertIntoIPAdmission(RegistrationBean registrationBean) throws DaoException {
		try 
		{        	
      	eclinicDaoManager.startTransaction();
      	inpatientDao.insertIntoIPAdmission(registrationBean);
      	eclinicDaoManager.commitTransaction();

      } 
      catch (DaoException e) 
		{
          try 
			{
          	eclinicDaoManager.rollbackTransaction();
          } 
          catch (Exception e2) 
			{
          }
          throw ((DaoException) e.fillInStackTrace());
      }
	}*/



	public ArrayList getAllWardsByDep(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllWardsByDep(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getAllIPDetails(InPatientBean ipBean) throws DaoException {
		InPatientBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getAllIPDetails(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList checkBedAvail(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.checkBedAvail(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void addBedAllocation(InPatientBean ipBean)throws DaoException {

		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.addBedAllocation(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void addWardType(InPatientBean ipBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.addWardType(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void addroomCategory(InPatientBean ipBean)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.addroomCategory(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getWardRoomById(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getWardRoomById(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public String getbedCount(InPatientBean ipBean) throws DaoException 
	{
		String bc = "";
		try 
		{        	
			eclinicDaoManager.startTransaction();
			bc=inpatientDao.getbedCount(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return bc;
	}



	public String getTotalBedCnt(InPatientBean ipBean) throws DaoException 
	{
		String bc = "";
		try 
		{        	
			eclinicDaoManager.startTransaction();
			bc=inpatientDao.getTotalBedCnt(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return bc;
	}

	public String getoccbed_cnt(InPatientBean ipBean)throws DaoException{
		String occbc = "";
		try 
		{        	
			eclinicDaoManager.startTransaction();
			occbc=inpatientDao.getoccbed_cnt(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return occbc;
	}

	/*public ChartRenderingInfo createPieChart(InPatientBean ipBean,PrintWriter pw, String dir,String val)throws DaoException {

		ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());

		try{			

			int[] data = new int[2];
			String name[] = new String[2];
			int size = 0;

			    String f=ipBean.getFreebed_count();
			    String o=ipBean.getOccbed_count();
			    int frb=Integer.parseInt(f);
			    int occ=Integer.parseInt(o);

				data[0] = frb;
				data[1]= occ;
				name[0]="Unoccupied Beds";
				name[1]="Occupied Beds";
				size=2;
				String wardname=ipBean.getWard_name();
				String title = "Ward Occupancy in "+wardname;
				Piechart pieChart = new Piechart(title);				
				pieChart.createDataset(data,name,size);
				JFreeChart chart = pieChart.createChart();

				info = new ChartRenderingInfo(new StandardEntityCollection());     

				File file1 = new File(dir,"wardoccup_"+val+".png");
				 ChartUtilities.saveChartAsPNG(file1, chart,400,250, info);
	            ChartUtilities.writeImageMap(pw, "wardoccup", info,true);
		        pw.flush();



	            return info;

		}
	catch(Exception e){
		e.printStackTrace();
		System.out.println(e);
		return info;
	}


	}*/


	public void cleanDirectory(String dir){
		try{
			File folder = new File(dir);
			File fList[] = folder.listFiles();
			for (int i = 0; i < fList.length; i++) {
				File pes = fList[i];
				if (pes.getName().endsWith(".png")) {
					fList[i].delete();			    
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	public InPatientBean getWardOccupancy(InPatientBean ipBean)throws DaoException {
		InPatientBean ip =null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			ip=(InPatientBean)inpatientDao.getWardOccupancy(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ip;
	}

	public String insertIPDoctorConsult(RegistrationBean registrationBean)throws DaoException {
		String consid=null;
		try 
		{ 

			if(registrationBean.getPatient_age()==null)
				registrationBean.setPatient_age("0");
			if(registrationBean.getPatient_agemonth()==null)
				registrationBean.setPatient_agemonth("0");
			if(registrationBean.getPatient_ageweek()==null)
				registrationBean.setPatient_ageweek("0");

			if(registrationBean.getBilled_to()==null)
				registrationBean.setBilled_to("P");

			/*if(registrationBean.getVisit_status()==null)
				registrationBean.setVisit_status("N");*/

			if(registrationBean.getInsurar_id()==null || registrationBean.getInsurar_id().equals(""))
				registrationBean.setInsurar_id("0");

			if(registrationBean.getTablename()==null)
				registrationBean.setTablename("doctor_consult");

			registrationBean.setOp_number(registrationBean.getIp_number());
			registrationBean.setVisit_type("N");

			eclinicDaoManager.startTransaction();
			inpatientDao.insertIPDoctorConsult(registrationBean);
			//registrationBean.setQuery("select max(consult_id) from "+registrationBean.getTablename());
			parameterBean = new ParameterBean();
			parameterBean.setField_name("consult_id");
			parameterBean.setTable_name(registrationBean.getTablename());
			consid=commonDao.getCommonMaxValue(parameterBean);
			parameterBean=null;
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return consid;
	}



	public ArrayList getAllDoctorsForIP(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllDoctorsForIP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<InPatientBean> getAllIPListSearch(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)inpatientDao.getAllIPListSearch(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllInsurarNetwork4IP(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllInsurarNetwork4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getAllIPDetailsForEdit(InPatientBean ipBean)throws DaoException {
		InPatientBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			/*if(ipBean.getAdmited_doctor()==null || (ipBean.getAdmited_doctor()!=null && ipBean.getAdmited_doctor().equals("")))
				ipBean.setAdmited_doctor("Y");*/
			list=inpatientDao.getAllIPDetailsForEdit(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateIPDetails(InPatientBean ipBean)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.updateIPDetails(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateipDoctorConsult(InPatientBean ipBean)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.updateipDoctorConsult(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}// TODO Auto-generated method stub

	}

	public ArrayList getIdWiseDocsAttached4IP(DocumentDetailBean docBean)throws DaoException  {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getIdWiseDocsAttached4IP(docBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertContactInfo(InPatientBean ipBean)throws DaoException  {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.insertContactInfo(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}// TODO Auto-generated method stub

	}

	public ArrayList getAllContactInfo(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list = inpatientDao.getAllContactInfo(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<VitalSignsBean> getVitalSigns4IP(VitalSignsBean vitalSignsBean) throws DaoException {
		ArrayList<VitalSignsBean> vitalList = new ArrayList<VitalSignsBean>();
		try {
			eclinicDaoManager.startTransaction();
			vitalList=inpatientDao.getVitalSigns4IP(vitalSignsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return vitalList;
	}

	public ArrayList getAllDietHistory4IP(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllDietHistory4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<InPatientBean> getAllNurseStatements4IP(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)ipConsultDao.getAllNurseStatements4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<InPatientBean> getAllConsultDiagnosis4IP(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			if(ipBean.getData_status()==null)
				ipBean.setData_status("F");
			list=(ArrayList<InPatientBean>)ipConsultDao.getAllConsultDiagnosis4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getConsultDiagnosisById(InPatientBean ipBean) throws DaoException {
		InPatientBean diagBean=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			diagBean=(InPatientBean)ipConsultDao.getConsultDiagnosisById(ipBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return diagBean;
	}


	public ArrayList<InPatientBean> getAllConsultProcedure4IP(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)inpatientDao.getAllConsultProcedure4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllDevelopmentHistory4IP(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllDevelopmentHistory4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public ArrayList getAllNonConfStatements4IP(InPatientBean ipBean) throws DaoException{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllNonConfStatements4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<InPatientBean> getAllConsultMedicine4IP(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipConsultDao.getAllConsultMedicine4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getAllDocumentTypesByPat4IP(DocumentDetailBean docBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllDocumentTypesByPat4IP(docBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<InPatientBean> getAllConsultLabTest4IP(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)inpatientDao.getAllConsultLabTest4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getEditIpNumber(String ipno)throws DaoException {
		InPatientBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getEditIpNumber(ipno);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllConsultationIPList(InPatientBean ipBean1)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getAllConsultationIPList(ipBean1);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getIPHistory(InPatientBean ipBean2) throws DaoException {
		InPatientBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getIPHistory(ipBean2);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getPresentComplaints(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getPresentComplaints(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public void insertNonConfStatement4IP(InPatientBean ipBean)throws DaoException {
		// TODO Auto-generated method stub
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.insertNonConfStatement4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateip_history(InPatientBean ipBean)throws DaoException  {
		// TODO Auto-generated method stub
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.updateip_history(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void insertAttachDocument4IP(DocumentDetailBean registrationBean) throws DaoException {

		try {

			eclinicDaoManager.startTransaction();
			inpatientDao.insertAttachDocument4IP(registrationBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void saveVitalSigns(InPatientBean ipBean) throws DaoException {
		try {

			eclinicDaoManager.startTransaction();

			inpatientDao.saveVitalSigns(ipBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllPrescribedDates(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getAllPrescribedDates(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllVital4PrescribedDates(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getAllVital4PrescribedDates(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public void insertConfStatement4IP(InPatientBean ipBean,HttpServletRequest request) throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			inpatientDao.insertConfStatement4IP(ipBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ipBean, request, "INSERT", "Added Notes From Doctor's/Nurse's Workbench", ipBean.getIp_number(), ipBean.getConsult_id(),
					ipBean.getTablename());


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public ArrayList<InPatientBean> getAllMedicines4Search4IP(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=ipConsultDao.getAllMedicines4Search4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<InPatientBean> getAllMedGrpByDoc4IP(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=ipConsultDao.getAllMedGrpByDoc4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertMedicinesUnderGrp4IP(InPatientBean ipBean) throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			ipConsultDao.insertMedicinesUnderGrp4IP(ipBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList<InPatientBean> getAllMedicines4SearchByGrp4IP(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=ipConsultDao.getAllMedicines4SearchByGrp4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertConsultMedicine4IP(InPatientBean ipBean)throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			ipConsultDao.insertConsultMedicine4IP(ipBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertMedicineConsumption(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.insertMedicineConsumption(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<InPatientBean> getMedicineConsumption(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=ipConsultDao.getMedicineConsumption(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<InPatientBean> getMedicineConsumptionGrouped(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=ipConsultDao.getMedicineConsumptionGrouped(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllPrescribedDates4Med(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getAllPrescribedDates4Med(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllPrescribedDates4Present(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getAllPrescribedDates4Present(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllPresentCompl4IP(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getAllPresentCompl4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertPresentComp(InPatientBean ipBean)throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			inpatientDao.insertPresentComp(ipBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public ArrayList getAllDiagnosisCode4IP(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getAllDiagnosisCode4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllGrpByDoc4IP(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getAllGrpByDoc4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllFavouriteItems4SearchByGrp4IP(InPatientBean ipBean)throws DaoException {
		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getAllFavouriteItems4SearchByGrp4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertConsultDiagnosis4IP(InPatientBean ipBean,HttpServletRequest request)throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			ipConsultDao.insertConsultDiagnosis4IP(ipBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ipBean, request, "INSERT", "Added one Final Diagnosis Entry", ipBean.getIp_number(), ipBean.getConsult_id(), "consult_diagnosis");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deleteConsultDiagnosis4IP(InPatientBean ipBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.deleteConsultDiagnosis4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList getAllLabTestList4InsurNetwork4IP(InPatientBean ipBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) inpatientDao.getAllLabTestList4InsurNetwork4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllLabTestList4Insur4IP(InPatientBean ipBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) inpatientDao.getAllLabTestList4Insur4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabTestList4IP(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllLabTestList4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getLabTestInsDetailByNetwork4IP(InPatientBean ipBean) throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getLabTestInsDetailByNetwork4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public InPatientBean getLabTestInsDetailByID4IP(InPatientBean ipBean)throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getLabTestInsDetailByID4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public InPatientBean getLabTestDetailByID4IP(InPatientBean ipBean)throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getLabTestDetailByID4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertConsultLabTest4IP(InPatientBean ipBean,HttpServletRequest request,UserBean userBean) throws DaoException 
	{
		try {
			DecimalFormat df=new DecimalFormat("#########.00");
			if(ipBean.getTablename()==null)
				ipBean.setTablename("consult_labtest");

			if(Double.parseDouble(ipBean.getGross_amt())==0)
			{
				ipBean.setGross_amt(ipBean.getLabtest_price());
				ipBean.setCorp_disc("0");
			}

			double vat_amount = 0.00;
			if(ipBean.getVat_percent()!=null && Double.parseDouble(ipBean.getVat_percent())>0)
			{
				double vat_percent = Double.parseDouble(ipBean.getVat_percent());					
				double patient_share = 0.0;
				if (ipBean.getDeductible() != null && Double.parseDouble(ipBean.getDeductible())>0)
					patient_share = Double.parseDouble(ipBean.getDeductible());
				if (ipBean.getCopay_amt() != null && Double.parseDouble(ipBean.getCopay_amt())>0)
					patient_share = patient_share + Double.parseDouble(ipBean.getCopay_amt());
				if(patient_share>0){
					vat_amount = (patient_share * vat_percent)/100;
				}
			}
			ipBean.setVat_amount(""+vat_amount);
			
			if(ipBean.getPrice_set_status()==null)
				ipBean.setPrice_set_status("Y");

			if(ipBean.getRemarks()!=null && (ipBean.getRemarks().equals("") || ipBean.getRemarks().equalsIgnoreCase("null")))
				ipBean.setRemarks(null);

			eclinicDaoManager.startTransaction();
			/*** Check if VAT is applicable for Locals***/
			if(userBean.getVat_for_locals()!=null && userBean.getVat_for_locals().equals("N"))
			{
			RegistrationBean registrationBean = new RegistrationBean();
			RegistrationBean countryBean = new RegistrationBean();
			registrationBean.setConsult_id(ipBean.getConsult_id());
			countryBean = registrationDao.getPatientCountryDetails(registrationBean);
			countryBean.setCountry_id(userBean.getDef_country());
			registrationBean.setVat_amount(ipBean.getVat_amount());
			businessLogic.checkVATApplicableForLocal(countryBean,registrationBean);
			ipBean.setVat_amount(registrationBean.getVat_amount());
			}
			/*** Check if VAT is applicable for Locals***/
			if(ipBean.getTablename().equals("consult_labtest"))
			{
				RegistrationBean labtestBean = new RegistrationBean();	
				labtestBean.setLabtest_id(ipBean.getLabtest_id());
				labtestBean.setOffice_id(ipBean.getOffice_id());
				labtestBean = registrationDao.getEditTestSetup(labtestBean);
				if(labtestBean!=null){
					double cost_price=0;
					if(ipBean.getGross_amt()==null || ipBean.getGross_amt().equals("") || labtestBean.getCost_price()==null || labtestBean.getCost_price().equals("") || labtestBean.getCostPrice_type()==null)
						cost_price=0;
					else
					{
						if(labtestBean.getCostPrice_type()!=null && labtestBean.getCostPrice_type().equalsIgnoreCase("1"))
						{	
							labtestBean.setCost_price(""+Double.parseDouble(labtestBean.getCost_price())*(Double.parseDouble(ipBean.getQuantity())));
							cost_price = Double.parseDouble(labtestBean.getCost_price());
						}						
						else
						{
							cost_price = (Double.parseDouble(ipBean.getGross_amt())-(Double.parseDouble(ipBean.getGross_amt())*Double.parseDouble(labtestBean.getCost_price())/100));
						}
					}
					ipBean.setCost_price(df.format(cost_price));
				}
			}

			if(ipBean.getDoctor_view()!=null && ipBean.getDoctor_view().equals("true"))
			{
				ipBean.setTablename("consult_labtest_request");
				inpatientDao.insertConsultLabTest4IP(ipBean);

				/*ipBean.setQuery("select id from consult_labtest_request where consult_id = '"+ipBean.getConsult_id()+"' and labtest_id ='"+ipBean.getLabtest_id()+"' order by id desc limit 1" );
				String req_id = inpatientDao.isAlreadyExist(ipBean);*/
				
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("consult_labtest_request");
				parameterBean.setConsult_id(ipBean.getConsult_id());
				parameterBean.setLabtest_id(ipBean.getLabtest_id());
				String req_id = commonDao.fetchRequestId(parameterBean);
				parameterBean=null;
				
				if(req_id!=null && !req_id.equals(""))
				{
					ipBean.setRequest_id(req_id);

					/*ipBean.setQuery("update consult_labtest_request set billed_status='Y' where id='" + req_id + "'");
					inpatientDao.deleteQuery(ipBean);*/
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("consult_labtest_request");
					parameterBean.setField_name("billed_status='Y'");
					parameterBean.setField_name1("id='" + req_id + "'");
					commonDao.updateQueryInCommon(parameterBean);
					parameterBean=null;
				}
			}

			ipBean.setTablename("consult_labtest");
			inpatientDao.insertConsultLabTest4IP(ipBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ipBean, request, "INSERT", "Added an Investigation from IP Doctor's Workbench/Billing", ipBean.getIp_number(),ipBean.getConsult_id(),"consult_labtest");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllProcedureList4InsurNetwork4IP(InPatientBean ipBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) inpatientDao.getAllProcedureList4InsurNetwork4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllProcedureList4Insur4IP(InPatientBean ipBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) inpatientDao.getAllProcedureList4Insur4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllProcedureList4IP(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllProcedureList4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getProcedureDetailInsByNetwork4IP(InPatientBean ipBean)throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getProcedureDetailInsByNetwork4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public InPatientBean getProcedureDetailInsByID4IP(InPatientBean ipBean)throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getProcedureDetailInsByID4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public InPatientBean getProcedureDetailByID4IP(InPatientBean ipBean)throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getProcedureDetailByID4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertConsultProcedure4IP(InPatientBean ipBean,HttpServletRequest request,UserBean userBean)throws DaoException 
	{
		try {
			DecimalFormat df=new DecimalFormat("#########.00");
			if(ipBean.getTablename()==null)
				ipBean.setTablename("consult_procedure");

			if(Double.parseDouble(ipBean.getGross_amt())==0){
				ipBean.setGross_amt(ipBean.getProcedure_price());
				ipBean.setCorp_disc("0");
			}
			
			if(request.getParameter("vatOpt")!=null && !request.getParameter("vatOpt").equals("") && request.getParameter("vatOpt").equals("Y"))
				ipBean.setVat_percent(request.getParameter("vat_per"));
			double vat_amount = 0.00;
			if(ipBean.getVat_percent()!=null && Double.parseDouble(ipBean.getVat_percent())>0)
			{
				double vat_percent = Double.parseDouble(ipBean.getVat_percent());					
				double patient_share = 0.0;
				if (ipBean.getDeductible() != null && Double.parseDouble(ipBean.getDeductible())>0)
					patient_share = Double.parseDouble(ipBean.getDeductible());
				if (ipBean.getCopay_amt() != null && Double.parseDouble(ipBean.getCopay_amt())>0)
					patient_share = patient_share + Double.parseDouble(ipBean.getCopay_amt());
				if(patient_share>0){
					vat_amount = (patient_share * vat_percent)/100;
				}
			}else{
				ipBean.setVat_percent("0.00");
			}
			ipBean.setVat_amount(""+vat_amount);

			if(ipBean.getRemarks()!=null && (ipBean.getRemarks().equals("") || ipBean.getRemarks().equalsIgnoreCase("null")))
				ipBean.setRemarks(null);

			eclinicDaoManager.startTransaction();

			/*** Check if VAT is applicable for Locals***/
			if(userBean.getVat_for_locals()!=null && userBean.getVat_for_locals().equals("N"))
			{
			RegistrationBean registrationBean = new RegistrationBean();
			registrationBean.setConsult_id(ipBean.getConsult_id());
			RegistrationBean countryBean = new RegistrationBean();
			countryBean = registrationDao.getPatientCountryDetails(registrationBean);
			countryBean.setCountry_id(userBean.getDef_country());
			registrationBean.setVat_amount(ipBean.getVat_amount());
			businessLogic.checkVATApplicableForLocal(countryBean,registrationBean);
			ipBean.setVat_amount(registrationBean.getVat_amount());
			}
			/*** Check if VAT is applicable for Locals***/
			
			if(ipBean.getTablename().equals("consult_procedure"))
			{	
				RegistrationBean procBean = new RegistrationBean();	
				procBean.setProcedure_id(ipBean.getProcedure_id());
				procBean.setOffice_id(ipBean.getOffice_id());
				procBean = registrationDao.getProcedureDetailByID(procBean);
				if(procBean!=null)
				{
					double cost_price=0;
					if(ipBean.getGross_amt()==null || ipBean.getGross_amt().equals("") || procBean.getCost_price()==null || procBean.getCost_price().equals("") || procBean.getCostPrice_type()==null)
						cost_price=0;
					else
					{
						if(procBean.getCostPrice_type().equalsIgnoreCase("1")){
							procBean.setCost_price(""+Double.parseDouble(procBean.getCost_price())*(Double.parseDouble(ipBean.getQuantity())));
							cost_price = Double.parseDouble(procBean.getCost_price());
						}
						else
							cost_price = (Double.parseDouble(ipBean.getGross_amt())*Double.parseDouble(procBean.getCost_price())/100);

						ipBean.setCost_price(df.format(cost_price));
					}
				}
			}
			if(ipBean.getDoctor_view()!=null && ipBean.getDoctor_view().equals("true"))
			{
				ipBean.setTablename("consult_procedure_request");
				inpatientDao.insertConsultProcedure4IP(ipBean);

				/*ipBean.setQuery("select id from consult_procedure_request where consult_id = '"+ipBean.getConsult_id()+"' and procedure_id ='"+ipBean.getProcedure_id()+"' order by id desc limit 1" );
				String req_id = inpatientDao.isAlreadyExist(ipBean);*/
				
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("consult_procedure_request");
				parameterBean.setConsult_id(ipBean.getConsult_id());
				parameterBean.setProcedure_id(ipBean.getProcedure_id());
				String req_id =commonDao.fetchRequestId(parameterBean);
				parameterBean=null;
				
				if(req_id!=null && !req_id.equals(""))
				{
					ipBean.setRequest_id(req_id);

					/*ipBean.setQuery("update consult_procedure_request set billed_status='Y' where id='" + req_id + "'");
					inpatientDao.deleteQuery(ipBean);*/
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("consult_procedure_request");
					parameterBean.setField_name("billed_status='Y'");
					parameterBean.setField_name1("id='" + req_id + "'");
					commonDao.updateQueryInCommon(parameterBean);
					parameterBean=null;
				}
			}

			ipBean.setTablename("consult_procedure");
			inpatientDao.insertConsultProcedure4IP(ipBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void insertFollowup_Details(InPatientBean ipBean) throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			inpatientDao.insertFollowup_Details(ipBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getFollowupDetails(String id) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getFollowupDetails(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<InPatientBean> getPreviousBedDetails(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)inpatientDao.getPreviousBedDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getBedAllocationDetails(InPatientBean ipBean) throws DaoException {
		InPatientBean list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=inpatientDao.getBedAllocationDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateVitalSigns(InPatientBean ipBean) throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			inpatientDao.updateVitalSigns(ipBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public InPatientBean getIPConsultDetailByID(InPatientBean ipBean)throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getIPConsultDetailByID(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getPreviousBedRates(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getPreviousBedRates(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getDeduct(InPatientBean ipBean)throws DaoException {
		InPatientBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(InPatientBean)inpatientDao.getDeduct(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getDeductTreatment(InPatientBean ipBean) throws DaoException {
		InPatientBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(InPatientBean)inpatientDao.getDeductTreatment(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public synchronized String insertProvBill4IP(InPatientBean ipBean) throws DaoException {
		String ab=null;
		String billId=null;
		try {
			eclinicDaoManager.startTransaction();
			if(ipBean.getBill_type().equals("P")) {
				/*ipBean.setQuery("SELECT max(0+bill_no)+1 FROM ip_bill_generated where bill_type='P' and office_id='"+ipBean.getOffice_id()+"'");*/
				parameterBean = new ParameterBean();
				parameterBean.setField_name(" bill_no");
				parameterBean.setTable_name("ip_bill_generated");
				parameterBean.setBill_type("P");
				parameterBean.setOffice_id(ipBean.getOffice_id());
			}else {
				/*ipBean.setQuery("SELECT max(0+bill_no)+1 FROM ip_bill_generated where bill_type='F' and office_id='"+ipBean.getOffice_id()+"'");*/
				parameterBean = new ParameterBean();
				parameterBean.setField_name(" bill_no");
				parameterBean.setTable_name("ip_bill_generated");
				parameterBean.setBill_type("F");
				parameterBean.setOffice_id(ipBean.getOffice_id());
			}
			/*ab=inpatientDao.isAlreadyExist(ipBean);*/
			ab=commonDao.fetchMaxNextNum(parameterBean);
			parameterBean=null;
			if(ab==null)
			{
				ab="1";
			}
			ipBean.setBill_no(ab);
			ipBillingDao.insertProvBill4IP(ipBean);
			billId = ipBillingDao.getLastInsertBillId();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return billId;
	}

	public synchronized String insertReceiptVoucher4IP(InPatientBean ipBean) throws DaoException {
		String ab=null;
		try {
			eclinicDaoManager.startTransaction();
			/*ipBean.setQuery("SELECT max(0+receipt_no)+1 FROM ip_receipt_generated");
			ab=inpatientDao.isAlreadyExist(ipBean);*/
			
			parameterBean = new ParameterBean();
			parameterBean.setField_name(" receipt_no");
			parameterBean.setTable_name("ip_receipt_generated");
			ab=commonDao.fetchMaxNextNum(parameterBean);
			parameterBean=null;
			if(ab==null)
			{
				ab="1";
			}
			ipBean.setReceipt_no(ab);
			ipBillingDao.insertReceiptVoucher4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ab;
	}

	public void updateReceiptBill4IP(InPatientBean ipBean) throws DaoException {


		try {
			eclinicDaoManager.startTransaction();

			inpatientDao.updateReceiptBill4IP(ipBean);
			inpatientDao.isAlreadyExist(ipBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public InPatientBean getConsultReceiptDetailByID4IP(InPatientBean ipBean)throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipBillingDao.getConsultReceiptDetailByID4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getAllConsultLabTest4IPPaid(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllConsultLabTest4IPPaid(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllConsultProcedure4IPPaid(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllConsultProcedure4IPPaid(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getPreviousBedRatesPaid(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getPreviousBedRatesPaid(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public InPatientBean getroomBedId(InPatientBean ipBean) throws DaoException {

		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getroomBedId(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;

		// TODO Auto-generated method stub

	}

	public ArrayList<InPatientBean> getAllProvBillDetails(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)ipBillingDao.getAllProvBillDetails(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getallipBillServices(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getallipBillServices(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getConsultReceiptVouchDetailByID4IP(InPatientBean ipBean) throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipBillingDao.getConsultReceiptVouchDetailByID4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getbalance_due(InPatientBean ipBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getbalance_due(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getPrevious_due(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getPrevious_due(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public String insertFinalBill4IP(InPatientBean ipBean)  throws DaoException {
		String ab=null;
		try {
			eclinicDaoManager.startTransaction();

			/*ipBean.setQuery("SELECT max(0+bill_no)+1 FROM ipbill_generated");
			ab=inpatientDao.isAlreadyExist(ipBean);*/
			
			parameterBean = new ParameterBean();
			parameterBean.setField_name(" bill_no");
			parameterBean.setTable_name("ip_bill_generated");
			ab=commonDao.fetchMaxNextNum(parameterBean);
			parameterBean=null;

			if(ab==null)
			{
				ab="1";
			}
			ipBean.setBill_no(ab);
			inpatientDao.insertFinalBill4IP(ipBean);
			//ab=ab+"~"+registrationDao.getLastInsertBillId();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ab;
	}

	public InPatientBean getFinalBillDetails(InPatientBean ipBean) throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getFinalBillDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getFinalBill(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getFinalBill(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateFinalReceiptBill4IP(InPatientBean ipBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();

			inpatientDao.updateFinalReceiptBill4IP(ipBean);
			inpatientDao.isAlreadyExist(ipBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateProcedureOffice(SetupBean setupBean)throws DaoException {

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateProcedureOffice(setupBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given for updateProcedure(). No need of audit log here to avoid duplication */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void insertProcedureOffice(SetupBean setupBean) throws DaoException {

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertProcedureOffice(setupBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public ArrayList getAllProcedureMaster(SetupBean setupBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllProcedureMaster(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public RegistrationBean getAllProcedureMasterById(RegistrationBean regBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllProcedureMasterById(regBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getAllUnaddedProcedureMaster(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) setupDao.getAllUnaddedProcedureMaster(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllIPPatientsAfterRegistration(InPatientBean ipBean) throws DaoException  {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllIPPatientsAfterRegistration(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getAllContactInfoById(InPatientBean ipBean) throws DaoException  {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getAllContactInfoById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateContactDetails4IP(InPatientBean ipBean)throws DaoException  {

		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.updateContactDetails4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList<InPatientBean> getBedStatusList(InPatientBean ipBean)throws DaoException  {
		ArrayList countList=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			countList=(ArrayList)inpatientDao.getBedStatusList(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return countList;
	}

	public ArrayList getAllWardroomDetails(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllWardroomDetails(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public ArrayList getAllBedAlotmentList(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)inpatientDao.getAllBedAlotmentList(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<InPatientBean> getAllBedBlockedDates(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)inpatientDao.getAllBedBlockedDates(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public synchronized String insertIntoIPAdmission(InPatientBean ipBean) throws DaoException 
	{
		//String ipno=null;
		if(ipBean.getTablename()==null)
			ipBean.setTablename("ip_admission");
		try {
			eclinicDaoManager.startTransaction();
			/*if(ab.equals("N"))
			{

				//For Normal Number Sequence
				//ipBean.setQuery("SELECT max(0+ip_number)+1 FROM "+ipBean.getTablename()+"");

				//For Rosary
				//ipBean.setQuery("SELECT max(1+mid(ip_number,2)) FROM "+ipBean.getTablename()+"  where direct_lab='N'");

				//For Oriana 
				//ipBean.setQuery("SELECT max(1+mid(ip_number,7)) FROM "+ipBean.getTablename()+"  where direct_lab='N'");

				//For Al Tadawi
				ipBean.setQuery("SELECT max(1+mid(ip_number,5)) FROM "+ipBean.getTablename()+"  where office_id='"+ipBean.getOffice_id()+"'");

				//For Al Rami
				//ipBean.setQuery("SELECT max(1+mid(ip_number,6)) FROM "+ipBean.getTablename()+"  where direct_lab='N'");

				//For RAK Medical Center
				//ipBean.setQuery("SELECT max(1+mid(ip_number,4)) FROM "+ipBean.getTablename()+"  where direct_lab='N'");

				//For Al Shams Medical Center
				//ipBean.setQuery("SELECT max(1+mid(ip_number,4)) FROM "+ipBean.getTablename()+"  where direct_lab='N' and op_number like 'SMC%'");

				//For Marina Medical Center
				//ipBean.setQuery("SELECT max(1+mid(ip_number,3)) FROM "+ipBean.getTablename()+"  where direct_lab='N' and op_number like 'MM%'");
			}
			else
			{
				ipBean.setQuery("SELECT max(1+mid(ip_number,"+(cd.length()+1)+")) FROM "+ipBean.getTablename()+"  where  department_id="+ipBean.getDepartment_id());

				//ipBean.setQuery("SELECT max(1+mid(ip_number,2)) FROM "+ipBean.getTablename()+" where department_id="+ipBean.getDepartment_id());
				//ipBean.setQuery("SELECT max(1+mid(ip_number,3)) FROM "+ipBean.getTablename()+"  where direct_lab='N'");

				//For Rosary
				//ipBean.setQuery("SELECT max(1+mid(ip_number,2)) FROM "+ipBean.getTablename()+"  where direct_lab='N'");

				//For Oriana 
				//ipBean.setQuery("SELECT max(1+mid(ip_number,7)) FROM "+ipBean.getTablename()+"  where direct_lab='N'");

				//For Al Tadawi
				ipBean.setQuery("SELECT max(1+mid(ip_number,5)) FROM "+ipBean.getTablename()+"  where office_id='"+ipBean.getOffice_id()+"'");

				//For Al Rami
				//ipBean.setQuery("SELECT max(1+mid(ip_number,6)) FROM "+ipBean.getTablename()+"  where direct_lab='N'");

				//For RAK Medical Center
				//ipBean.setQuery("SELECT max(1+mid(ip_number,4)) FROM "+ipBean.getTablename()+"  where direct_lab='N'");

				//For Al Shams Medical Center
				//ipBean.setQuery("SELECT max(1+mid(ip_number,4)) FROM "+ipBean.getTablename()+"  where direct_lab='N' and ip_number like 'SMC%'");

				//For Marina Medical Center
				//ipBean.setQuery("SELECT max(1+mid(ip_number,3)) FROM "+ipBean.getTablename()+"  where direct_lab='N' and ip_number like 'MM%'");
			}

			//For Normal
			//DecimalFormat df=new DecimalFormat("0");

			//For Oriana
			//DecimalFormat df1=new DecimalFormat("000000");

			//For Al Tadawi
			DecimalFormat df1=new DecimalFormat("00000000");

			//For Al Rami
			//DecimalFormat df1=new DecimalFormat("00000");

			//For RAK Medical center
			//DecimalFormat df1=new DecimalFormat("000000");

			//For Al Shams Medical center
			//DecimalFormat df1=new DecimalFormat("0000");

			//For Marina Medical center
			//DecimalFormat df1=new DecimalFormat("0000");

			ipno=inpatientDao.isAlreadyExist(ipBean);
			if(ipno==null)
			{
				if(ab.equals("Y") || (cd!=null && !cd.equals("") && !cd.equals("null")))
				{
					ipno=cd+"1";
				}
				else
				{
					ipno="1";
				}

				if(ab.equals("Y"))
		{
			opno=cd+"0001";
		}
		else
		{
			opno="MC0001";
		}
			}
			else
			{
				if(ab.equals("Y") || (cd!=null && !cd.equals("") && !cd.equals("null")))
				{
					//ipno=cd+ipno;

					//ipno=cd+"-"+df1.format(Integer.parseInt(ipno));//for Oriana

					ipno=cd+df1.format(Integer.parseInt(ipno));//for Tadawi

					//ipno=cd+df1.format(Integer.parseInt(ipno));//for RAK Medical Center

					//ipno=cd+"-"+df1.format(Integer.parseInt(ipno));//for Al Rami

					//ipno=cd+df1.format(Integer.parseInt(ipno));//for Al Shams Medical Center

					//ipno=cd+df1.format(Integer.parseInt(ipno));//for Marina Medical Center
				}

				if(ab.equals("Y"))
	{
		opno=cd+""+df.format(Integer.parseInt(ipno));
	}

			}*/

			//ipBean.setIp_number(ipno);
			inpatientDao.insertIntoIPAdmission(ipBean);	
			eclinicDaoManager.commitTransaction();


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		//return ipno;
		return ipBean.getIp_number();
	}

	public void insertIPBedStatus(InPatientBean ipBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			inpatientDao.insertIPBedStatus(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public List<VitalSignsBean> getVitalSignsNormalRanges4IP(VitalSignsBean vitalSignsBean) throws DaoException {
		List<VitalSignsBean> list=null;
		try {
			eclinicDaoManager.startTransaction();
			list=(List<VitalSignsBean>)ipConsultDao.getVitalSignsNormalRanges4IP(vitalSignsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<HistoryPresentIllBean> getAllROS4IP(HistoryPresentIllBean hpiBean) throws DaoException 
	{
		ArrayList list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)ipConsultDao.getAllROS4IP(hpiBean);
			eclinicDaoManager.commitTransaction();

		}catch (DaoException e){
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<InPatientBean> getAllPatientExamNotes4IP(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)ipConsultDao.getAllPatientExamNotes4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList listBedManagement(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)inpatientDao.listBedManagement(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertPatientVisitDtls(HistoryPresentIllBean hopiBean,HttpServletRequest request) throws DaoException{
		String last_id = "";
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertPatientVisitDtls(hopiBean);
			last_id = consultationDao.getLastIdVisitDtls();
			eclinicDaoManager.commitTransaction();

			String reg_number = "";
			hopiBean.setSerial_id(last_id);
			hopiBean = getPatientVisitDtlsById(hopiBean);
			if(hopiBean!=null){
				if(hopiBean.getIp_id()!=null && !hopiBean.getIp_id().equals(""))
					reg_number = hopiBean.getIp_number();
				else
					reg_number = hopiBean.getOp_number();
				String log_remark = "Added an entry for " +hopiBean.getSymptoms()+" from Doctor's/Nurse's Workbench";
				auditLogEntry(hopiBean, request, "INSERT", log_remark, reg_number,hopiBean.getConsult_id(),"patient_visit_dtls");
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updatePatientVisitDtls(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updatePatientVisitDtls(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deletePatientVisitDtls(HistoryPresentIllBean historyPresentIllBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.deletePatientVisitDtls(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public List<HistoryPresentIllBean> getPatientVisitDtlsByType(HistoryPresentIllBean historyPresentIllBean) throws DaoException{
		List<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			if(historyPresentIllBean.getType()!=null && historyPresentIllBean.getType().equals("PD")) {
				list =  consultationDao.getAllPDConsultDiagnosis(historyPresentIllBean);
			}
			else
				list =  consultationDao.getPatientVisitDtlsByType(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public HistoryPresentIllBean getPatientVisitDtlsById(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			historyPresentIllBean = consultationDao.getPatientVisitDtlsById(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return historyPresentIllBean;
	}
	public String getNextEntryIdConsultMedicine(InPatientBean ipBean) throws DaoException {
		String entry_id = "";
		try {
			eclinicDaoManager.startTransaction();
			entry_id = ipConsultDao.getNextEntryIdConsultMedicine(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return entry_id;
	}
	public InPatientBean getConsultMedicineById4IP(InPatientBean ipBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipBean = ipConsultDao.getConsultMedicineById4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ipBean;
	}
	public ArrayList getAllInternalReferal4IP(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)inpatientDao.getAllInternalReferal4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertIPInternalReferal(InPatientBean ipBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.insertIPInternalReferal(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public List<PurchaseBean> getAllMedStockPatientWise(PurchaseBean purchaseBean) throws DaoException {
		List<PurchaseBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<PurchaseBean>)ipConsultDao.getAllMedStockPatientWise(purchaseBean);
			eclinicDaoManager.commitTransaction();

		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllConsumables4IP(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)inpatientDao.getAllConsumables4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getAllProcedureTotalById(InPatientBean ipBean) throws DaoException 
	{
		InPatientBean procBean = new InPatientBean();
		List<InPatientBean> procList = new ArrayList<InPatientBean>();
		try{        	
			eclinicDaoManager.startTransaction();
			procList = ipBillingDao.getAllProcedureTotalById(ipBean);
			if(procList!=null && procList.size()>0)
			{
				for(InPatientBean serviceBean : procList)
				{
					if(serviceBean.getPackage_status().equals("Y"))
					{
						procBean.setPack_procedure_price(serviceBean.getProcedure_price());
						procBean.setPack_copay_amt(serviceBean.getCopay_amt());
						procBean.setPack_deductible(serviceBean.getDeductible());
						procBean.setPack_corp_disc(serviceBean.getCorp_disc());
						procBean.setPack_differ_amt(serviceBean.getDiffer_amt());
						procBean.setPack_gross_amt(serviceBean.getGross_amt());
						procBean.setPack_vat_amount(serviceBean.getVat_amount());
						procBean.setPack_vat_ins_amount(serviceBean.getVat_ins_amount());
					}
					else
					{
						procBean.setProcedure_price(serviceBean.getProcedure_price());
						procBean.setCopay_amt(serviceBean.getCopay_amt());
						procBean.setDeductible(serviceBean.getDeductible());
						procBean.setCorp_disc(serviceBean.getCorp_disc());
						procBean.setDiffer_amt(serviceBean.getDiffer_amt());
						procBean.setGross_amt(serviceBean.getGross_amt());
						procBean.setVat_amount(serviceBean.getVat_amount());
						procBean.setVat_ins_amount(serviceBean.getVat_ins_amount());
					}
				}
			}
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return procBean;
	}

	public InPatientBean getAllLabTestTotalById(InPatientBean ipBean) throws DaoException 
	{
		InPatientBean testBean = new InPatientBean();
		List<InPatientBean> testList = new ArrayList<InPatientBean>();
		try {        	
			eclinicDaoManager.startTransaction();
			testList = ipBillingDao.getAllLabTestTotalById(ipBean);
			if(testList!=null && testList.size()>0)
			{
				for(InPatientBean serviceBean : testList)
				{
					if(serviceBean.getPackage_status().equals("Y"))
					{
						testBean.setPack_procedure_price(serviceBean.getLabtest_price());
						testBean.setPack_copay_amt(serviceBean.getCopay_amt());
						testBean.setPack_deductible(serviceBean.getDeductible());
						testBean.setPack_corp_disc(serviceBean.getCorp_disc());
						testBean.setPack_differ_amt(serviceBean.getDiffer_amt());
						testBean.setPack_gross_amt(serviceBean.getGross_amt());
						testBean.setPack_vat_amount(serviceBean.getVat_amount());
						testBean.setPack_vat_ins_amount(serviceBean.getVat_ins_amount());
					}
					else
					{
						testBean.setLabtest_price(serviceBean.getLabtest_price());
						testBean.setCopay_amt(serviceBean.getCopay_amt());
						testBean.setDeductible(serviceBean.getDeductible());
						testBean.setCorp_disc(serviceBean.getCorp_disc());
						testBean.setDiffer_amt(serviceBean.getDiffer_amt());
						testBean.setGross_amt(serviceBean.getGross_amt());
						testBean.setVat_amount(serviceBean.getVat_amount());
						testBean.setVat_ins_amount(serviceBean.getVat_ins_amount());
					}
				}
			}
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return testBean;
	}

	public void insertPreDischargeEntry(InPatientBean ipBean,HttpServletRequest request) throws DaoException{
		//String last_id = "";
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.insertPreDischargeEntry(ipBean);
			eclinicDaoManager.commitTransaction();

			if(ipBean!=null){				
				auditLogEntry(ipBean, request, "INSERT", "Pre Discharge Procedures Started", ipBean.getIp_number(),ipBean.getConsult_id(),"ip_predischarge");
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void cancelPreDischargeEntry(InPatientBean ipBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.cancelPreDischargeEntry(ipBean);
			eclinicDaoManager.commitTransaction();

			String ip_number = ipBean.getIp_number();
			String consult_id = ipBean.getConsult_id();
			ipBean = getPreDischargeEntryById(ipBean);
			if(ipBean!=null){
				//ipBean.setQuery("select user_label from user_setup where user_id='"+ipBean.getCancel_by()+"'");
				ipBean.setCancel_by(common.fetchValueWithSingleParam("user_setup", "user_label", "user_id", ipBean.getCancel_by(), null, null));
				auditLogEntry(ipBean, request, "UPDATE", "Pre Discharge Procedures Cancelled", ip_number,consult_id,"ip_predischarge");
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public List<InPatientBean> getAllPreDischargeEntries(InPatientBean ipBean) throws DaoException{
		List<InPatientBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  ipConsultDao.getAllPreDischargeEntries(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public InPatientBean getPreDischargeEntryById(InPatientBean ipBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipBean = ipConsultDao.getPreDischargeEntryById(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ipBean;
	}

	public void insertChequeDetails4IP(InPatientBean ip)  throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			ipBillingDao.insertChequeDetails4IP(ip);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList<InPatientBean> getAllReceiptDetails4IP(InPatientBean ipBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)ipBillingDao.getAllReceiptDetails4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void cancelReceipt4IP(InPatientBean ipBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			ipBillingDao.cancelReceipt4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void cancelBill4IP(InPatientBean ipBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			ipBillingDao.cancelBill4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void authorizeDischarge(InPatientBean ipBean) throws DaoException {
		try{        	
			eclinicDaoManager.startTransaction();
			ipBillingDao.authorizeDischarge(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void insertCreditNote4IP(InPatientBean ipBean) throws DaoException {
		try{        	
			eclinicDaoManager.startTransaction();
			ipBillingDao.insertCreditNote4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	//Appointment Module Methods - Starts

	public ArrayList<AppointmentBean> getAllResources(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=appointDao.getAllResources(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllResourceTypes(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=appointDao.getAllResourceTypes(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllResourceMasterSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=appointDao.getAllResourceMasterSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllResourceAppointSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=appointDao.getAllResourceAppointSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getResAppointmentSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=appointDao.getResAppointmentSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllNextNAppointSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=appointDao.getAllNextNAppointSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllResAppointSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllResAppointSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<AppointmentBean> getAllResNext4AppointSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllResNext4AppointSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public AppointmentBean getResAppointmentSlotCount (AppointmentBean appointmentBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			appointmentBean = appointDao.getResAppointmentSlotCount(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return appointmentBean;
	}
	public ArrayList<AppointmentBean> getAllResourceAppointments(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=appointDao.getAllResourceAppointments(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	/****** Start By Liju***********************/

	public String isAlreadyExisting(AppointmentBean appointmentBean) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = appointDao.isAlreadyExisting(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList<AppointmentBean> getAllAppointmentSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllAppointmentSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllTimeSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllTimeSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> listAllTimeSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.listAllTimeSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertTimeSlot(AppointmentBean appointmentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			appointDao.insertTimeSlot(appointmentBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(appointmentBean, request, "INSERT", "Added a Time Slot - "+appointmentBean.getTime_slot(),null ,null,"timeslot_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void deleteTimeSlot(AppointmentBean appointmentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{   AppointmentBean oldBean=getTimeslots(appointmentBean);     	
		eclinicDaoManager.startTransaction();
		appointDao.deleteTimeSlot(appointmentBean);
		eclinicDaoManager.commitTransaction();
		auditLogEntry(oldBean, request, "DELETE", "Deleted Time Slot - "+oldBean.getTime_slot(),null ,null,"timeslot_setup");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void updateTimeSlot(AppointmentBean appointmentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{   AppointmentBean oldBean=getTimeslots(appointmentBean);     	
		eclinicDaoManager.startTransaction();
		appointDao.updateTimeSlot(appointmentBean);
		eclinicDaoManager.commitTransaction();
		auditLogEntry(oldBean, request, "UPDATE", "Updated Time Slot - "+oldBean.getTime_slot(),null ,null,"timeslot_setup");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 
	public void activeTimeSlot(AppointmentBean appointmentBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			AppointmentBean oldBean=getTimeslots(appointmentBean);
			eclinicDaoManager.startTransaction();
			appointDao.activateTimeSlot(appointmentBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(oldBean, request, "UPDATE", "Activated Time Slot - "+oldBean.getTime_slot(),null ,null,"timeslot_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deactiveTimeSlot(AppointmentBean appointmentBean, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			AppointmentBean oldBean=getTimeslots(appointmentBean);
			eclinicDaoManager.startTransaction();
			appointDao.deactivateTimeSlot(appointmentBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(oldBean, request, "UPDATE", "Deactivated Time Slot - "+oldBean.getTime_slot(),null ,null,"timeslot_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getTimeSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)appointDao.getTimeSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AppointmentBean> getAllAppointmentSlotsWeek(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllAppointmentSlotsWeek(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<AppointmentBean> getAllResourceType(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllResourceType(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertResourceType(AppointmentBean appointmentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			appointDao.insertResourceType(appointmentBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(appointmentBean, request, "INSERT", "Added a new Resource Type - "+appointmentBean.getResource_type(),null ,null,"resource_Type");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateResourceType(AppointmentBean appointmentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{   AppointmentBean oldbean=getResourceTypeById(appointmentBean);    	
		eclinicDaoManager.startTransaction();
		appointDao.updateResourceType(appointmentBean);
		eclinicDaoManager.commitTransaction();
		auditLogEntry(oldbean, request, "UPDATE", "Updated Resource Type - "+oldbean.getResource_type(),null ,null,"resource_Type");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public void deleteResourceType(AppointmentBean appointmentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{   AppointmentBean oldBean=getResourceTypeById(appointmentBean);    	     	
		eclinicDaoManager.startTransaction();
		appointDao.deleteResourceType(appointmentBean);
		eclinicDaoManager.commitTransaction();
		auditLogEntry(oldBean, request, "DELETE", "Deleted Resource Type - "+oldBean.getResource_type(),null ,null,"resource_Type");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public ArrayList<AppointmentBean> getAllResourceName(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllResourceName(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertResourceName(AppointmentBean appointmentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{    	
			eclinicDaoManager.startTransaction();
			appointDao.insertResourceName(appointmentBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(appointmentBean, request, "INSERT", "Added a new Resource Name - "+appointmentBean.getResource_name(),null ,null,"resource_name");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateResourceName(AppointmentBean appointmentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{    AppointmentBean oldbean=getResourceNameById(appointmentBean);    	
		eclinicDaoManager.startTransaction();
		appointDao.updateResourceName(appointmentBean);
		eclinicDaoManager.commitTransaction();
		auditLogEntry(oldbean, request, "UPDATE", "Updated Resource Name - "+appointmentBean.getResource_name(),null ,null,"resource_name");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 
	public void deleteResourceName(AppointmentBean appointmentBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{   AppointmentBean oldbean=getResourceNameById(appointmentBean);      	
		eclinicDaoManager.startTransaction();
		appointDao.deleteResourceName(appointmentBean);
		eclinicDaoManager.commitTransaction();
		auditLogEntry(oldbean, request, "DELETE", "Deleted Resource Name - "+appointmentBean.getResource_name(),null ,null,"resource_name");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList<AppointmentBean> listAllResourceName(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.listAllResourceName(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<AppointmentBean> getAllResourceSlots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllResourceSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertResourceSlots(AppointmentBean appointmentBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			appointDao.insertResourceSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void insertResourceTimeSlots(AppointmentBean appointmentBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			appointDao.insertResourceTimeSlots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public AppointmentBean getResourceSlot(AppointmentBean appointmentBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			appointmentBean = appointDao.getResourceSlot(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return appointmentBean;
	}

	//Appointment Module Methods - Ends
	public void insertChecklistMaster(InPatientBean ipBean)throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.insertChecklistMaster(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void insertChecklistItem(InPatientBean ipBean)throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.insertChecklistItem(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void insertChecklistOptions(InPatientBean ipBean)throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.insertChecklistOptions(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void insertIPChecklist(InPatientBean ipBean)throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.insertIPChecklist(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void insertIPChecklistDetails(InPatientBean ipBean)throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.insertIPChecklistDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateChecklistItem(InPatientBean ipBean)throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.updateChecklistItem(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public List<InPatientBean> getAllChecklistMaster(InPatientBean ipBean)throws DaoException 
	{
		List<InPatientBean> chkList = null;
		try {
			eclinicDaoManager.startTransaction();
			chkList = inpatientDao.getAllChecklistMaster(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return chkList;
	}
	public InPatientBean getChecklistMasterById(InPatientBean ipBean)throws DaoException 
	{
		InPatientBean chkBean = null;
		try {
			eclinicDaoManager.startTransaction();
			chkBean = inpatientDao.getChecklistMasterById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return chkBean;
	}
	public List<InPatientBean> getChecklistItems(InPatientBean ipBean)throws DaoException 
	{
		List<InPatientBean> chkList = null;
		try {
			eclinicDaoManager.startTransaction();
			chkList = inpatientDao.getChecklistItems(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return chkList;
	}
	public InPatientBean getChecklistItemById(InPatientBean ipBean)throws DaoException 
	{
		InPatientBean chkList = null;
		try {
			eclinicDaoManager.startTransaction();
			chkList = inpatientDao.getChecklistItemById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return chkList;
	}
	public List<InPatientBean> getChecklistItemOptions(InPatientBean ipBean)throws DaoException 
	{
		List<InPatientBean> chkList = null;
		try {
			eclinicDaoManager.startTransaction();
			chkList = inpatientDao.getChecklistItemOptions(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return chkList;
	}
	public InPatientBean getChecklistItemOptionById(InPatientBean ipBean)throws DaoException 
	{
		InPatientBean chkList = null;
		try {
			eclinicDaoManager.startTransaction();
			chkList = inpatientDao.getChecklistItemOptionById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return chkList;
	}
	public List<InPatientBean> getAllChecklistMasterItems(InPatientBean ipBean)throws DaoException 
	{
		List<InPatientBean> chkList = null;
		try {
			eclinicDaoManager.startTransaction();
			chkList = inpatientDao.getAllChecklistMasterItems(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return chkList;
	}
	public InPatientBean getIPChecklistById(InPatientBean ipBean)throws DaoException 
	{
		InPatientBean chkList = null;
		try {
			eclinicDaoManager.startTransaction();
			chkList = inpatientDao.getIPChecklistById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return chkList;
	}

	public void insertIPRoutineCompleted(InPatientBean ipBean)throws DaoException  {
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.insertIPRoutineCompleted(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public ArrayList<String> getAllResidentailAreas(String searchfor) throws DaoException {
		ArrayList<String> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<String>) setupDao.getAllResidentailAreas(searchfor);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertResidenceArea(SetupBean setupBean , HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertResidenceArea(setupBean);
			eclinicDaoManager.commitTransaction();

			if(setupBean!=null){				
				auditLogEntry(setupBean, request, "INSERT", "Added Residence Area " + setupBean.getResidence_area(),null,null,"residence_area_setup");
			}

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void updateResidenceArea(SetupBean setupBean , HttpServletRequest request) throws DaoException 
	{

		try 
		{        
			SetupBean oldBean = getResidenceAreaById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.updateResidenceArea(setupBean);
			eclinicDaoManager.commitTransaction();

			if(oldBean!=null){				
				auditLogEntry(oldBean, request, "UPDATE", "Edited & Updated Residence Area " + setupBean.getResidence_area(),null,null,"residence_area_setup");
			}

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 
	public void deleteResidenceArea(String id , HttpServletRequest request) throws DaoException 
	{

		try 
		{   
			SetupBean oldBean = new SetupBean();
			oldBean.setResidence_area_id(id);
			oldBean = getResidenceAreaById(oldBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteResidenceArea(id);
			eclinicDaoManager.commitTransaction();

			if(oldBean!=null){				
				auditLogEntry(oldBean, request, "DELETE", "Deleted Residence Area " + oldBean.getResidence_area(),null,null,"residence_area_setup");
			}
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void activateResidenceArea(SetupBean setupBean , HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			SetupBean oldBean = getResidenceAreaById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.activateResidenceArea(setupBean);
			eclinicDaoManager.commitTransaction();

			if(oldBean!=null){				
				auditLogEntry(oldBean, request, "UPDATE", "Activated Residence Area " + oldBean.getResidence_area(),null,null,"residence_area_setup");
			}
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deactivateResidenceArea(SetupBean setupBean , HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			SetupBean oldBean = getResidenceAreaById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deactivateResidenceArea(setupBean);
			eclinicDaoManager.commitTransaction();

			if(oldBean!=null){				
				auditLogEntry(oldBean, request, "UPDATE", "DeActivated Residence Area " + oldBean.getResidence_area(),null,null,"residence_area_setup");
			}
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<SetupBean> getAllSponsors4Report(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> spon_list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			spon_list = (ArrayList<SetupBean>)setupDao.getAllSponsors4Report(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return spon_list;
	}
	public ArrayList<RegistrationBean> getAllSponsorLiabInvoices(RegistrationBean setupBean) throws DaoException 
	{
		ArrayList<RegistrationBean> spon_list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			spon_list = (ArrayList<RegistrationBean>)setupDao.getAllSponsorLiabInvoices(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return spon_list;
	}

	public ArrayList getSponLiabAmountForAccounts(SetupBean setBean) throws DaoException {

		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getSponLiabAmountForAccounts(setBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getDiscountHeadAmountForAccounts(SetupBean setBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getDiscountHeadAmountForAccounts(setBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllWrittenoffClaims(RegistrationBean regBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllWrittenoffClaims(regBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllWriteoffServices(RegistrationBean reg) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllWriteoffServices(reg);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	// Find source - sub options START @ 26May 2015
	public ArrayList getFindSourceDet(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getFindSourceDet(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getFindSourcesDetCount(RegistrationBean registrationBean)
			throws DaoException {
		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = (ArrayList) consultationDao
					.getFindSourcesDetCount(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateFindUs(SetupBean setupBean,HttpServletRequest request) throws DaoException {

		try {
			SetupBean oldBean = getFindSourceById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.updateFindUs(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Updated How did you find us From Setup - "+oldBean.getFind_source(),null ,null,"find_sources");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllFindSourcesMaster() throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllFindSourcesMaster();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllFindSourcesOptions(SetupBean setupBean)
			throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllFindSourcesOptions(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertFindUsOptions(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertFindUsOptions(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added find source option From Setup - "+setupBean.getFindus(),null ,null,"find_sourcedet");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteFindUsOptions(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			SetupBean oldBean = new SetupBean();
			oldBean.setFindsrcid(setupBean.getFindus());
			oldBean = getFindUsOptionsById(oldBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteFindUsOptions(setupBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted find source option From Setup - " + oldBean.getFindus(), null, null, "find_sourcedet");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateFindUsOptions(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			SetupBean oldBean = getFindUsOptionsById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.updateFindUsOptions(setupBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Edited & Updated find source option From Setup - " + oldBean.getFindus(), null, null, "find_sourcedet");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}// Find source - sub options END @ 26May 2015

	//Favourites


	public void insertfavourites(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertfavourites(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added Favourites option From Setup - "+setupBean.getfavourites(),null ,null,"medgroup_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}}


	public ArrayList getAllFavourites(SetupBean setupBean)
			throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllFavourites(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updatefavourites(SetupBean setupBean,HttpServletRequest request) throws DaoException {

		try {
			SetupBean oldBean = getFavouriteById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.updatefavourites(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Updated Favourites From Setup - "+oldBean.getMedgroup(),null ,null,"medgroup_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deletefavourites(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			SetupBean oldBean = getFavouriteById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deletefavourites(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted Favourites From Setup - "+oldBean.getMedgroup(),null ,null,"medgroup_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	//Favourites End

	//LabUnit Start

	public ArrayList getAllLabunit(SetupBean setupBean)
			throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllLabunit(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertlabunits(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertlabunits(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added Lab Units From Setup - "+setupBean.getLabunit(),null ,null,"find_sourcedet");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}}

	public void updatelabunit(SetupBean setupBean,HttpServletRequest request) throws DaoException {

		try {
			SetupBean oldBean = getLabUnitById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.updatelabunit(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Updated LabUnits From Setup - "+oldBean.getLabunit(),null ,null,"labunit_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deletelabunit(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			SetupBean oldBean = getLabUnitById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deletelabunit(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted labunit From Setup - "+oldBean.getLabunit(),null ,null,"labunit_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}




	public ArrayList<RegistrationBean> getDHAStatisticsPatientsCount(SetupBean setupBean) throws DaoException 
	{
		ArrayList<RegistrationBean> patientsList=null;
		try{        	
			setupBean.setEncounter_type(" doctor_consult.encounter_type NOT IN ('NC')");

			eclinicDaoManager.startTransaction();
			patientsList=(ArrayList<RegistrationBean>)setupDao.getDHAStatisticsPatientsCount(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return patientsList;
	}
	public ArrayList<SetupBean> getAllCountriesByCategory(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllCountriesByCategory(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/** ADDED FOR HAAD --- @ START JUN 13 2015 --- Nishitha **/
	public ArrayList getAllMedDecisionOptions(MedicalDecisionBean medicalDecisionBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllMedDecisionOptions(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllRiskOfComplicationsOptions(MedicalDecisionBean medicalDecisionBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllRiskOfComplicationsOptions(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertConsultRisk(MedicalDecisionBean medicalDecisionBean, HttpServletRequest request) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertConsultRisk(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(medicalDecisionBean, request, "INSERT", "Added Risk Details From Doctor's/Nurse's Workbench For HAAD Evaluation & Management", medicalDecisionBean.getOp_number(), medicalDecisionBean.getConsult_id(), "em_consult_risk");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateConsultRisk(MedicalDecisionBean medicalDecisionBean, HttpServletRequest request) throws DaoException{
		try {
			MedicalDecisionBean oldBean = getConsultRisk(medicalDecisionBean);

			eclinicDaoManager.startTransaction();
			consultationDao.updateConsultRisk(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean) {
				auditLogEntry(oldBean, request, "UPDATE", "Updated Risk Details From Doctor's/Nurse's Workbench For HAAD Evaluation & Management ", oldBean.getOp_number(), oldBean.getConsult_id(), "em_consult_risk");
			}


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public MedicalDecisionBean getConsultRisk(MedicalDecisionBean medicalDecisionBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			medicalDecisionBean=consultationDao.getConsultRisk(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return medicalDecisionBean;
	}

	public void insertConsultMedDecision(MedicalDecisionBean medicalDecisionBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertConsultMedDecision(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deleteConsultMedDecision(MedicalDecisionBean medicalDecisionBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.deleteConsultMedDecision(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public MedicalDecisionBean getEandMEncounterDetails(MedicalDecisionBean medicalDecisionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			medicalDecisionBean=consultationDao.getEandMEncounterDetails(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return medicalDecisionBean;
	}

	public void insertEandMEncounterDetails(MedicalDecisionBean medicalDecisionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertEandMEncounterDetails(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

			//auditLogEntry(medicalDecisionBean, request, "INSERT", "Added Encounter Details For HAAD Evaluation & Management", medicalDecisionBean.getOp_number(), medicalDecisionBean.getConsult_id(), "em_encounter_dtls");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateEandMValues(MedicalDecisionBean medicalDecisionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateEandMValues(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public MedicalDecisionBean getEandMLevelOfService(MedicalDecisionBean medicalDecisionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			medicalDecisionBean=consultationDao.getEandMLevelOfService(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return medicalDecisionBean;
	}

	public void updateEandMEncounterStartDetails(MedicalDecisionBean medicalDecisionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateEandMEncounterStartDetails(medicalDecisionBean);
			eclinicDaoManager.commitTransaction();

			//auditLogEntry(medicalDecisionBean, request, "UPDATE", "Started Patient Encounter with Doctor", medicalDecisionBean.getOp_number(), medicalDecisionBean.getConsult_id(), "em_encounter_dtls");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public SetupBean getConsultFeeDetailsForEAndM(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean=consultationDao.getConsultFeeDetailsForEAndM(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}
	/** ADDED FOR HAAD --- @ END JUN 13 2015 --- Nishitha **/

	// Report




	public ArrayList<RegistrationBean> getAllChangedPrices(RegistrationBean registrationBean) throws DaoException {
		ArrayList<RegistrationBean> priceList = null;

		try {
			eclinicDaoManager.startTransaction();
			priceList = (ArrayList) registrationDao.getAllChangedPrices(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return priceList;
	}



	/** BUPA POINT WEBSERVICE --- @ START JUL 27 2015 --- Nishitha **/
	public void deleteClaimInvoice(RegistrationBean registrationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.deleteClaimInvoice(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Webservice */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	/** BUPA POINT WEBSERVICE --- @ END JUL 27 2015 --- Nishitha **/


	// IP Discharge Process

	public void insertDischargeMedicine4IP(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.insertDischargeMedicine4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<InPatientBean> getAllDischargeMedicine4IP(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipConsultDao.getAllDischargeMedicine4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void insertDischargeSummary4IP(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.insertDischargeSummary4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public InPatientBean getDischargeSummary4IP(InPatientBean ipBean)throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipConsultDao.getDischargeSummary4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}



	public ArrayList<PaymentBean> getExpenseVouchers(PaymentBean paymentBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)paymentDao.getExpenseVouchers(paymentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<PaymentBean> getExpensePaymentDetails(String id) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)paymentDao.getExpensePaymentDetails(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertExpensePaymentDetails(PaymentBean paymentBean,HttpServletRequest request) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			paymentDao.insertExpensePaymentDetails(paymentBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(paymentBean, request, "INSERT", "Added Expense Payment details", null, null, "expense_payment_details");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteExpensePaymentDetails(String id) throws DaoException {

		try 
		{     
			eclinicDaoManager.startTransaction();
			paymentDao.deleteExpensePaymentDetails(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	/*
	 * IP SURGERY/OT MODULE ----- @STARTS ------- 10 AUGUST 2015 
	 */
	public void insertSurgeryBookingDetails4IP(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.insertSurgeryBookingDetails4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public InPatientBean getSurgeryBookingDetails4IP(InPatientBean ipBean)throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipConsultDao.getSurgeryBookingDetails4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList<InPatientBean> getAllSurgeryBookings4IP(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipConsultDao.getAllSurgeryBookings4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	/*
	 * IP SURGERY/OT MODULE ----- @ENDS ------- 
	 */

	/*
	 * IP BED RATE CALCULATION ----- @STARTS ------- 16 AUGUST 2015 
	 */
	public void insertBedChargeDetails(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.insertBedChargeDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateBedChargeDetails(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.updateBedChargeDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public List<InPatientBean> getBedChargeDetails(InPatientBean ipBean)throws DaoException {
		List<InPatientBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getBedChargeDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public InPatientBean getBedChargeDetailsById(InPatientBean ipBean)throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getBedChargeDetailsById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void insertBedUsageDetails(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.insertBedUsageDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public List<InPatientBean> getBedUsageDetails(InPatientBean ipBean)throws DaoException {
		List<InPatientBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getBedUsageDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<InPatientBean> getBedUsageDetailsDaywise(InPatientBean ipBean)throws DaoException {
		List<InPatientBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = inpatientDao.getBedUsageDetailsDaywise(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}			
	/*
	 * IP BED RATE CALCULATION ----- @ENDS ------- 
	 */
	/*************************** EPrescription for Pharmacy ********* @START ********************************/
	public void insertErxPriorRequestMedicine(ERxParseBean actBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.insertErxPriorRequestMedicine(actBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(actBean, request, "INSERT", "Saved Medicines on eRx Download from DHPO","" ,"" ,"erx_prior_req_medicine");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertErxPriorRequestDiagnosis(ERxParseBean diagBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.insertErxPriorRequestDiagnosis(diagBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(diagBean, request, "INSERT", "Saved Diagnosis on eRx Download from DHPO/ Verify-Submit Pharmacy Claims","" ,"" ,"erx_prior_req_diagnosis");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertErxPriorRequestDetails(EPrescriptionBean ePrescriptionBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.insertErxPriorRequestDetails(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ePrescriptionBean, request, "INSERT", "Saved Prior Request Details on eRx Download from DHPO","" ,"" ,"erx_prior_req_details");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateErxPriorRequestDetails(EPrescriptionBean ePrescriptionBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateErxPriorRequestDetails(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ePrescriptionBean, request, "UPDATE", "Updated Prior Request Details Before Submitting","" ,"" ,"erx_prior_req_details");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public EPrescriptionBean geteRxPriorRequestDetails(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			ePrescriptionBean = eprescriptionDao.geteRxPriorRequestDetails(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ePrescriptionBean;
	}

	public List<ERxParseBean> getAlleRxPriorRequestDiagnosis(EPrescriptionBean ePrescriptionBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) eprescriptionDao.getAlleRxPriorRequestDiagnosis(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<ERxParseBean> getAlleRxPriorRequestMedicine(EPrescriptionBean ePrescriptionBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) eprescriptionDao.getAlleRxPriorRequestMedicine(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void deleteErxPriorRequestDiagnosis(EPrescriptionBean ePrescriptionBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.deleteErxPriorRequestDiagnosis(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ePrescriptionBean, request, "DELETE", "Deleted diagnosis from Prior Request","" ,"" ,"erx_prior_req_diagnosis");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deleteErxPriorRequestMedicine(EPrescriptionBean ePrescriptionBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.deleteErxPriorRequestMedicine(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ePrescriptionBean, request, "DELETE", "Deleted medicine from Prior Request","" ,"" ,"erx_prior_req_medicine");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void insertErxPriorRequestAuthorizationDtls(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.insertErxPriorRequestAuthorizationDtls(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

			//auditLogEntry(ePrescriptionBean, request, "INSERT", "Saved Prior Request Authorization from DHPO","" ,"" ,"erx_prior_req_authorization");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateErxPriorRequestAuthorizationDtls(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateErxPriorRequestAuthorizationDtls(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

			//auditLogEntry(ePrescriptionBean, request, "UPDATE", "Updated Prior Request Authorization download details","" ,"" ,"erx_prior_req_authorization");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateErxPriorRequestUploadStatus(EPrescriptionBean ePrescriptionBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateErxPriorRequestUploadStatus(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ePrescriptionBean, request, "UPDATE", "Updated Prior Request Upload details","" ,"" ,"erx_prior_req_details");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateErxPriorRequestMedAuthDtls(ERxParseBean eRxParseBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateErxPriorRequestMedAuthDtls(eRxParseBean);
			eclinicDaoManager.commitTransaction();

			//auditLogEntry(eRxParseBean, request, "UPDATE", "Updated Prior Request Medicine Authorization details","" ,"" ,"erx_prior_req_medicine");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateErxPriorRequestDownloadStatus(EPrescriptionBean ePrescriptionBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateErxPriorRequestDownloadStatus(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

			//auditLogEntry(ePrescriptionBean, request, "UPDATE", "Updated Prior Request download details","" ,"" ,"erx_prior_req_details");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List<EPrescriptionBean> getAllErxPriorReqAuth(EPrescriptionBean ePrescriptionBean) throws DaoException {
		List<EPrescriptionBean> authList = null;
		try {
			eclinicDaoManager.startTransaction();
			authList = (List<EPrescriptionBean>) eprescriptionDao.getAllErxPriorReqAuth(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return authList;
	}

	public void updateErxPriorReqCancelStatus(EPrescriptionBean ePrescriptionBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateErxPriorReqCancelStatus(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ePrescriptionBean, request, "UPDATE", "Updated Prior Request Cancellation details","" ,"" ,"erx_prior_req_details");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ERxParseBean getPriorReqMedicineById(ERxParseBean eRxParseBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eRxParseBean = eprescriptionDao.getPriorReqMedicineById(eRxParseBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return eRxParseBean;
	}

	public void updatePriorReqMedicineById(ERxParseBean eRxParseBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updatePriorReqMedicineById(eRxParseBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(eRxParseBean, request, "UPDATE", "Updated Prior Request Medicine","" ,"" ,"erx_prior_req_medicine");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public PharmacyBean geteRxPriorRequestDetails4Dispense(PharmacyBean pharmacyBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			pharmacyBean = eprescriptionDao.geteRxPriorRequestDetails4Dispense(pharmacyBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return pharmacyBean;
	}

	public List<PharmacyBean> getAllPriorReqMedicines4Dispense(PharmacyBean pharmacyBean) throws DaoException {
		List<PharmacyBean> medList = null;
		try {
			eclinicDaoManager.startTransaction();
			medList = (List<PharmacyBean>) eprescriptionDao.getAllPriorReqMedicines4Dispense(pharmacyBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return medList;
	}



	public void updateErxPriorReqMedPriceDetailsById(PharmacyBean pharmacyBean, HttpServletRequest request) throws Exception {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.updateErxPriorReqMedPriceDetailsById(pharmacyBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(pharmacyBean, request, "UPDATE", "Updated Prior Request Medicine with price details","" ,"" ,"erx_prior_req_medicine");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deletePriorRequestsNotUploaded(EPrescriptionBean ePrescriptionBean, HttpServletRequest request) throws Exception {
		try {
			eclinicDaoManager.startTransaction();
			eprescriptionDao.deletePriorRequestsNotUploaded(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(ePrescriptionBean, request, "DELETE", "Deleted already downloaded Prior Request of Erx# " +ePrescriptionBean.geteRx_referenceno()+" which were not uploaded.","" ,"" ,"erx_prior_req_details");

		} catch (DaoException e) {
			e.printStackTrace();
		}
	}
	/*************************** EPrescription for Pharmacy ********* @END **************************************/


	/*************************** IP INSURANCE ********* @START **************************************/
	public synchronized String insertClaim4IP(InPatientBean ipBean,String previnv) throws DaoException 
	{
		String ab=null;
		try {
			eclinicDaoManager.startTransaction();

			if(previnv!=null && !previnv.equals(""))
				ab=previnv;
			else{
				/*ipBean.setQuery("SELECT max(0+invoice_no)+1 FROM ip_claim_generated where office_id='"+ipBean.getOffice_id()+"'");
				ab=inpatientDao.isAlreadyExist(ipBean);*/
				
				parameterBean = new ParameterBean();
				parameterBean.setField_name(" invoice_no");
				parameterBean.setTable_name("ip_claim_generated");
				parameterBean.setOffice_id(ipBean.getOffice_id());
				ab=commonDao.fetchMaxNextNum(parameterBean);
				parameterBean=null;
			}
			if(ab==null)
				ab="1";

			//DecimalFormat df=new DecimalFormat(ipBean.getMin_digit()); 
			//ipBean.setInvoice_no(df.format(Double.parseDouble(ab)));
			ipBean.setInvoice_no(ab);
			ab=ipBean.getInvoice_no();
			ipInsuranceDao.insertClaim4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ab;
	}
	public InPatientBean getConsultClaimDetailByID4IP(InPatientBean ipBean) throws DaoException {

		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipInsuranceDao.getConsultClaimDetailByID4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList<InPatientBean> getAllClaimBillDetails(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)ipInsuranceDao.getAllClaimBillDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<InPatientBean> getAllListOfClaims4IP(InPatientBean ipBean) throws DaoException 
	{
		ArrayList<InPatientBean> list=null;
		if(ipBean.getOrderby()==null || ipBean.getOrderby().equals(""))
			ipBean.setOrderby("order by doctor_consult.insurar_id,doctor_consult.insurar_sub,doctor_consult.consult_date");
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)ipInsuranceDao.getAllListOfClaims4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void cancelClaimInvoiceIP(InPatientBean ipBean) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			ipInsuranceDao.cancelClaimInvoiceIP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<InPatientBean> getAllListOfClaims4IPFormat2(InPatientBean ipBean) throws DaoException 
	{
		ArrayList<InPatientBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)ipInsuranceDao.getAllListOfClaims4IPFormat2(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void submitClaim4IP(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipInsuranceDao.submitClaim4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void reSubmitClaim4IP(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipInsuranceDao.reSubmitClaim4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void reReSubmitClaim4IP(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipInsuranceDao.reReSubmitClaim4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void cancelClaim4IP(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipInsuranceDao.cancelClaim4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<InPatientBean> getClaimsCountList4IP(InPatientBean ipBean) throws DaoException 
	{
		ArrayList<InPatientBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)ipInsuranceDao.getClaimsCountList4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<InPatientBean> getAllListOfClaims4ReportIP(InPatientBean ipBean) throws DaoException 
	{
		ArrayList<InPatientBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)ipInsuranceDao.getAllListOfClaims4ReportIP(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public String insertEclaimFileIP(InPatientBean ipBean) throws DaoException 
	{
		String fileno = "";
		try {
			eclinicDaoManager.startTransaction();
			ipInsuranceDao.insertEclaimFileIP(ipBean);
			//ipBean.setQuery("SELECT max(id) FROM ip_eclaim_files");
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("ip_eclaim_files");
			fileno=commonDao.fetchMaxIdfromTable(parameterBean);
			parameterBean=null;
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return fileno;
	}
	public ArrayList<InPatientBean> getAllEclaimFilesIP(InPatientBean ipBean) throws DaoException 
	{
		ArrayList<InPatientBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)ipInsuranceDao.getAllEclaimFilesIP(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<InPatientBean> getAllConsultLabTestCN4IP(InPatientBean ipBean)throws DaoException 
	{
		ArrayList<InPatientBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)inpatientDao.getAllConsultLabTestCN4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) 
			{}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<InPatientBean> getAllConsultProcedureCN4IP(InPatientBean ipBean)throws DaoException 
	{
		ArrayList<InPatientBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)inpatientDao.getAllConsultProcedureCN4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) 
			{}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertReconciliationData4IP(InPatientBean ipBean) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			ipInsuranceDao.insertReconciliationData4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<InPatientBean> getAllReconciliationUploadData4IP(InPatientBean ipBean) throws DaoException 
	{
		ArrayList<InPatientBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<InPatientBean>)ipInsuranceDao.getAllReconciliationUploadData4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public String getReconciliationFileCount(InPatientBean ipBean) throws DaoException 
	{
		String count = "";
		try {
			eclinicDaoManager.startTransaction();
			count = ipInsuranceDao.getReconciliationFileCount(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return count;
	}
	public void updateReconciliationData4IP(InPatientBean ipBean) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			ipInsuranceDao.updateReconciliationData4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void insertPaymentReference4IP(InPatientBean ipBean) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			ipInsuranceDao.insertPaymentReference4IP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	/*************************** IP INSURANCE ********* @ENDS **************************************/
	//Asset

	public ArrayList<PurchaseBean> getAllAssetItems(PurchaseBean pbBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAllAssetItems(pbBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;	
	}

	public void insertAssetItems(ArrayList<PurchaseBean> itemList,HttpServletRequest request, UserBean userBean,AssetManageBean assetBean,  HttpSession session) 
	{
		PurchaseBean pb = new PurchaseBean();
		//RegistrationBean regBean = new RegistrationBean();
		//DecimalFormat df=new DecimalFormat("#########.00");
		//DecimalFormat df3=new DecimalFormat("#########.000");
		//DecimalFormat df4=new DecimalFormat("#########.0000");
		//SimpleDateFormat sdf3=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdfToDB=new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat sdfFrmDB=new SimpleDateFormat("dd-MM-yyyy");
		String barcode="";

		try
		{
			eclinicDaoManager.startTransaction();
			if(itemList!=null && itemList.size()>0)
			{
				Iterator itr = itemList.iterator(); 
				while(itr.hasNext())
				{
					pb=(PurchaseBean) itr.next();
					if(pb.getQty_delivered()!=null && !pb.getQty_delivered().equals("") && !pb.getQty_delivered().equals(""))
					{
						//regBean.setQuery("select item_name from item_master where item_id='"+pb.getItem_id()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("item_master");
						parameterBean.setField_name("item_name");
						parameterBean.setField_name1("item_id");
						parameterBean.setField_value1(pb.getItem_id());
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2(null);
						String item_name=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;

						//regBean.setQuery("SELECT itemgroup_master.itemgroup_name FROM item_master,itemgroup_master where item_master.itemgroup_id=itemgroup_master.itemgroup_id and item_master.item_id="+pb.getItem_id());
						parameterBean = new ParameterBean();
						parameterBean.setItem_id(pb.getItem_id());
						String item_grpname = commonDao.fetchItemGroupName(parameterBean);
						parameterBean=null;
						//regBean.setQuery("select item_type from item_master where item_id = "+pb.getItem_id());
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("item_master");
						parameterBean.setField_name("item_type");
						parameterBean.setField_name1("item_id");
						parameterBean.setField_value1(pb.getItem_id());
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2(null);
						String itemType=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean =null;

						String child_id = "";
						//regBean.setQuery("select child_id from account_child where child_type='ITEM' and  link_id='"+pb.getItem_id()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_child");
						parameterBean.setField_name("child_id");
						parameterBean.setField_name1("link_id");
						parameterBean.setField_value1(pb.getItem_id());
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("child_type='ITEM'");
						child_id = commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						if(child_id==null || child_id.equals(""))
						{
							userBean.setItem_type(itemType);
							userBean.setItemgroup_name(item_grpname);
							child_id = insertChildAccounts(item_name, "add_item", pb.getItem_id(), userBean, request);
						}

						if(child_id!=null && !child_id.equals(""))
							pb.setChild_id(child_id);
						else
							pb.setChild_id("");
						for(int i=0;i<Double.parseDouble(pb.getQty_delivered());i++)
						{
							/*regBean.setQuery("select if(max(batch_no) is null,'1',max(batch_no)+1) from fixed_assets where item_id='"+pb.getItem_id()+"'");
							String batch = registrationDao.isAlreadyExist(regBean);*/

							parameterBean = new ParameterBean();
							parameterBean.setTable_name("fixed_assets");
							parameterBean.setItem_id(pb.getItem_id());
							String batch = commonDao.fetchNextBatchNumber(parameterBean);
							pb.setBatch_no(batch);
							parameterBean=null;

							if (pb.getItem_code()!=null) 
								barcode = pb.getItem_code();
							if(barcode!="")
								barcode = barcode.concat("-AB");

							barcode = barcode.concat(pb.getBatch_no());
							pb.setBatch_no(batch);
							pb.setBarcode(barcode);
							pb.setDepartment_id(assetBean.getDepartment_id());
							assetManageDao.insertFixedAsset(pb);
							/*regBean.setQuery("update item_stock set fixed_asset='Y' where stock_id='"+pb.getSerial_id()+"'");
							registrationDao.deleteQuery(regBean);*/
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("item_stock");
							parameterBean.setField_name("fixed_asset='Y'");
							parameterBean.setField_name1(" stock_id='"+pb.getSerial_id()+"'");
							commonDao.updateQueryInCommon(parameterBean);
							parameterBean=null;

							//regBean.setQuery("SELECT max(id) FROM fixed_assets");
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("fixed_assets");
							String asset_id = commonDao.fetchMaxIdfromTable(parameterBean);
							parameterBean=null;
							if(assetBean!=null)
							{
								assetBean.setAsset_id(asset_id);
								assetManageDao.insertAssetPurchaseInfo(assetBean);
								
								assetBean.setAsset_status("Purchased");
								assetBean.setLocation_id(null);
								assetBean.setUser_id(null);
								assetBean.setAsset_condition("Excellent");
								assetBean.setEnteredby(userBean.getUser_id());
								assetBean.setDtconvert("not");
								assetBean.setOwned_from(sdfFrmDB.format(sdfToDB.parse(assetBean.getPurchase_date())));
								assetBean.setOwned_till(null);
								assetBean.setActive_status("Y");
								assetManageDao.insertAssetOwnershipInfo(assetBean);
							}
						}
					}
				}

			}

			eclinicDaoManager.commitTransaction();
			auditLogEntry(pb, request, "INSERT", "Inserted Fixed Asset ",null,null,"fixed_assets");
		} 
		catch (Exception e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (DaoException e1) 
			{
				e1.printStackTrace();
			}
			e.printStackTrace();
		}

	}

	public String postTransaction(ArrayList<AssetManageBean> assetList,UserBean userbean,int transaction_month,int transaction_year,HttpServletRequest request) throws Exception {
		String mssg="";

		DecimalFormat df=new DecimalFormat("#########.00");
		SimpleDateFormat sdfMonth = new SimpleDateFormat("MM");
		SimpleDateFormat sdfDay = new SimpleDateFormat("dd");
		SimpleDateFormat sdfYear = new SimpleDateFormat("yyyy");
		SimpleDateFormat sdToDB = new SimpleDateFormat("yyyy-MM-dd");
		try{        	
			eclinicDaoManager.startTransaction();
			PaymentBean payBean=new PaymentBean();
			AccountBean accBean = new AccountBean();
			AssetManageBean assetBean = new AssetManageBean();
			String eday=getEndDay(transaction_month, transaction_year);
			String vouch_date=eday+"-"+transaction_month+"-"+transaction_year;
			payBean.setDtconvert("not");
			payBean.setPayment_date(vouch_date);
			double totalposted = 0.0;
			//RegistrationBean regBean = new RegistrationBean();
			//accBean.setQuery("SELECT if(max(0+voucher_no)+1 is null,1,max(0+voucher_no)+1) FROM voucher_details");					
			Integer vouchNumber = Integer.parseInt(commonDao.fetchMaxVoucherno());

			if(assetList!=null && assetList.size()>0)
			{
				Iterator itr = assetList.iterator();
				while(itr.hasNext())
				{
					assetBean = (AssetManageBean)itr.next();
					if(assetBean!=null)
					{
						accBean = new AccountBean();
						String debit_head = accHeadsBean.getDep_exp_debit_head();
						String credit_head = accHeadsBean.getDep_exp_credit_head();
						//AccountBean accBean1 = new AccountBean();
						//accBean1.setQuery("SELECT itemgroup_master.itemgroup_name FROM item_master,itemgroup_master where item_master.itemgroup_id=itemgroup_master.itemgroup_id and item_master.item_id="+assetBean.getItem_id());
						parameterBean=new ParameterBean();
						parameterBean.setItem_id(assetBean.getItem_id());
						String item_grpname=commonDao.fetchItemGroupName(parameterBean);
						parameterBean=null;
						
						//accBean1.setQuery("select item_name from item_master where item_id = '"+assetBean.getItem_id()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("item_master");
						parameterBean.setField_name("item_name");
						parameterBean.setField_name1("item_id");
						parameterBean.setField_value1(assetBean.getItem_id());
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2(null);
						String item = commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						
						//regBean.setQuery("select item_type from item_master where item_id = "+assetBean.getItem_id());
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("item_master");
						parameterBean.setField_name("item_type");
						parameterBean.setField_name1("item_id");
						parameterBean.setField_value1(assetBean.getItem_id());
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2(null);
						String itemType=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;

						String child_id = "";
						//regBean.setQuery("select child_id from account_child where child_type='ITEM' and  link_id='"+assetBean.getItem_id()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_child");
						parameterBean.setField_name("child_id");
						parameterBean.setField_name1("link_id");
						parameterBean.setField_value1(assetBean.getItem_id());
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("child_type='ITEM'");
						child_id = commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						if(child_id==null || child_id.equals(""))
						{
							userbean.setItem_type(itemType);
							userbean.setItemgroup_name(item_grpname);
							child_id = insertChildAccounts(item, "add_item", assetBean.getItem_id(), userbean, request);
						}

						String sub_head="";
						//accBean1.setQuery("SELECT account_code FROM account_head where account_parent = '"+credit_head+"' and account_name='"+item_grpname+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_head");
						parameterBean.setField_name("account_code");
						parameterBean.setField_name1("account_parent");
						parameterBean.setField_value1(credit_head);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("account_name='"+item_grpname+"'");
						sub_head=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						credit_head=sub_head;

						payBean.setVoucher_type("Depreciated Asset");
						payBean.setProject_id("0");
						payBean.setDoctors_id("0");	
						payBean.setOffice_id(userbean.getOffice_id());
						payBean.setAsset_id(assetBean.getAsset_id());

						boolean curr_month_purchase = false;
						//accBean1.setQuery("SELECT effective_from FROM asset_finance_info where active_status='Y' and asset_id='"+assetBean.getAsset_id()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("asset_finance_info");
						parameterBean.setField_name("effective_from");
						parameterBean.setField_name1("asset_id");
						parameterBean.setField_value1(assetBean.getAsset_id());
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("active_status='Y'");
						String effective_date = commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						//accBean1.setQuery("SELECT purchase_date FROM asset_purchase_info where asset_id='"+assetBean.getAsset_id()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("asset_purchase_info");
						parameterBean.setField_name("purchase_date");
						parameterBean.setField_name1("asset_id");
						parameterBean.setField_value1(assetBean.getAsset_id());
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2(null);
						String purchase_date = commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						String purchase_day = "";
						String purchase_month = "";
						String purchase_year = "";
						if(effective_date!=null && !effective_date.equals(""))
						{
							purchase_date = effective_date;
							purchase_day = sdfDay.format(sdToDB.parse(purchase_date));
							purchase_month = sdfMonth.format(sdToDB.parse(purchase_date));
							purchase_year = sdfYear.format(sdToDB.parse(purchase_date));
							if(Integer.parseInt(purchase_month)==transaction_month && Integer.parseInt(purchase_year)==transaction_year)
								curr_month_purchase = true;
							if(purchase_day==null || purchase_day.equals(""))
								purchase_day = eday;
						}

						double usage_per_month = Double.parseDouble(assetBean.getTransaction_amount());
						double total_usage = usage_per_month;
						if(curr_month_purchase){
							int used_days = (Integer.parseInt(eday) - Integer.parseInt(purchase_day)) + 1;
							double usage_per_day = usage_per_month/Double.parseDouble(eday);
							total_usage = used_days * usage_per_day;
						}
						
						payBean.setHead_id(debit_head);
						payBean.setCredit_amount("0");
						payBean.setDebit_amount(df.format(total_usage));
						payBean.setPayment_type("D");
						payBean.setRemarks("Deprecated Asset "+item);
						payBean.setChild_id(accHeadsBean.getDep_exp_debit_child());
						payBean.setVoucher_no(vouchNumber+"");
						payBean.setEntry_id("DEPREC"+transaction_month+transaction_year);
						if(payBean.getOpening()!=null)
						{}else{
							payBean.setOpening("N");
						}
						payBean.setNewentry("Y");
						paymentDao.insertVoucherDetails(payBean);

						payBean.setHead_id(credit_head);
						payBean.setCredit_amount(df.format(total_usage));
						payBean.setDebit_amount("0");
						payBean.setPayment_type("C");
						payBean.setRemarks("Deprecated Asset "+item);
						payBean.setChild_id(child_id);
						payBean.setVoucher_no(vouchNumber+"");
						if(payBean.getOpening()!=null)
						{}else{
							payBean.setOpening("N");
						}
						payBean.setNewentry("Y");
						paymentDao.insertVoucherDetails(payBean);
						totalposted = totalposted+total_usage;
						/*regBean.setQuery("update voucher_details set verify_status='Y',auth_status='Y' where voucher_no='"+vouchNumber+"'");
						registrationDao.deleteQuery(regBean);*/
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("voucher_details");
						parameterBean.setField_name("verify_status='Y'");
						parameterBean.setField_name1("voucher_no='"+vouchNumber+"'");
						commonDao.updateQueryInCommon(parameterBean);
						parameterBean=null;

						accBean.setAccount_id(payBean.getEntry_id());
						accountDao.updateAccountHeadId(accBean);
					}
				}


				assetBean.setTransaction_amount(""+df.format(totalposted));
				assetBean.setEnteredby(userbean.getUser_id());
				assetBean.setOffice_id(userbean.getOffice_id());
				assetBean.setTransaction_month(""+transaction_month);
				assetBean.setTransaction_year(""+transaction_year);
				assetManageDao.insertPostDepreciation(assetBean);
				//regBean.setQuery("SELECT max(id) FROM post_depreciation");
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("post_depreciation");
				String maxid = commonDao.fetchMaxIdfromTable(parameterBean);
				parameterBean=null;
				mssg= "<font color='red'><strong>Depreciation Posted Successfully!...</strong></font>";
				/*regBean.setQuery("update voucher_details set depr_id='"+maxid+"' where voucher_no='"+vouchNumber+"'");
				registrationDao.deleteQuery(regBean);*/
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("voucher_details");
				parameterBean.setField_name("depr_id='"+maxid+"'");
				parameterBean.setField_name1("voucher_no='"+vouchNumber+"'");
				commonDao.updateQueryInCommon(parameterBean);
				parameterBean=null;
				eclinicDaoManager.commitTransaction();
				auditLogEntry(assetBean, request, "INSERT", "Posted Depreciation.", null, null, "post_depreciation");

			}
		}catch (DaoException e){
			try {

				eclinicDaoManager.rollbackTransaction();
				mssg = "<font color='red'><strong>Depreciation Not Posted</strong></font>";
			}catch (Exception e2) 
			{
				mssg = "<font color='red'><strong>Depreciation Not Posted</strong></font>";
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return mssg;

	}


	public ArrayList getAllPostedDepreciatedAssetsByGrpId(AssetManageBean assetBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAllPostedDepreciatedAssetsByGrpId(assetBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public ArrayList<AssetManageBean> getAllPostedAssetsByGrpId(AssetManageBean assetBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAllPostedAssetsByGrpId(assetBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}



	public ArrayList<AssetManageBean> getAllItemsByGrpId(PurchaseBean pbBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAllItemsByGrpId(pbBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;	
	}

	public PurchaseBean getFixedAssetById(PurchaseBean pbean)throws DaoException {
		PurchaseBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = assetManageDao.getFixedAssetById(pbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertLocationSetup(AssetManageBean assetBean,HttpServletRequest request) throws DaoException{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			assetManageDao.insertLocationSetup(assetBean);

			eclinicDaoManager.commitTransaction();
			auditLogEntry(assetBean, request, "INSERT", "Added Location "+assetBean.getLocation()+" to Location Setup", null, null, "location_setup");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllLocationSetup(AssetManageBean assetBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAllLocationSetup(assetBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateLocation(AssetManageBean assetBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			assetManageDao.updateLocation(assetBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deactivateLocation(AssetManageBean assetBean)throws DaoException {

		try 
		{        	
			eclinicDaoManager.startTransaction();
			assetManageDao.deactivateLocation(assetBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void activateLocation(AssetManageBean assetBean)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			assetManageDao.activateLocation(assetBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteLocation(AssetManageBean assetBean,HttpServletRequest request)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			assetManageDao.deleteLocation(assetBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public PurchaseBean getAllPurchaseInformation(PurchaseBean pbBean)throws DaoException {
		PurchaseBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = assetManageDao.getAllPurchaseInformation(pbBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getAllAssetDocumentTypes()throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAllAssetDocumentTypes();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public void insertAssetAttachDocument(DocumentDetailBean registrationBean, HttpServletRequest request) throws DaoException {

		try {


			eclinicDaoManager.startTransaction();
			assetManageDao.insertAssetAttachDocument(registrationBean);

			eclinicDaoManager.commitTransaction();
			auditLogEntry(registrationBean, request, "INSERT", "inserted AssetAttachDocument ",null,null,"asset_attacheddocuments");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList<DocumentDetailBean> getIdWiseDocsAttached4Asset(DocumentDetailBean docBean) throws DaoException {
		ArrayList<DocumentDetailBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<DocumentDetailBean>)assetManageDao.getIdWiseDocsAttached4Asset(docBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertAssetBasicInfo(AssetManageBean assetBean, HttpServletRequest request)throws DaoException {
		try {


			eclinicDaoManager.startTransaction();
			assetManageDao.insertAssetBasicInfo(assetBean);

			eclinicDaoManager.commitTransaction();
			auditLogEntry(assetBean, request, "INSERT", "inserted AssetBasicInfo ",null,null,"asset_basic_info");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public AssetManageBean getAssetBasicInfoById(AssetManageBean assetBean)throws DaoException {
		AssetManageBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = assetManageDao.getAssetBasicInfoById(assetBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateAssetBasicInfo(AssetManageBean assetBean, HttpServletRequest request)throws DaoException {

		try {

			AssetManageBean oldBean = getAssetBasicInfoById(assetBean);
			eclinicDaoManager.startTransaction();
			assetManageDao.updateAssetBasicInfo(assetBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Updated Asset Basic Info",null,null,"asset_basic_info");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public AssetManageBean getAssetPurchaseInfoById(AssetManageBean assetBean)throws DaoException {
		AssetManageBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = assetManageDao.getAssetPurchaseInfoById(assetBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateAssetPurchaseInfo(AssetManageBean assetBean, HttpServletRequest request) throws DaoException {
		try {

			AssetManageBean oldBean = getAssetPurchaseInfoById(assetBean);
			eclinicDaoManager.startTransaction();
			assetManageDao.updateAssetPurchaseInfo(assetBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(oldBean, request, "UPDATE", "Updated Asset Purchase Info",null,null,"asset_purchase_info");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertAssetPurchaseInfo(AssetManageBean assetBean,HttpServletRequest request)throws DaoException {
		try {


			eclinicDaoManager.startTransaction();
			assetManageDao.insertAssetPurchaseInfo(assetBean);

			eclinicDaoManager.commitTransaction();

			auditLogEntry(assetBean, request, "INSERT", "Inserted Asset Purchase Info",null,null,"asset_purchase_info");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public ArrayList getAssetMaintenanceInfoById(AssetManageBean assetBean)throws DaoException {
		ArrayList List = null;
		try {
			eclinicDaoManager.startTransaction();
			List = assetManageDao.getAssetMaintenanceInfoById(assetBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return List;
	}

	public void updateAssetMaintenanceInfo(AssetManageBean assetBean,HttpServletRequest request)throws DaoException {
		try {
			//AssetManageBean oldBean=getAssetmaintenanceInfoById(assetBean);
			eclinicDaoManager.startTransaction();
			assetManageDao.updateAssetMaintenanceInfo(assetBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(assetBean, request, "UPDATE", "Updated Asset Maintanance Info",null,null,"asset_maintenance_info");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void insertAssetMaintenanceInfo(AssetManageBean assetBean,HttpServletRequest request)throws DaoException {
		try {


			eclinicDaoManager.startTransaction();
			assetManageDao.insertAssetMaintenanceInfo(assetBean);

			eclinicDaoManager.commitTransaction();
			auditLogEntry(assetBean, request, "INSERT", "Inserted Asset Maintanance Info",null,null,"asset_maintenance_info");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public void insertAssetFinanceInfo(AssetManageBean assetBean,HttpServletRequest request)throws DaoException {
		try {


			eclinicDaoManager.startTransaction();
			assetManageDao.insertAssetFinanceInfo(assetBean);

			eclinicDaoManager.commitTransaction();
			auditLogEntry(assetBean, request, "INSERT", "Inserted Asset Maintanance Info",null,null,"asset_finance_info");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public ArrayList<AssetManageBean> getAssetFinanceInfoById(AssetManageBean assetBean)throws DaoException {
		ArrayList<AssetManageBean> List = null;
		try {
			eclinicDaoManager.startTransaction();
			List = (ArrayList<AssetManageBean>)assetManageDao.getAssetFinanceInfoById(assetBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return List;
	}

	public AssetManageBean getAssetWarrantyInfoById(AssetManageBean assetBean)throws DaoException {
		AssetManageBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = assetManageDao.getAssetWarrantyInfoById(assetBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateAssetWarrantyInfo(AssetManageBean assetBean,HttpServletRequest request) throws DaoException {
		try {

			//AssetManageBean oldBean=getAssetWarrantyInfoById(assetBean);
			eclinicDaoManager.startTransaction();
			assetManageDao.updateAssetWarrantyInfo(assetBean);

			eclinicDaoManager.commitTransaction();
			auditLogEntry(assetBean, request, "UPDATE", "Updated Asset Warranty Info",null,null,"asset_warranty_info");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}


	}

	public void insertAssetWarrantyInfo(AssetManageBean assetBean,HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			assetManageDao.insertAssetWarrantyInfo(assetBean);

			eclinicDaoManager.commitTransaction();
			auditLogEntry(assetBean, request, "INSERT", "Inserted Asset Warranty Info",null,null,"asset_warranty_info");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList<AssetManageBean> getAssetOwnershipInfoById(AssetManageBean assetBean) throws DaoException {
		ArrayList<AssetManageBean> List = null;
		try {
			eclinicDaoManager.startTransaction();
			List = assetManageDao.getAssetOwnershipInfoById(assetBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return List;

	}

	public void updateAssetOwnershipInfo(AssetManageBean assetBean) {

	}

	public void insertAssetOwnershipInfo(AssetManageBean assetBean,HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			assetManageDao.insertAssetOwnershipInfo(assetBean);

			eclinicDaoManager.commitTransaction();
			auditLogEntry(assetBean, request, "INSERT", "Inserted Asset Ownership Info",null,null,"asset_ownership_info");


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllFixedAssetGroup(AssetManageBean assetBean) throws DaoException {
		ArrayList<ProductBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAllFixedAssetGroup(assetBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AssetManageBean> getAllFixedAssetBarcodes(PurchaseBean purchaseBean)throws DaoException {
		ArrayList<AssetManageBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAllFixedAssetBarcodes(purchaseBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<PurchaseBean> getAllAssets4Posting(AssetManageBean assetBean) throws DaoException {
		ArrayList<PurchaseBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) assetManageDao.getAllAssets4Posting(assetBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AssetManageBean> getAllDepreciatedAssets(PurchaseBean pbBean)throws DaoException { 

		ArrayList<AssetManageBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) assetManageDao.getAllDepreciatedAssets(pbBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllDepreciationPosted(AssetManageBean assetBean) throws DaoException { 
		ArrayList<AssetManageBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) assetManageDao.getAllDepreciationPosted(assetBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}




	//Asset


	//Hierarchy Master

	public ArrayList<HierarchySetupBean> getHierarchyTree(HierarchySetupBean hierarchyBean) throws DaoException 
	{
		ArrayList<HierarchySetupBean> logList=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			logList=hierarchyDao.getHierarchyTree(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}

	public ArrayList<HierarchySetupBean> getAllMasterUsers(HierarchySetupBean hierarchyBean) throws DaoException 
	{
		ArrayList<HierarchySetupBean> logList=null;
		try{        	
			eclinicDaoManager.startTransaction();
			logList=hierarchyDao.getAllMasterUsers(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}
	public HierarchySetupBean getMasterUserDetailsById(String value) throws DaoException 
	{
		HierarchySetupBean user=null;
		try{        	
			eclinicDaoManager.startTransaction();
			user=hierarchyDao.getMasterUserDetailsById(value);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return user;
	}
	public HierarchySetupBean getHierarchyDetailByID(String hierarchyId) throws DaoException 
	{
		HierarchySetupBean hierarchyBean=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			hierarchyBean=hierarchyDao.getHierarchyDetailByID(hierarchyId);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return hierarchyBean;
	}

	public HierarchySetupBean getUserAssignedToSeat(String hierarchyId) throws DaoException 
	{
		HierarchySetupBean hierarchyBean=null;
		try{        	
			eclinicDaoManager.startTransaction();
			hierarchyBean=hierarchyDao.getUserAssignedToSeat(hierarchyId);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return hierarchyBean;
	}
	public ArrayList<HierarchySetupBean> getSeatsAssignedToUser(UserBean userBean) throws DaoException 
	{
		ArrayList<HierarchySetupBean> hierarchyBean=null;
		try{        	
			eclinicDaoManager.startTransaction();
			hierarchyBean=hierarchyDao.getSeatsAssignedToUser(userBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return hierarchyBean;
	}
	public String insertHierarchy(HierarchySetupBean hierarchyBean) throws DaoException 
	{
		String hid="";

		try 
		{        	
			eclinicDaoManager.startTransaction();
			hierarchyDao.insertHierarchy(hierarchyBean);
			hid=hierarchyDao.getLastInsertHierarchyId();
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return hid;
	}




	public void insertHierarchyFlow(HierarchySetupBean hierarchyBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			hierarchyDao.insertHierarchyFlow(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void assignUserToSeat(HierarchySetupBean hierarchyBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			hierarchyDao.assignUserToSeat(hierarchyBean);
			hierarchyDao.setUserAllotStatus(hierarchyBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertMasterUser(HierarchySetupBean hierarchyBean) throws DaoException 
	{				
		try {        	
			eclinicDaoManager.startTransaction();
			hierarchyDao.insertMasterUser(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateMasterUserData(HierarchySetupBean hierarchyBean) throws DaoException 
	{				
		try {        	
			eclinicDaoManager.startTransaction();
			hierarchyDao.updateMasterUserData(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList getAllLabTestList4SOClinics(SetupBean setupBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllLabTestList4SOClinics(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertSendOutLabPrice(SetupBean setupBean) throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			setupDao.insertSendOutLabPrice(setupBean);

			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getServiceWiseDoctorRevenue4Salary(SetupBean setupBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getServiceWiseDoctorRevenue4Salary(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	//Hierarchy Master

	public List getPatientExaminationsForTable(HistoryPresentIllBean hpiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getPatientExaminationsForTable(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getColumnsOfPatientExmTbl(HistoryPresentIllBean hpiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getColumnsOfPatientExmTbl(hpiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<RegistrationBean> getAllConsultationsWithVitals(RegistrationBean registrationBean) throws DaoException {
		List<RegistrationBean> list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (List)consultationDao.getAllConsultationsWithVitals(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<RegistrationBean> getAllConsultationsWithVitalsByIp(RegistrationBean registrationBean) throws DaoException {
		List<RegistrationBean> list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (List)consultationDao.getAllConsultationsWithVitalsByIp(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<VitalSignsBean> getAllVitalSignsByConsultId(VitalSignsBean vitalSignsBean) throws DaoException {
		List<VitalSignsBean> list=null;
		try {
			eclinicDaoManager.startTransaction();
			list=(List<VitalSignsBean>)consultationDao.getAllVitalSignsByConsultId(vitalSignsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<VitalSignsBean> getAllVitalSignsByIpId(VitalSignsBean vitalSignsBean) throws DaoException {
		List<VitalSignsBean> list=null;
		try {
			eclinicDaoManager.startTransaction();
			list=(List<VitalSignsBean>)consultationDao.getAllVitalSignsByIpId(vitalSignsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllCommProcessed4RefDoctors(SetupBean setbean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllCommProcessed4RefDoctors(setbean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getSalNotProcessedRefDoctorRates(SetupBean setupBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getSalNotProcessedRefDoctorRates(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getPreApprovalService(InsuranceBean insBean) throws DaoException {
		ArrayList insList=null;
		try {
			eclinicDaoManager.startTransaction();
			insList = insuranceDao.getPreApprovalService(insBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return insList;
	}


	/*
	 * IP & OP Registration Single Registration Changes --- @STARTS --- 01 September 2015
	 */
	public RegistrationBean getRegistrationDetails(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getRegistrationDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	/*
	 * IP & OP Registration Single Registration Changes --- @ENDS --- 
	 */
	/*
	 * IP Doctors Notes Changes --- @STARTS --- 07 September 2015
	 */
	public void insertDoctorNotes4IP(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.insertDoctorNotes4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}			
	public ArrayList<InPatientBean> getAllDoctorNotes4IP(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipConsultDao.getAllDoctorNotes4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void saveDeactivateMedicine(InPatientBean ipBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			ipConsultDao.saveDeactivateMedicine(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public List getAllTestofReferralPatient(RegistrationBean registrationBean) throws DaoException 
	{

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllTestofReferralPatient(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateSendOutAck(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.updateSendOutAck(registrationBean,request);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Laboratory logic */

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public String getConsultid(String linked_office) throws DaoException 
	{


		try {
			eclinicDaoManager.startTransaction();
			linked_office= registrationDao.getConsultid(linked_office);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return linked_office;
	}

	public void insertActionTakenNotes4IP(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.insertActionTakenNotes4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List getAllTemplates(RegistrationBean registrationBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllTemplates(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateInvVerifyAfterPosting(AccountBean accountBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			accountDao.updateInvVerifyAfterPosting(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateInvAuthorizeAfterPosting(AccountBean accountBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			// entry_id field contains the primary key of corresponding table,
			// eg: purchase_master,receipts,payments etc.
			accountDao.updateInvAuthorizeAfterPosting(accountBean);

			// account_id field contains actual entry ID of voucher_details table
			if(null != accountBean.getAccount_id() && !accountBean.getAccount_id().equals("")){
				accountDao.updateAccountHeadId(accountBean);
			}

			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllSelectedRecords(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();

			list=(ArrayList)registrationDao.getAllSelectedRecords(registrationBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 


	public String getOpNumber(RegistrationBean registrationBean) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getOpNumber(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public ArrayList getAllSelectedOpNumbers(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList List=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			List=registrationDao.getAllSelectedOpNumbers(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}return List;
	}


	public void deleteAllSelectedOpNumbers(RegistrationBean registrationBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.deleteAllSelectedOpNumbers(registrationBean);
			eclinicDaoManager.commitTransaction();
			/*Aduit Log given For insertMergeDetails() */

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void mergePatientDetails(RegistrationBean registrationBean) throws DaoException 

	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.mergePatientDetails(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}



	public void insertMergeDetails(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			registrationDao.insertMergeDetails(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT",
					"Merged Patient Records (" + registrationBean.getNew_op() + ") with " + registrationBean.getOp_number(), registrationBean.getOp_number(),
					registrationBean.getConsult_id(), "merge_historydtls");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public ArrayList<RegistrationBean> getAllGenericNames4Report(RegistrationBean abean) throws DaoException {
		ArrayList<RegistrationBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)registrationDao.getAllGenericNames4Report(abean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getPatientsDetails(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList<RegistrationBean> patinets_list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			patinets_list = (ArrayList<RegistrationBean>)setupDao.getPatientsDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return patinets_list;
	}


	// ------------------ Investigation Setup - Rework -- START 12 Sep 2015------------------//
	public String getTestParameterNameExists(String tname) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getTestParameterNameExists(tname);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<SetupBean> getAllLabEquipments() throws DaoException {
		List<SetupBean> labEquipList=null;
		try {
			eclinicDaoManager.startTransaction();
			labEquipList = setupDao.getAllLabEquipments();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return labEquipList;

	}

	public List<SetupBean> getAllLabMethods() throws DaoException {
		List<SetupBean> labMethdList=null;
		try {
			eclinicDaoManager.startTransaction();
			labMethdList = setupDao.getAllLabMethods();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return labMethdList;

	}

	public List<SetupBean> getAllLabContainers() throws DaoException {
		List<SetupBean> labContList=null;
		try {
			eclinicDaoManager.startTransaction();
			labContList = setupDao.getAllLabContainers();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return labContList;

	}

	public void insertTestParameterMapping(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertTestParameterMapping(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateTestParameterMapping(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			RegistrationBean oldBean = getTestParameterMappingById(registrationBean);

			eclinicDaoManager.startTransaction();
			setupDao.updateTestParameterMapping(registrationBean);
			eclinicDaoManager.commitTransaction();

			if (oldBean != null) {
				auditLogEntry(oldBean, request, "UPDATE", "Updated a Test Parameter Mapping", null, null, "test_parameter_mapping");
			}
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public void deleteTestParameterMapping(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			RegistrationBean oldBean = getTestParameterMappingById(registrationBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteTestParameterMapping(registrationBean);
			eclinicDaoManager.commitTransaction();

			if (oldBean != null) {
				auditLogEntry(oldBean, request, "DELETE", "Deleted a Test Parameter Mapping from Master", null, null,"test_parameter_mapping");
			}
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public List<RegistrationBean> getAllTestParameterMappings(RegistrationBean registrationBean) throws DaoException {
		List<RegistrationBean> testParameterMappings=null;
		try {
			eclinicDaoManager.startTransaction();
			testParameterMappings = setupDao.getAllTestParameterMappings(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return testParameterMappings;
	}

	public RegistrationBean getTestParameterMappingById(RegistrationBean registrationBean) throws DaoException {
		RegistrationBean parameterMapping=null;
		try {
			eclinicDaoManager.startTransaction();
			parameterMapping = setupDao.getTestParameterMappingById(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return parameterMapping;
	}

	public void insertTestParameter(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertTestParameter(registrationBean);
			eclinicDaoManager.commitTransaction();

			/*if (null != registrationBean) {
					admin.auditLogEntry(registrationBean, request, "INSERT", "Mapped a parameter to test", null, null, "test_parameter");
				}*/

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateTestParameter(RegistrationBean registrationBean) throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			setupDao.updateTestParameter(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateProfileTestOrder(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.updateProfileTestOrder(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public List<RegistrationBean> getAltResultSet(RegistrationBean registrationBean) throws DaoException {
		List<RegistrationBean> altResSets=null;
		try {
			eclinicDaoManager.startTransaction();
			altResSets = setupDao.getAltResultSet(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return altResSets;
	}

	public void insertAltResultSet(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertAltResultSet(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateAltResultSet(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.updateAltResultSet(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void insertTestProfileSetup(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertTestProfileSetup(registrationBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List<RegistrationBean> getAllTestsInProfile(RegistrationBean registrationBean) throws DaoException {
		List<RegistrationBean> testProfiles=null;
		try {
			eclinicDaoManager.startTransaction();
			testProfiles = setupDao.getAllTestsInProfile(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return testProfiles;
	}

	public String getLabIdNoByContainer(SetupBean setupBean) throws DaoException {
		String labidno="";
		try {
			eclinicDaoManager.startTransaction();
			labidno=setupDao.getLabIdNoByContainer(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return labidno;
	}
	
	public String getLabIdNoByConatianerSuffix(SetupBean setupBean) throws DaoException {
		String labidno="";
		try {
			eclinicDaoManager.startTransaction();
			labidno=setupDao.getLabIdNoByConatianerSuffix(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return labidno;
	}

	public void deleteUnusedTestResultEntries(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.deleteUnusedTestResultEntries(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "DELETE", "Deleted Test Result Entries Not Mapped to The Selected Equipment. (EqpIds Not Selected = "+registrationBean.getEqp_id()+") ", registrationBean.getOp_number(),registrationBean.getConsult_id(),"test_results");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public String checkIfTestResultPresent(RegistrationBean registrationBean) throws DaoException {
		String count = "";
		try {
			eclinicDaoManager.startTransaction();
			count = (String) registrationDao.checkIfTestResultPresent(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return count;
	}

	public List<SetupBean> getTestEqpResultDetails(RegistrationBean registrationBean) throws DaoException {
		List<SetupBean> testEqpDtls=null;
		try {
			eclinicDaoManager.startTransaction();
			testEqpDtls = setupDao.getTestEqpResultDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return testEqpDtls;
	}

	public String getAllSampleCollectedTestIds(RegistrationBean registrationBean) throws DaoException  {
		String testIds="";
		try {
			eclinicDaoManager.startTransaction();
			testIds=registrationDao.getAllSampleCollectedTestIds(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return testIds;
	}

	public void insertTestSampleReject(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertTestSampleReject(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Rejected a Test Sample(Lab ID No) from Laboratory Accession Module", registrationBean.getOp_number(),registrationBean.getConsult_id(),"test_sample_reject");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public RegistrationBean getTestSampleRejectByLabIdNo(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationBean = registrationDao.getTestSampleRejectByLabIdNo(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return registrationBean;
	}

	public List<SetupBean> getAllEquipsOfParticularTest(SetupBean setupBean) throws DaoException {
		List<SetupBean> equipList=null;
		try {
			eclinicDaoManager.startTransaction();
			equipList = setupDao.getAllEquipsOfParticularTest(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return equipList;
	}
	public List<RegistrationBean> getTestIdsFromResult(RegistrationBean registrationBean) throws DaoException {
		List<RegistrationBean> testList=null;
		try {
			eclinicDaoManager.startTransaction();
			testList = registrationDao.getTestIdsFromResult(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return testList;
	}
	public List<RegistrationBean> getAllProfileTestsById(RegistrationBean profileTestBean) throws DaoException {
		List<RegistrationBean> profileList=null;
		try {
			eclinicDaoManager.startTransaction();
			profileList = setupDao.getAllProfileTestsById(profileTestBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return profileList;
	}
	// ------------------ Investigation Setup - Rework -- END 12 Sep 2015------------------//

	//IP FINANCE - DAILY TRANSACTION POSTING ----- @STARTS
	public ArrayList<InPatientBean> getAllIPInvoices4Posting(InPatientBean ipBean) throws DaoException 
	{
		ArrayList<InPatientBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list = ipBillingDao.getAllIPInvoices4Posting(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<InPatientBean> getAllIPPreviousCreditReceipts4Posting(InPatientBean ipBean) throws DaoException 
	{
		ArrayList<InPatientBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list = ipBillingDao.getAllIPPreviousCreditReceipts4Posting(ipBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	//IP FINANCE - DAILY TRANSACTION POSTING ----- @ENDS


	public String getAllAccountChildNames() throws DaoException 
	{
		String child_name = "";
		try {        	
			eclinicDaoManager.startTransaction();
			child_name = accountDao.getAllAccountChildNames();
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return child_name;
	}
	public void insertPaymentToDetails(PaymentBean paymentBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			paymentDao.insertPaymentToDetails(paymentBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log Given in Action */
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updatePaymentsToDetails(PaymentBean paymentBean, HttpServletRequest request) throws DaoException 
	{
		try { 
			//PaymentBean oldBean = getPaymentToDetailsById(paymentBean);
			eclinicDaoManager.startTransaction();
			paymentDao.updatePaymentsToDetails(paymentBean);
			eclinicDaoManager.commitTransaction();
			/* Audit Log Given in Action */
			//auditLogEntry(oldBean, request, "UPDATE", "Updated Payment To Details -  " + paymentBean.getNarration(),null,null,"payments_to");

		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deletePaymentsTo(String id) throws DaoException 
	{
		try {   
			eclinicDaoManager.startTransaction();
			paymentDao.deletePaymentsTo(id);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}


	/***  REFERRAL CLINICS AND REFERRAL DOCTORS --- REWORK --- @ START 21 OCT 2015 ***/
	public ArrayList getAllZones() throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllZones();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllDrivers() throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllDrivers();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllClinicRegion() throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllClinicRegion();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabTestListClinicWise(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllLabTestListClinicWise(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabTestPriceListClinicWise(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllLabTestPriceListClinicWise(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllReferClinics(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllReferClinics(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabTestList4DocIncentive(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllLabTestList4DocIncentive(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabTestPriceListDocWise(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllLabTestPriceListDocWise(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/***  REFERRAL CLINICS AND REFERRAL DOCTORS --- REWORK --- @ END 21 OCT 2015 ***/

	/*** ELAB INTEGRATION TO ECLINIC ------ @START 25 OCTOBER 2015 ***/
	public void insertConsultLabDetails(RegistrationBean labBean, HttpServletRequest request) throws DaoException
	{
		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertConsultLabDetails(labBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(labBean, request, "INSERT", "Registered a New Patient/ Revisit ", labBean.getOp_number(),labBean.getConsult_id(),"consult_lab_details");


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateConsultLabDetails(RegistrationBean labBean, HttpServletRequest request) throws DaoException
	{
		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.updateConsultLabDetails(labBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(labBean, request, "UPDATE", "Updated Patient Registration Details.", labBean.getOp_number(),labBean.getConsult_id(),"consult_lab_details");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	private RegistrationBean getOPConsultLabById(RegistrationBean labBean) throws DaoException {
		RegistrationBean consultLabBean = null;
		try {
			eclinicDaoManager.startTransaction();
			consultLabBean = laboratoryDao.getOPConsultLabById(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return consultLabBean;
	}

	public List<RegistrationBean> getAllOPListLab(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllOPListLab(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList<RegistrationBean> getReferalClinicsTotal4Lab(PurchaseBean purchaseBean)  throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getReferalClinicsTotal4Lab(purchaseBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllInvoiceListofRefClinic(PurchaseBean purchaseBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllInvoiceListofRefClinic(purchaseBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/********************** Lab Report starts ****************************************************************************/
	public ArrayList getAllDetforLabTatReport(RegistrationBean labBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllDetforLabTatReport(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllAccessTAT(RegistrationBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllAccessTAT(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllTatAnalyticalDetails(RegistrationBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllTatAnalyticalDetails(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList<RegistrationBean> getAllProblemSampleRejection(RegistrationBean labBean)throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllProblemSampleRejection(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllReverseAuthentication(RegistrationBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllReverseAuthentication(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllConsultLabTest4Incentive3(SetupBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllConsultLabTest4Incentive3(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllCreditBillsSummery(SetupBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllCreditBillsSummery(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllTestCategoryNames(RegistrationBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllTestCategoryNames(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getWorkLoadRegister(RegistrationBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getWorkLoadRegister(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/********************** Lab Report ends ****************************************************************************/
	public List<RegistrationBean> getDynamicWS2generate(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getDynamicWS2generate(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getMachineWiseTests4WS(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getMachineWiseTests4WS(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public RegistrationBean getWorksheetByID(RegistrationBean labBean) throws DaoException 
	{
		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getWorksheetByID(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getAllWorksheetList(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllWorksheetList(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getLabIDsFromWorkSheet(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getLabIDsFromWorkSheet(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getContainerGroups4Test(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getContainerGroups4Test(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getAllTestofParticularPatientResult(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllTestofParticularPatientResult(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getAllProblemSampleList(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllProblemSampleList(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public RegistrationBean getPblmSmplPatientDetails(String value) throws DaoException 
	{
		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getPblmSmplPatientDetails(value);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getMailDetailsByPatient(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getMailDetailsByPatient(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getReferClinics(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getReferClinics(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getClinicLabtestDetails(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getClinicLabtestDetails(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getConsultIdByClinicIds(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getConsultIdByClinicIds(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void updateConsultLabtest(RegistrationBean labBean, HttpServletRequest request) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.updateConsultLabtest(labBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(labBean, request, "UPDATE", "Updated Price Details Of Test", labBean.getOp_number(),labBean.getConsult_id(),"consult_labtest");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public List<RegistrationBean> getAllRejectReasonsLab(SetupBean setBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllRejectReasonsLab(setBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public RegistrationBean getRejectReasonLabById(SetupBean setBean) throws DaoException 
	{
		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getRejectReasonLabById(setBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void insertRejectReasonLab(SetupBean setBean, HttpServletRequest request) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertRejectReasonLab(setBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setBean, request, "INSERT", "Added Reject Reason "+setBean.getRej_reason()+" From Master", null,null,"reject_reason_master");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deleteRejectReasonLab(String value, HttpServletRequest request) throws DaoException 
	{
		try {
			SetupBean setBean = new SetupBean();
			setBean.setReason_id(value);
			RegistrationBean oldBean = getRejectReasonLabById(setBean);

			eclinicDaoManager.startTransaction();
			laboratoryDao.deleteRejectReasonLab(value);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "DELETE", "Deleted Reject Reason "+oldBean.getRej_reason()+" From Master", null,null,"reject_reason_master");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateRejectReasonLab(SetupBean setBean, HttpServletRequest request) throws DaoException 
	{
		try {
			RegistrationBean oldBean = getRejectReasonLabById(setBean);

			eclinicDaoManager.startTransaction();
			laboratoryDao.updateRejectReasonLab(setBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Updated Reject Reason "+oldBean.getRej_reason()+" From Master", null,null,"reject_reason_master");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	/*** ELAB INTEGRATION TO ECLINIC ------ @END ***/

	/*** Cost Analysis-Oriana***/
	public ArrayList getRevenueforCostAnalysis(SetupBean setupBean) throws DaoException{
		ArrayList<SetupBean> list = new ArrayList<SetupBean>();
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getRevenueforCostAnalysis(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/*** Cost Analysis-Oriana***/

	public ArrayList getCosumptionCostAnalysisDet(SetupBean pBean) throws DaoException{
		ArrayList<PurchaseBean> list = new ArrayList<PurchaseBean>();
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<PurchaseBean>)setupDao.getCosumptionCostAnalysisDet(pBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void saveCostAnalysisHeads(AccountBean accBean, HttpServletRequest request) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			setupDao.saveCostAnalysisHeads(accBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(accBean, request, "INSERT", "Added Cost Analysis Heads - " + accBean.getAccount_name(), null, null, "cost_analysis_heads");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllCostHeadsList(AccountBean accBean) throws DaoException{
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllCostHeadsList(accBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public ArrayList getDoctorsCostDetails(SetupBean setupBean) throws DaoException{
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getDoctorsCostDetails(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/*** Cost Analysis-Oriana***/

	/*********************   TAT Doc/Nurse  Start************************************************/


	public List getAllTATDetailsDoctorNursewise(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllTATDetailsDoctorNursewise(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List getAllUsersasNurse(RegistrationBean rgistrationBean) throws DaoException 
	{
		List us = null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			us=registrationDao.getAllUsersasNurse(rgistrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	/*********************   TAT Doc/Nurse  End************************************************/
	public RegistrationBean getTestIdByTestDetailsId(
			RegistrationBean registrationBean) throws DaoException {
		RegistrationBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (RegistrationBean) registrationDao
					.getTestIdByTestDetailsId(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public RegistrationBean getReferralAckDetails(RegistrationBean rgistrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getReferralAckDetails(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<RegistrationBean> getAllSendOutTestsByConsultId(RegistrationBean registrationBean) throws DaoException {
		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllSendOutTestsByConsultId(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertReferalInvoices(SetupBean setupBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertReferalInvoices(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added a Referral invoice Upon Posting Laboratory Transaction.", null,null,"referal_invoices");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList<RegistrationBean> getAllInvoiceListbyBatchId(PurchaseBean pbBean)  throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllInvoiceListbyBatchId(pbBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllConsultLabTest4IncentiveByBatchID(PurchaseBean pbBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllConsultLabTest4IncentiveByBatchID(pbBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllReferalInvoices(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllReferalInvoices(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;			
	}
	public ArrayList<SetupBean> getAllReferClinicInvoices(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) laboratoryDao.getAllReferClinicInvoices(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;			
	}
	public ArrayList<SetupBean> getAllReferClinicPaymentInvoices(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) laboratoryDao.getAllReferClinicPaymentInvoices(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;			
	}

	public ArrayList getAllConsultLabTestForPblmSmpl(RegistrationBean registrationBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllConsultLabTestForPblmSmpl(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	//QC Module - Start

	public ArrayList getAllMachinesForQc() throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getAllMachinesForQc();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllTestParametersForQc(QualityControlBean qcBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getAllTestParametersForQc(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllTestForQc() throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getAllTestForQc();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public String selectExist(QualityControlBean qcBean)
			throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = qcDao.selectExist(qcBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public void insertLotDeatils(QualityControlBean qcBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			qcDao.insertLotDeatils(qcBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(qcBean, request, "INSERT", "Added Details For a LotCode For QC", null,null,"lotcode_details");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllQcResults(QualityControlBean qcBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getAllQcResults(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList searchQcResult(QualityControlBean qcBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.searchQcResult(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllTestForEditQcResult(QualityControlBean qcBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getAllTestForEditQcResult(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllLotCodeDeatils(QualityControlBean qcBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getAllLotCodeDeatils(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLotCode() throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getAllLotCode();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLotCodeForQc(QualityControlBean qcBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getAllLotCodeForQc(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllTestsForQc(QualityControlBean qcBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getAllTestsForQc(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertQCResult(QualityControlBean qcBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			qcDao.insertQCResult(qcBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(qcBean, request, "INSERT", "Added a new QC Result", null,null,"qc_results");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateQCResult(QualityControlBean qcBean, HttpServletRequest request) throws DaoException {

		try {
			QualityControlBean oldBean = null;

			eclinicDaoManager.startTransaction();
			oldBean= qcDao.getQcResultById(qcBean);
			qcDao.updateQCResult(qcBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Updated a new QC Result", null,null,"qc_results");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getQcChart(QualityControlBean qcBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getQcChart(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllTestForQcChart(QualityControlBean qcBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getAllTestForQcChart(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public void insertQcLotcode(QualityControlBean qcBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			qcDao.insertQcLotcode(qcBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(qcBean, request, "INSERT", "Added a lot code entry for QC "+qcBean.getControl_Name()+" in Master", null,null,"lot_code_master");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}



	}

	public void deleteLotCode(String id, HttpServletRequest request) throws DaoException {

		try {
			QualityControlBean oldBean = new QualityControlBean();
			oldBean.setLot_id(id);

			eclinicDaoManager.startTransaction();
			oldBean = qcDao.getLotCodeMasterById(oldBean);
			qcDao.deleteLotCode(id);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "DELETE", "Deleted a lot code master entry for QC", null,null,"lot_code_master");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateQcLotcode(QualityControlBean qcBean, HttpServletRequest request) throws DaoException {

		try {

			eclinicDaoManager.startTransaction();
			QualityControlBean oldBean = qcDao.getLotCodeMasterById(qcBean);
			qcDao.updateQcLotcode(qcBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Updated a lot code entry for QC "+oldBean.getControl_Name()+" in Master", null,null,"lot_code_master");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getQcResultForEdit(QualityControlBean qcBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) qcDao.getQcResultForEdit(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void executeUpdateQuery(QualityControlBean qcBean)
			throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			qcDao.executeUpdateQuery(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	//QC Module - End

	public SetupBean getDeductibleCopay4Network(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getDeductibleCopay4Network(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public SetupBean getInsurarNetwork(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getInsurarNetwork(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public void updateNetwork(SetupBean setupBean, HttpServletRequest request) throws DaoException {
		try {
			SetupBean oldBean = getInsurarNetwork(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.updateNetwork(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Edited & Updated Insurance Network " + oldBean.getNetwork_type() , null, null, "insurar_network_office");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	/***************** Tadawi JCI Forms @START 04 NOV 2015 *********************************/

	public List<MedicalFormsBean> getAllMedicalFormsMaster(MedicalFormsBean medBean) throws DaoException {
		List<MedicalFormsBean> msterlist = null;
		try {
			eclinicDaoManager.startTransaction();
			msterlist = consultationDao.getAllMedicalFormsMaster(medBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return msterlist;
	}

	public List<MedicalFormsBean> getMedicalFormContents(MedicalFormsBean medicalFormsBean, boolean isSaved) throws DaoException {
		List<MedicalFormsBean> msterlist = null;
		try {
			eclinicDaoManager.startTransaction();
			msterlist = consultationDao.getMedicalFormContents(medicalFormsBean,isSaved);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return msterlist;
	}

	public List<MedicalFormsBean> getMedicalFormOptionsOfHeading(MedicalFormsBean medicalFormsBean) throws DaoException {
		List<MedicalFormsBean> msterlist = null;
		try {
			eclinicDaoManager.startTransaction();
			msterlist = consultationDao.getMedicalFormOptionsOfHeading(medicalFormsBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return msterlist;
	}

	public void insertPatientMedicalForm(MedicalFormsBean medicalFormsBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertPatientMedicalForm(medicalFormsBean);
			eclinicDaoManager.commitTransaction();

			/* Audit Log given in Action */
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List<MedicalFormsBean> getAllPatientMedicalForms(MedicalFormsBean medicalFormsBean) throws DaoException {
		List<MedicalFormsBean> msterlist = null;
		try {
			eclinicDaoManager.startTransaction();
			msterlist = consultationDao.getAllPatientMedicalForms(medicalFormsBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return msterlist;
	}


	/***************** Tadawi JCI Forms @END 04 NOV 2015 *********************************/
	public String getEndDay(int mnth,int yer)
	{
		//String label="";

		String endday="";

		switch (mnth)
		{
		case 1:
			//label="Jan "+yer;
			endday="31";
			break;
		case 2:		
		//	label="Feb "+yer;
			endday="28";
			break;
		case 3:						
		//	label="Mar "+yer;
			endday="31";
			break;
		case 4:
		//	label="Apr "+yer;
			endday="30";
			break;
		case 5:
		//	label="May "+yer;
			endday="31";
			break;
		case 6:
		//	label="Jun "+yer;
			endday="30";
			break;
		case 7:
		//	label="Jul "+yer;
			endday="31";
			break;
		case 8:
		//	label="Aug "+yer;
			endday="31";
			break;
		case 9:
		//	label="Sep "+yer;
			endday="30";
			break;
		case 10:
		//	label="Oct "+yer;
			endday="31";
			break;
		case 11:
		//	label="Nov "+yer;
			endday="30";
			break;
		case 12:
		//	label="Dec "+yer;
			endday="31";
		}
		return endday;
	}

	public String getcountofInsurarSub(SetupBean setupBean) throws DaoException {
		String str = null;
		try {

			eclinicDaoManager.startTransaction();
			str = setupDao.getcountofInsurarSub(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return str;
	}


	/********** Auto Email *******************************************************/

	public List getAllTestresult(SetupBean setupbean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllTestresult(setupbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void addTestResult(SetupBean setupbean)
			throws DaoException {

		try {

			eclinicDaoManager.startTransaction();
			laboratoryDao.addTestResult(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public SetupBean getTestResultForUpdates(
			SetupBean setupbean) throws DaoException {

		SetupBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getTestResultForUpdates(setupbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public List getTestResultDetails(SetupBean setupbean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getTestResultDetails(setupbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List isAlreadyExisting(SetupBean setupbean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.isAlreadyExisting(setupbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List getTestResultforId(SetupBean setupbean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getTestResultforId(setupbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateAuthotication(SetupBean setupbean)
			throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.updateAuthotication(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	
	public void updateReverseAuthDetails(RegistrationBean regBean)
			throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.updateReverseAuthDetails(regBean);
			laboratoryDao.updateReverseAuthTestDetails(regBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public List getAutomation(SetupBean setupbean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAutomation(setupbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List getAllDepartmentsUser(SetupBean setupbean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getAllDepartmentsUser(setupbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}




	public void insertUserDepartment(SetupBean setupbean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertUserDepartment(setupbean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupbean, request, "INSERT", "Mapped User to Department" , null, null, "department_user_mapping");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}



	}

	public void updateDepartmentsUser(SetupBean setupbean, HttpServletRequest request) throws DaoException {

		try {

			eclinicDaoManager.startTransaction();
			setupDao.updateDepartmentsUser(setupbean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupbean, request, "UPDATE", "Edited & Updated Department-User Mapping" , null, null, "department_user_mapping");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}



	}

	public void adjustAmountReceived(RegistrationBean registrationBean, RegistrationBean postingBean, String recno,UserBean userBean, HttpServletRequest request) throws DaoException {

		try {
			SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
			SimpleDateFormat sdf1=new SimpleDateFormat("yyyy-MM-dd");
			eclinicDaoManager.startTransaction();
			if(registrationBean!=null)
			{
				DecimalFormat df=new DecimalFormat("#########.00");
				double tempRec=0;	
				String strVal="",cardType = "";
				//String pbcdHead = "",pbchHead = "",outrhd="",cdchd = "",poHead = "";
				String cbdChild = "";
				//String frmd = postingBean.getBill_date().replaceAll("-", "");
				//String fromdate = postingBean.getBill_date();
				AccountBean accBean=new AccountBean();
				//AccountBean accountBean=new AccountBean();
				accBean.setOffice_id(userBean.getOffice_id());
				//RegistrationBean regbean = new RegistrationBean();
				//double netclaim=0.0;


				/*** getting child id for each code ***/
				//accBean.setQuery("select clinic_id from referclinics where rdoctor_id='"+registrationBean.getRdoctor_id()+"'");
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("referclinics");
				parameterBean.setField_name("clinic_id");
				parameterBean.setField_name1("rdoctor_id");
				parameterBean.setField_value1(registrationBean.getRdoctor_id());
				parameterBean.setOffice_id(null);
				parameterBean.setField_name2(null);
				String clinicid=commonDao.fetchValueWithSingleParam(parameterBean);
				parameterBean=null;

				//accBean.setQuery("select child_id from account_child where link_id='"+clinicid+"' and child_type='REFC'");
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("account_child");
				parameterBean.setField_name("child_id");
				parameterBean.setField_name1("link_id");
				parameterBean.setField_value1(clinicid);
				parameterBean.setOffice_id(null);
				parameterBean.setField_name2("child_type='REFC'");
			//	String clinicchildid = commonDao.fetchValueWithSingleParam(parameterBean);
				parameterBean=null;

				//accBean.setQuery("select child_name from account_child where link_id='"+clinicid+"' and child_type='REFC'");
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("account_child");
				parameterBean.setField_name("child_name");
				parameterBean.setField_name1("link_id");
				parameterBean.setField_value1(clinicid);
				parameterBean.setOffice_id(null);
				parameterBean.setField_name2("child_type='REFC'");
				String clinicname = commonDao.fetchValueWithSingleParam(parameterBean);
				parameterBean=null;
				/*** getting child id for each code ***/
				if(clinicname!=null && !clinicname.equals(""))
					registrationBean.setClinic_name(clinicname);
				else
					registrationBean.setClinic_name("");

				registrationBean.setDtconvert("not");
				registrationBean.setConsult_date(registrationBean.getConsult_date());
				//accBean.setQuery("SELECT if(max(0+voucher_no)+1 is null,1,max(0+voucher_no)+1) FROM voucher_details");					
				Integer vouchNumber = Integer.parseInt(commonDao.fetchMaxVoucherno());


				PaymentBean payBean=new PaymentBean();
				payBean.setDtconvert("not");
				payBean.setPayment_date(sdf.format(new Date()));
				payBean.setOffice_id(userBean.getOffice_id());
				payBean.setEntry_id("DTLAB"+registrationBean.getConsult_id());
				payBean.setVoucher_no(vouchNumber+"");
				payBean.setEnteredby(userBean.getUser_id());
				payBean.setVoucher_type("Journal");
				payBean.setDoctor_id("0");
				payBean.setProject_id("0");
				payBean.setEnteredby(userBean.getUser_id());
				payBean.setOpening("N");
				payBean.setNewentry("N");
				payBean.setVerify_status("Y");
				payBean.setAuth_status("Y");
				//String insapp="N";

				/***Insert  Cash Daily Collection**/
				/*regbean.setQuery("select round(sum(receipt_generated.receipt_amount1),2) "
						+ "from doctor_consult,receipt_generated where doctor_consult.office_id='"+userBean.getOffice_id()+"' "
						+ "and doctor_consult.consult_id=receipt_generated.consult_id and doctor_consult.consult_id='"+registrationBean.getConsult_id()+"' "
						+ "and receipt_generated.cancel_status='N' and date(receipt_generated.receipt_date)='"+sdf1.format(new Date())+"'  "
						+ "and receipt_generated.receipt_no='"+recno+"' and doctor_consult.bill_submit='Y' "
						+ "and doctor_consult.direct_lab='Y' and doctor_consult.refer_status='Y'  "
						+ "and receipt_generated.advance_status='N'");*/
				
				parameterBean = new ParameterBean();
				parameterBean.setField_name(" receipt_generated.receipt_amount1");
				parameterBean.setOffice_id(userBean.getOffice_id());
				parameterBean.setConsult_id(registrationBean.getConsult_id());
				parameterBean.setCancel_status("N");
				parameterBean.setReceipt_date(sdf1.format(new Date()));
				parameterBean.setReceipt_no(recno);
				parameterBean.setRefer_status("Y");
				parameterBean.setAdvance_status("N");
				parameterBean.setField_name2(" doctor_consult.direct_lab='Y'");
				try{
					/*strVal=registrationDao.isAlreadyExist(regbean);*/
					strVal=commonDao.fetchRoundOfSumofReceipt(parameterBean);
					if(strVal==null)
						strVal="0.00";
				}catch(Exception e){
					strVal="0.00";
					e.printStackTrace();
				}
				parameterBean=null;
				
				tempRec=0;
				tempRec=tempRec+Double.parseDouble(strVal);
				if(Double.parseDouble(strVal)>0){
					payBean.setHead_id(accHeadsBean.getCash_hand_head());
					payBean.setCredit_amount("0");
					payBean.setDebit_amount(""+Double.parseDouble(strVal));
					payBean.setPayment_type("D");
					payBean.setRemarks("Amount Received by Cash/Reg No-'"+registrationBean.getOp_number()+"'/Invoice No-'"+postingBean.getBill_no()+"'/Ref from '"+registrationBean.getClinic_name()+"'");
					payBean.setChild_id(accHeadsBean.getCash_daily_child());


					if(payBean.getChild_id()!= null && (!payBean.getChild_id().equals("")))
						paymentDao.insertVoucherDetails(payBean);
				}
				/***Insert  Cash Daily Collection**/

				/***Insert  Card Daily Collection **/
				/*regbean.setQuery("select card_type from doctor_consult,receipt_generated where doctor_consult.office_id='"+userBean.getOffice_id()+"' "
						+ "and doctor_consult.consult_id=receipt_generated.consult_id and receipt_generated.cancel_status='N'"
						+ " and  doctor_consult.bill_submit='Y' and doctor_consult.refer_status='Y' and doctor_consult.consult_id='"+registrationBean.getConsult_id()+"' "
						+ "and date(receipt_generated.receipt_date)='"+sdf1.format(new Date())+"'  "
						+ "and receipt_generated.receipt_no='"+recno+"' and doctor_consult.direct_lab='Y'");
				cardType = registrationDao.isAlreadyExist(regbean);*/
				
				parameterBean = new ParameterBean();
				parameterBean.setField_name(" card_type");
				parameterBean.setOffice_id(userBean.getOffice_id());
				parameterBean.setCancel_status("N");
				parameterBean.setRefer_status("Y");
				parameterBean.setConsult_id(registrationBean.getConsult_id());
				parameterBean.setReceipt_date(sdf1.format(new Date()));
				parameterBean.setReceipt_no(recno);
				parameterBean.setField_name2(" doctor_consult.direct_lab='Y'");
				
				cardType = commonDao.fetchDetailsOfReceipts(parameterBean);
				parameterBean=null;
				/*regbean.setQuery("select round(sum(receipt_generated.receipt_amount2),2) from doctor_consult,receipt_generated "
						+ "where doctor_consult.office_id='"+userBean.getOffice_id()+"' "
						+ "and doctor_consult.consult_id=receipt_generated.consult_id and doctor_consult.consult_id='"+registrationBean.getConsult_id()+"' "
						+ "and receipt_generated.cancel_status='N' and date(receipt_generated.receipt_date)='"+sdf1.format(new Date())+"'  "
						+ "and receipt_generated.receipt_no='"+recno+"' and doctor_consult.bill_submit='Y' "
						+ "and doctor_consult.direct_lab='Y' and doctor_consult.refer_status='Y'  "
						+ "and receipt_generated.advance_status='N'");*/
				
				parameterBean = new ParameterBean();
				parameterBean.setField_name(" receipt_generated.receipt_amount2");
				parameterBean.setOffice_id(userBean.getOffice_id());
				parameterBean.setConsult_id(registrationBean.getConsult_id());
				parameterBean.setCancel_status("N");
				parameterBean.setReceipt_date(sdf1.format(new Date()));
				parameterBean.setReceipt_no(recno);
				parameterBean.setRefer_status("Y");
				parameterBean.setAdvance_status("N");
				parameterBean.setField_name2(" doctor_consult.direct_lab='Y'");
				try{
					/*strVal=registrationDao.isAlreadyExist(regbean);*/
					strVal=commonDao.fetchRoundOfSumofReceipt(parameterBean);
					if(strVal==null)
						strVal="0.00";
				}catch(Exception e){
					strVal="0.00";
					e.printStackTrace();			
				}
				parameterBean=null;

				tempRec=tempRec+Double.parseDouble(strVal);
				if(Double.parseDouble(strVal)>0){
					payBean.setHead_id(accHeadsBean.getBank_acc_card());
					payBean.setCredit_amount("0");
					payBean.setDebit_amount(""+Double.parseDouble(strVal));
					payBean.setPayment_type("D");
					payBean.setRemarks("Amount Received by Card/Reg No-'"+registrationBean.getOp_number()+"'/Invoice No-'"+postingBean.getBill_no()+"'/Ref from '"+registrationBean.getClinic_name()+"'");
					//accBean.setQuery("select child_id from account_child where child_name='"+cardType+"'");
					
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("account_child");
					parameterBean.setField_name("child_id");
					parameterBean.setField_name1("child_name");
					parameterBean.setField_value1(cardType);
					parameterBean.setOffice_id(null);
					parameterBean.setField_name2(null);
					cbdChild =  commonDao.fetchValueWithSingleParam(parameterBean);
					parameterBean=null;
					payBean.setChild_id(cbdChild); 
					if(payBean.getChild_id()!= null && (!payBean.getChild_id().equals("")))
						paymentDao.insertVoucherDetails(payBean);
				}
				/***Insert  Card Daily Collection **/


				/*regbean.setQuery("select round(sum(receipt_generated.receipt_amount3),2) from doctor_consult,receipt_generated "
						+ "where doctor_consult.office_id='"+userBean.getOffice_id()+"' and doctor_consult.consult_id=receipt_generated.consult_id "
						+ "and doctor_consult.consult_id='"+registrationBean.getConsult_id()+"' and receipt_generated.cancel_status='N' "
						+ "and date(receipt_generated.receipt_date)='"+sdf1.format(new Date())+"'  "
						+ "and receipt_generated.receipt_no='"+recno+"' and doctor_consult.bill_submit='Y' and doctor_consult.direct_lab='Y' "
						+ "and doctor_consult.refer_status='Y'  and receipt_generated.advance_status='N'");*/
				
				parameterBean = new ParameterBean();
				parameterBean.setField_name(" receipt_generated.receipt_amount3");
				parameterBean.setOffice_id(userBean.getOffice_id());
				parameterBean.setConsult_id(registrationBean.getConsult_id());
				parameterBean.setCancel_status("N");
				parameterBean.setReceipt_date(sdf1.format(new Date()));
				parameterBean.setReceipt_no(recno);
				parameterBean.setRefer_status("Y");
				parameterBean.setAdvance_status("N");
				parameterBean.setField_name2(" doctor_consult.direct_lab='Y'");
				
				try{
					/*strVal=registrationDao.isAlreadyExist(regbean);*/
					strVal=commonDao.fetchRoundOfSumofReceipt(parameterBean);
					if(strVal==null)
						strVal="0.00";
				}catch(Exception e){
					strVal="0.00";
					e.printStackTrace();	
				}
				parameterBean=null;
				tempRec=tempRec+Double.parseDouble(strVal);

				if(Double.parseDouble(strVal)>0){
					payBean.setHead_id(accHeadsBean.getCheq_rec_daily_col());
					payBean.setCredit_amount("0");
					payBean.setDebit_amount(""+Double.parseDouble(strVal));
					payBean.setPayment_type("D");
					payBean.setRemarks("Amount Received by Cheque/Reg No-'"+registrationBean.getOp_number()+"'/Invoice No-'"+postingBean.getBill_no()+"'/Ref from '"+registrationBean.getClinic_name()+"'");
					payBean.setChild_id(accHeadsBean.getFrom_patient_child()); 
					if(payBean.getChild_id()!= null && (!payBean.getChild_id().equals("")))
						paymentDao.insertVoucherDetails(payBean);
				}

				if(tempRec>0)
				{
					payBean.setHead_id(accHeadsBean.getAcc_rec_head());
					payBean.setCredit_amount(df.format(tempRec));
					payBean.setDebit_amount("0");
					payBean.setPayment_type("C");
					payBean.setRemarks("Outstanding cash Received from patient/Reg No-'"+registrationBean.getOp_number()+"'/Invoice No-'"+postingBean.getBill_no()+"'/Ref from '"+registrationBean.getClinic_name()+"'");
					payBean.setChild_id(accHeadsBean.getPat_out_child());						

					if(payBean.getChild_id()!= null && (!payBean.getChild_id().equals("")))
						paymentDao.insertVoucherDetails(payBean);
				}

				/*registrationBean.setQuery("update voucher_details set verify_status='Y',auth_status='Y' where voucher_no='"+vouchNumber+"'");
				registrationDao.deleteQuery(registrationBean);*/
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("voucher_details");
				parameterBean.setField_name("verify_status='Y',auth_status='Y'");
				parameterBean.setField_name1("voucher_no='"+vouchNumber+"'");
				commonDao.updateQueryInCommon(parameterBean);
				parameterBean=null;

				accBean.setAccount_id(payBean.getEntry_id());
				accountDao.updateAccountHeadId(accBean);

			}

			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Adjusted Amount Received For " + registrationBean.getConsult_date() , null, null, "voucher_details");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List getAppointIncomeDocWise(RegistrationBean registrationBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAppointIncomeDocWise(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	

	public void updatePreApprRequestStatusByConsultId(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updatePreApprRequestStatusByConsultId(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "UPDATE", "Updated PreApproval Request Status Upon Authorization Details update.", registrationBean.getOp_number(),registrationBean.getConsult_id(),registrationBean.getTablename());


		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	/** Added By Revathi - Overdue Payments & Receipts Report -START **/
	public ArrayList<InsuranceBean> getAllReferClinicOverduePayments(InsuranceBean ibean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<InsuranceBean>) insuranceDao.getAllReferClinicOverduePayments(ibean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<InsuranceBean> getAllReferClinicOverdueReceipts(InsuranceBean ibean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<InsuranceBean>) insuranceDao.getAllReferClinicOverdueReceipts(ibean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/** Added By Revathi - Overdue Payments & Receipts Report -END **/

	/** Methods Added For AuditLog - Fetching Old Bean Values - START **/

	public QualityControlBean getLotCodeMasterById(QualityControlBean qcBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			qcBean = qcDao.getLotCodeMasterById(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return qcBean;
	}

	public QualityControlBean getLotCodeDetailsById(QualityControlBean qcBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			qcBean = qcDao.getLotCodeDetailsById(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return qcBean;
	}

	public QualityControlBean getQcResultById(QualityControlBean qcBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			qcBean = qcDao.getQcResultById(qcBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return qcBean;
	}

	public SetupBean getTestDetailsByTestDtlsId(SetupBean setupBean) throws DaoException {
		SetupBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getTestDetailsByTestDtlsId(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public HistoryPresentIllBean getHOPIById(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			historyPresentIllBean = consultationDao.getHOPIById(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return historyPresentIllBean;
	}

	public HistoryPresentIllBean getPatientROSchildById(HistoryPresentIllBean hopiBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			hopiBean = registrationDao.getPatientROSchildById(hopiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return hopiBean;
	}

	public GlassPrescriptionBean getGlassPrescriptionById(GlassPrescriptionBean gpBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			gpBean = consultationDao.getGlassPrescriptionById(gpBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return gpBean;
	}

	public HistoryPresentIllBean getPatientHistoryById(HistoryPresentIllBean historyPresentIllBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			historyPresentIllBean = consultationDao.getPatientHistoryById(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return historyPresentIllBean;

	}



	public AssetManageBean getLocationById(AssetManageBean assetBean) throws DaoException {
		AssetManageBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = assetManageDao.getLocationById(assetBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public AssetManageBean getAssetmaintenanceInfoById(AssetManageBean assetBean) throws DaoException {
		AssetManageBean List = null;
		try {
			eclinicDaoManager.startTransaction();
			List = assetManageDao.getAssetmaintenanceInfoById(assetBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return List;
	}





	public PaymentBean getVoucherDetailsbyEid(PaymentBean paymentBean) throws DaoException {
		PaymentBean list = null;
		try {
			eclinicDaoManager.startTransaction();

			list = (PaymentBean) paymentDao.getVoucherDetailsbyEid(paymentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public PaymentBean getPaymentToDetailsById(PaymentBean Pbean) throws DaoException {
		PaymentBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = paymentDao.getPaymentToDetailsById(Pbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public PaymentBean getVoucherDetailsbyLNo(PaymentBean Pbean) throws DaoException {
		PaymentBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = paymentDao.getVoucherDetailsbyLNo(Pbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public PaymentBean getReceiptEditById(PaymentBean paymentBean) throws DaoException {
		PaymentBean list = null;
		try {
			eclinicDaoManager.startTransaction();

			list = (PaymentBean) receiptDao.getReceiptEditById(paymentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public PaymentBean getClaimReconcileById(PaymentBean paymentBean) throws DaoException {
		PaymentBean list = null;
		try {
			eclinicDaoManager.startTransaction();

			list = (PaymentBean) receiptDao.getClaimReconcileById(paymentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public UserBean getNurseDoctorById(UserBean userBean) throws DaoException {
		UserBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = loginDao.getNurseDoctorById(userBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public UserBean getUserDocsById(UserBean userBean) throws DaoException {
		UserBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = loginDao.getUserDocsById(userBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public AppointmentBean getTimeslots(AppointmentBean appointmentBean) throws DaoException {
		AppointmentBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = appointDao.getTimeslots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public AppointmentBean getResourceTypeById(AppointmentBean appointmentBean) throws DaoException {
		AppointmentBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = appointDao.getResourceTypeById(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public AppointmentBean getResourceNameById(AppointmentBean appointmentBean) throws DaoException {
		AppointmentBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = appointDao.getResourceNameById(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public SetupBean getDiagnosisCategoryById(SetupBean setupBean) throws DaoException {
		SetupBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getDiagnosisCategoryById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public SetupBean getInsurarSubById(SetupBean setupBean) throws DaoException {
		SetupBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getInsurarSubById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public SetupBean getNetworkInsById(SetupBean setupBean) throws DaoException {
		SetupBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getNetworkInsById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public SetupBean getCountriesById(SetupBean setupBean) throws DaoException {
		SetupBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getCountriesById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public RegistrationBean getDiagramsById(RegistrationBean regbean) throws DaoException {
		RegistrationBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getDiagramsById(regbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public SetupBean getDepartmentById(RegistrationBean regbean) throws DaoException {
		SetupBean setupBean = null;
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getDepartmentById(regbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public SetupBean getInsuranceProviderById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getInsuranceProviderById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public SetupBean getReferDoctorById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getReferDoctorById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public SetupBean getProcedureSetupById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getProcedureSetupById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public SetupBean getFindSourceById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getFindSourceById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public SetupBean getDoctorById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getDoctorById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public SetupBean getResidenceAreaById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getResidenceAreaById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public SetupBean getFindUsOptionsById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getFindUsOptionsById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public SetupBean getFavouriteById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getFavouriteById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public SetupBean getLabUnitById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getLabUnitById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	/** Methods Added For AuditLog - Fetching Old Bean Values - END **/

	// HRMS - Eclinic Integation Changes -------- @Starts -------------
	public UserBean getUserLoginDetails(LoginBean loginBean) throws DaoException {
		UserBean userDetails = null;
		try {
			eclinicDaoManager = DaoManager.getInstance("eclinicDaoManager");
			eclinicDaoManager.startTransaction();
			userDetails = loginDao.getUserLoginDetails(loginBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	}

	public void insertModuleAlloted(HierarchySetupBean hierarchyBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			hierarchyDao.insertModuleAlloted(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deleteModuleAlloted(String value) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			hierarchyDao.deleteModuleAlloted(value);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList<HierarchySetupBean> getAllModuleAlloted(HierarchySetupBean hierarchyBean) throws DaoException {
		ArrayList<HierarchySetupBean> logList = null;
		try {
			eclinicDaoManager.startTransaction();
			logList = hierarchyDao.getAllModuleAlloted(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}

	public void insertSubModuleAlloted(HierarchySetupBean hierarchyBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			hierarchyDao.insertSubModuleAlloted(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deleteSubModuleAlloted(HierarchySetupBean hierarchyBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			hierarchyDao.deleteSubModuleAlloted(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList<HierarchySetupBean> getAllSubModulesByModuleId(HierarchySetupBean hierarchyBean) throws DaoException {
		ArrayList<HierarchySetupBean> logList = null;
		try {
			eclinicDaoManager.startTransaction();
			logList = hierarchyDao.getAllSubModulesByModuleId(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}

	public HierarchySetupBean getHierarchyGroupAbove(HierarchySetupBean hierarchyBean) throws DaoException {
		HierarchySetupBean parentBean = new HierarchySetupBean();
		try {
			eclinicDaoManager.startTransaction();
			parentBean = hierarchyDao.getHierarchyGroupAbove(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return parentBean;
	}

	public OfficeLetterHeadBean getSeatOfficesDetails(UserBean userBean) throws DaoException {
		OfficeLetterHeadBean logList = null;
		try {
			eclinicDaoManager.startTransaction();
			logList = hierarchyDao.getSeatOfficesDetails(userBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}

	public ArrayList<HierarchySetupBean> getUserModulePrivileges(HierarchySetupBean hierarchyBean) throws DaoException {
		ArrayList<HierarchySetupBean> logList = null;
		try {
			eclinicDaoManager.startTransaction();
			logList = hierarchyDao.getUserModulePrivileges(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}
	public ArrayList<HierarchySetupBean> getAllModules(HierarchySetupBean hierarchyBean)throws DaoException  {
		ArrayList<HierarchySetupBean> logList = null;
		try {
			eclinicDaoManager.startTransaction();
			logList = hierarchyDao.getAllModules(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}

	public String insertModulePrivilegeGrp(HierarchySetupBean hierarchyBean) throws DaoException {
		String group_id="";

		try 
		{        	
			eclinicDaoManager.startTransaction();
			hierarchyDao.insertModulePrivilegeGrp(hierarchyBean);
			group_id=hierarchyDao.getLastInsertGroupId();
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return group_id;

	}

	public ArrayList getallModulePrivilegeGrp(HierarchySetupBean hierarchyBean) throws DaoException {
		ArrayList<HierarchySetupBean> logList = null;
		try {
			eclinicDaoManager.startTransaction();
			logList = hierarchyDao.getallModulePrivilegeGrp(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}


	public ArrayList getAllSubModuleAlloted(HierarchySetupBean hierarchyBean) throws DaoException {
		ArrayList<HierarchySetupBean> logList = null;
		try {
			eclinicDaoManager.startTransaction();
			logList = hierarchyDao.getAllSubModuleAlloted(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}

	public void insertModuleSeatAlloted(HierarchySetupBean hierarchyBean) throws DaoException {

		try 
		{        	
			eclinicDaoManager.startTransaction();
			hierarchyDao.insertModuleSeatAlloted(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	// HRMS - Eclinic Integation Changes -------- @ENDs -------------

	/* Insurance Network - Office Wise - START */
	public String getInsurNetworkOfficeIds(SetupBean setupBean) throws DaoException {
		String officeIds = "";
		try {
			eclinicDaoManager.startTransaction();
			officeIds = setupDao.getInsurNetworkOfficeIds(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return officeIds;
	}

	public void insertInsurarNetworkOffice(SetupBean setupBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertInsurarNetworkOffice(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Created a new Insurance Network " + setupBean.getNetwork_type(), null, null, "insurar_network_office");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	/* Insurance Network - Office Wise - END */

	public ArrayList getAllAdvancePayments(RegistrationBean regBean) throws DaoException {
		ArrayList<RegistrationBean> logList = null;
		try {
			eclinicDaoManager.startTransaction();
			logList = registrationDao.getAllAdvancePayments(regBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}

	public void deleteReportsAlloted(HierarchySetupBean hierarchyBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			hierarchyDao.deleteReportsAlloted(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void insertReportsAssignedToGrp(HierarchySetupBean hierarchyBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			hierarchyDao.insertReportsAssignedToGrp(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList<UserBean> getAllReportsByGrp(UserBean userBean) throws DaoException {
		ArrayList<UserBean> reportList= null;
		try {
			eclinicDaoManager.startTransaction();
			reportList = hierarchyDao.getAllReportsByGrp(userBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return reportList;
	}
	public ArrayList<UserBean> getAllReportMaster(UserBean userBean) throws DaoException{
		ArrayList<UserBean> reportList= null;
		try {
			eclinicDaoManager.startTransaction();
			reportList = hierarchyDao.getAllReportMaster(userBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return reportList;
	}




	/** Finance Module & Reports - Single/Head Office Login Access to All Branches --- START @20Dec 2015 - Nishitha**/
	public ArrayList<OfficeLetterHeadBean> getAllOfficesUnderLoggedInOffice(UserBean userBean) throws DaoException {
		ArrayList<OfficeLetterHeadBean> logList = null;
		try {
			eclinicDaoManager.startTransaction();
			logList = hierarchyDao.getAllOfficesUnderLoggedInOffice(userBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}

	public boolean checkIsDoubleEntry(PaymentBean paymentBean) throws DaoException {
		boolean isDblEntry=false;
		try {
			eclinicDaoManager.startTransaction();

			paymentBean.setPayment_type("C");
			ArrayList<PaymentBean> list = paymentDao.getCountOfVoucherHeads(paymentBean);
			if(null != list && list.size()>1)
				isDblEntry=true;

			paymentBean.setPayment_type("D");
			list = paymentDao.getCountOfVoucherHeads(paymentBean);
			if(null != list && list.size()>1)
				isDblEntry=true;

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return isDblEntry;

	}

	/** Finance Module - Single/Head Office Login Access to All Branches --- END @20Dec 2015 - Nishitha**/

	public ArrayList getAllInsurarSubByCriteria(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllInsurarSubByCriteria(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public String getInsurarNetworkPriceFrom(RegistrationBean registrationBean) throws DaoException {
		String priceFrom = "";
		try {
			eclinicDaoManager.startTransaction();
			priceFrom = (String) setupDao.getInsurarNetworkPriceFrom(registrationBean);
			eclinicDaoManager.commitTransaction();

			if(null == priceFrom)
				priceFrom="";

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return priceFrom;
	}
	public List getDSRReportDetails(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getDSRReportDetails(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public AssetManageBean getProductGroupDepreciationDetails(String value) throws DaoException 
	{
		AssetManageBean list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=assetManageDao.getProductGroupDepreciationDetails(value);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public RegistrationBean getPreAppDetails4Edit(RegistrationBean registrationBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			registrationBean=consultationDao.getPreAppDetails4Edit(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return registrationBean;
	}

	public void updatePreApprovalDetails(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updatePreApprovalDetails(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getConsultTestDetailsforProfile(SetupBean setBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getConsultTestDetailsforProfile(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getMailDeliveryReport(RegistrationBean registrationBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getMailDeliveryReport(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateHOPI(HistoryPresentIllBean hopiBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateHOPI(hopiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public List getTestResultForAuthent(RegistrationBean rgistrationBean) throws DaoException {

		List<RegistrationBean> samplelist = null;
		try {
			eclinicDaoManager.startTransaction();
			samplelist = registrationDao.getTestResultForAuthent(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return samplelist;
	}

	// PRIMAVERA CHANGES MRGED

	public void insertHandouts(SetupBean setupBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertHandouts(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllAccountLevels(SetupBean setupBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllAccountLevels(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllPatientHandouts(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllPatientHandouts(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllConsultationDetailsList(RegistrationBean consultDetails)throws DaoException {
		ArrayList<RegistrationBean> us = null;
		try {
			/*
			 * Below code added for GNC & Primavera Medical Report Implmntn.
			 * orderByDidntExist is used to ensure that 'Orderby' set for other
			 * functionalities are not affected.
			 */
			boolean orderByDidntExist = false;
			if (null != consultDetails && (null == consultDetails.getOrderby() || consultDetails.getOrderby().equals(""))) {
				consultDetails.setOrderby("order by consult_dtls.entered_date desc");
				orderByDidntExist = true;
			}

			eclinicDaoManager.startTransaction();
			us = consultationDao.getAllConsultationDetailsList(consultDetails);
			eclinicDaoManager.commitTransaction();

			if(orderByDidntExist){
				consultDetails.setOrderby(null);
			}

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getAllConsultClosure(HistoryPresentIllBean hopiBean )throws DaoException {
		ArrayList<HistoryPresentIllBean> us = null;
		try {

			eclinicDaoManager.startTransaction();
			us = consultationDao.getAllConsultClosure(hopiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertConsultClosure(HistoryPresentIllBean hopiBean,HttpServletRequest request) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertConsultClosure(hopiBean);
			eclinicDaoManager.commitTransaction();

			/*auditLogEntry(hopiBean, request, "INSERT", "Saved Consultation Closure/Followup Details from Doctor's/Nurse's Workbench", hopiBean.getOp_number(),
					hopiBean.getConsult_id(), "patient_history");*/

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deleteConsultClosure(HistoryPresentIllBean historyPresentIllBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.deleteConsultClosure(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getClosureSubs(HistoryPresentIllBean hopiBean)throws DaoException  {
		ArrayList<HistoryPresentIllBean> us = null;
		try {

			eclinicDaoManager.startTransaction();
			us = consultationDao.getClosureSubs(hopiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getPatientConsultClosures(HistoryPresentIllBean hopiBean )throws DaoException{
		ArrayList<HistoryPresentIllBean> us = null;
		try {

			eclinicDaoManager.startTransaction();
			us = consultationDao.getPatientConsultClosures(hopiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List getAllInsuranceCardsByOpno(RegistrationBean registrationBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getAllInsuranceCardsByOpno(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public String getParentAccountLevel(AccountBean acc) throws DaoException {
		String accB=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			accB=accountDao.getParentAccountLevel(acc);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return accB;
	}


	/** PAIN RATE - Added By Nidhi @ START **/
	public void insertPainRate(HistoryPresentIllBean hopiBean) throws DaoException {

		try {

			eclinicDaoManager.startTransaction();
			registrationDao.insertPainRate(hopiBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public List<HistoryPresentIllBean> getAllPainRate(HistoryPresentIllBean hopiBean) throws DaoException {

		List<HistoryPresentIllBean> us = null;
		try {
			if(null != hopiBean) {
				if(null != hopiBean.getOp_number() || null != hopiBean.getConsult_id() || null != hopiBean.getSerial_id()) {
					eclinicDaoManager.startTransaction();
					us = registrationDao.getAllPainRate(hopiBean);
					eclinicDaoManager.commitTransaction();
				}
			}
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public HistoryPresentIllBean getPainRateValues(HistoryPresentIllBean histBean) throws DaoException {
		HistoryPresentIllBean hBean = null;
		try {
			eclinicDaoManager.startTransaction();
			hBean = (HistoryPresentIllBean) consultationDao.getPainRateValues(histBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {

			}
			throw ((DaoException) e.fillInStackTrace());

		}
		return hBean;
	}

	public List<HistoryPresentIllBean> getAllpainRateHistory(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		List<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = consultationDao.getAllpainRateHistory(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<HistoryPresentIllBean> getPainScaleHistory(HistoryPresentIllBean hopiBean) throws DaoException {
		List<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (List<HistoryPresentIllBean>) consultationDao.getPainScaleHistory(hopiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<MedicalFormsBean> getPainScaleContents(MedicalFormsBean medicalFormsBean, boolean isSaved) throws DaoException {
		List<MedicalFormsBean> msterlist = null;
		try {
			eclinicDaoManager.startTransaction();
			msterlist = consultationDao.getPainScaleContents(medicalFormsBean, isSaved);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return msterlist;
	}

	public void insertPainRateOptions(MedicalFormsBean medicalFormsBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertPainRateOptions(medicalFormsBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List<HistoryPresentIllBean> getPainScaleList(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		List<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = consultationDao.getPainScaleList(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void deletePainRate(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.deletePainRate(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deletePainRateOptions(HistoryPresentIllBean historyPresentIllBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.deletePainRateOptions(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	/** PAIN RATE - Added By Nidhi @ START **/

	public void insertNurseWard(UserBean userBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			loginDao.insertNurseWard(userBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deleteNurseWard(String id) throws DaoException 
	{
		try 
		{    
			eclinicDaoManager.startTransaction();
			loginDao.deleteNurseWard(id);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<UserBean> getAllWardsAssign(UserBean nurseBean) throws DaoException 
	{
		ArrayList<UserBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<UserBean>)loginDao.getAllWardsAssign(nurseBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<HierarchySetupBean> getAllDashBoardDataTypes()  throws DaoException
	{
		List<HierarchySetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(List<HierarchySetupBean>)hierarchyDao.getAllDashBoardDataTypes();
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			try {
				throw ((DaoException) e.fillInStackTrace());
			} catch (DaoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		return list;

	}

	public void insertUserDashboard(UserBean userBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			loginDao.insertUserDashboard(userBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deleteUserDashboard (String id) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			loginDao.deleteUserDashboard(id);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<SetupBean> getTestCategoryByConsultId(RegistrationBean labBean) throws DaoException {
		ArrayList<SetupBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = (ArrayList<SetupBean>)laboratoryDao.getTestCategoryByConsultId(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<AccountBean> getAllCostCenterHeads(AccountBean accountBean) throws DaoException 
	{
		List<AccountBean> list=null;
		try{
			eclinicDaoManager.startTransaction();
			list = accountDao.getAllCostCenterHeads(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<AccountBean> getAllCostCenterChilds(AccountBean accountBean) throws DaoException 
	{
		List<AccountBean> list=null;
		try{
			eclinicDaoManager.startTransaction();
			list = accountDao.getAllCostCenterChilds(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getAllInsurancePlans(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllInsurancePlans(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateEncounterClose() throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateEncounterClose();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public AccountBean getCostCenterHeadById(AccountBean accountBean) throws DaoException 
	{
		AccountBean list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getCostCenterHeadById(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 
	public AccountBean getCostCenterChildById(AccountBean accountBean) throws DaoException 
	{
		AccountBean list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getCostCenterChildById(accountBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 
	public String getCostCenterSlNoById(AccountBean accountBean) throws DaoException 
	{
		String list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getCostCenterSlNoById(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertCostCenterHead(AccountBean accountBean,HttpServletRequest request) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			accountDao.insertCostCenterHead(accountBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(accountBean, request, "INSERT", "Created Cost Center Head", null, null, "cost_center_head");
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}  
	public String insertCostCenterChild(AccountBean accountBean) throws DaoException 
	{
		String childid=null;
		try {        	
			eclinicDaoManager.startTransaction();
			accountDao.insertCostCenterChild(accountBean);
			childid=accountDao.getNewCostCenterChildID();
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return childid;
	}
	public void insertCostCenterChildHead(AccountBean accountBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			accountDao.insertCostCenterChildHead(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateCostCenterHead(AccountBean accountBean,HttpServletRequest request) throws DaoException 
	{
		try{    
			AccountBean oldbean=getCostCenterHeadById(accountBean);    	
			eclinicDaoManager.startTransaction();
			accountDao.updateCostCenterHead(accountBean);
			eclinicDaoManager.commitTransaction();
			if(oldbean!=null){
				auditLogEntry(oldbean, request, "UPDATE", "Edited & Updated Cost Center Head", null, null, "cost_center_head");
			}
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 
	public void updateCostCenterHeadChild(AccountBean accountBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			accountDao.updateCostCenterHeadChild(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}	
	public void deleteCostCenterHead(AccountBean accountBean,HttpServletRequest request) throws DaoException 
	{
		try {    
			AccountBean oldbean=getCostCenterHeadById(accountBean);   	
			eclinicDaoManager.startTransaction();
			accountDao.deleteCostCenterHead(accountBean);
			eclinicDaoManager.commitTransaction();
			if(oldbean!=null){
				auditLogEntry(oldbean, request, "DELETE", "Deleted from Cost Center Head", null, null, "cost_center_head");
			}
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 
	public void deleteCostCenterHeadChild(AccountBean accountBean) throws DaoException{
		try{        	
			eclinicDaoManager.startTransaction();
			accountDao.deleteCostCenterHeadChild(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 
	public List<AccountBean> getAllCostCenterChildsByParent(AccountBean accountBean) throws DaoException 
	{
		List<AccountBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list = accountDao.getAllCostCenterChildsByParent(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public String getAllCostCenterChildNames() throws DaoException {
		String child_name = "";
		try {        	
			eclinicDaoManager.startTransaction();
			child_name = accountDao.getAllCostCenterChildNames();
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return child_name;
	}

	public ArrayList getAllCostCentersByChildName(AccountBean accountBean) throws DaoException {

		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllCostCentersByChildName(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public ArrayList getAllCostCentersbyCode(AccountBean accountBean) throws DaoException {

		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllCostCentersbyCode(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}
	public AccountBean getCostCenterMappingByChildId(AccountBean accountBean) throws DaoException 
	{
		AccountBean list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getCostCenterMappingByChildId(accountBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 
	public void insertCostCenterMapping(AccountBean accountBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			accountDao.insertCostCenterMapping(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public String getAllCostCenterChildMappings(AccountBean accountBean)  throws DaoException{
		String childid=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			childid=accountDao.getAllCostCenterChildMappings(accountBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
		}

		return childid;
	}
	public List listAllRejectReasons(RegistrationBean registrationBean)throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao
					.listAllRejectReasons(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertReason(RegistrationBean regBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertReason(regBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public ArrayList getClinicLabtestDetailsForIncome(RegistrationBean registrationBean)
			throws DaoException {

		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getClinicLabtestDetailsForIncome(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllCashBillClinicList(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) laboratoryDao.getAllCashBillClinicList(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllCashBillSaleList(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) laboratoryDao.getAllCashBillSaleList(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllCashBillPeriodSaleList(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) laboratoryDao.getAllCashBillPeriodSaleList(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllrDoctors() throws DaoException {
		// TODO Auto-generated method stub
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllrDoctors();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getDoctorWiseTestDetails(SetupBean sBean) throws DaoException {
		// TODO Auto-generated method stub
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getDoctorWiseTestDetails(sBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}
	public ArrayList getAllClaimRejectionSummary(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllClaimRejectionSummary(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public DashboardBean getCashRevenueData(DashboardBean dashboardBean) throws DaoException {
		DashboardBean dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getCashRevenueData(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public DashboardBean getTotalRevenueData(DashboardBean dashboardBean) throws DaoException {
		DashboardBean dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getTotalRevenueData(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public List<DashboardBean> getPatientStatusCount(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getPatientStatusCount(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public List<DashboardBean> getPatientTypeCount(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getPatientTypeCount(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public PaymentBean getOpeningBalanceVoucherDetailsById(AccountBean accountBean) throws DaoException 
	{
		PaymentBean list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getOpeningBalanceVoucherDetailsById(accountBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	} 
	public ArrayList getVoucherChildrenDetails(PaymentBean paymentBean) throws DaoException {
		ArrayList<PaymentBean> us = null;
		try {

			eclinicDaoManager.startTransaction();
			us = accountDao.getVoucherChildrenDetails(paymentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertAlertDetails(RegistrationBean regBean) throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			registrationDao.insertAlertDetails(regBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List<RegistrationBean> getallAlerts(RegistrationBean regbean)  throws DaoException {
		List<RegistrationBean> alerts = null;
		try {

			eclinicDaoManager.startTransaction();
			alerts = registrationDao.getallAlerts(regbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return alerts;
	}

	public List<RegistrationBean> getAllListOfClaimsGrouped(SetupBean claimBean) throws DaoException {
		List<RegistrationBean> claimList = null;
		try {
			eclinicDaoManager.startTransaction();
			claimList = registrationDao.getAllListOfClaimsGrouped(claimBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return claimList;
	}
	
	//ClaimsSummaryDateWise (Combined Wth Pharm) Jan04 2017
	
	public List<RegistrationBean> getAllListOfClaimsWithPharmacyGrouped(SetupBean claimBean) throws DaoException {
		List<RegistrationBean> claimList = null;
		try {
			eclinicDaoManager.startTransaction();
			claimList = registrationDao.getAllListOfClaimsWithPharmacyGrouped(claimBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return claimList;
	}
	//ClaimsSummaryDateWise (Combined Wth Pharm) Jan04 2017
	
	public List<RegistrationBean> getAllClaimMonths(SetupBean claimBean) throws DaoException {
		List<RegistrationBean> monthlist = null;
		try {
			eclinicDaoManager.startTransaction();
			monthlist = registrationDao.getAllClaimMonths(claimBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return monthlist;
	}

	public RegistrationBean getAllClaimsCount(SetupBean claimBean) throws DaoException {
		RegistrationBean regbean = null;
		try {
			eclinicDaoManager.startTransaction();
			regbean = registrationDao.getAllClaimsCount(claimBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return regbean;
	}

	public List getPendingInvoices(PaymentBean payBean) throws DaoException
	{
		List list=null;
		try{
			eclinicDaoManager.startTransaction();
			list=receiptDao.getPendingInvoices(payBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){

			}
			throw ((DaoException)e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getTestDetailsIdByProfileId(
			RegistrationBean registrationBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao
					.getTestDetailsIdByProfileId(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getAllTestByLabIdNo(String sampleId ) throws DaoException 
	{

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllTestByLabIdNo(sampleId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getTestDetailsIdByTestId(RegistrationBean registrationBean)
			throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao
					.getTestDetailsIdByTestId(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabIdNos(RegistrationBean rgistrationBean) throws DaoException {

		ArrayList samplelist = null;
		try {
			eclinicDaoManager.startTransaction();
			samplelist = registrationDao.getAllLabIdNos(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return samplelist;
	}
	public void savePostOpDetails(InPatientBean ipBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.savePostOpDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}	
	public ArrayList<SetupBean> getAllUnAddedProcedureList4Ins(SetupBean setBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) setupDao.getAllUnAddedProcedureList4Ins(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllProcedureList4InsNetDep(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllProcedureList4InsNetDep(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updatePreApprPriceFromRequestTable(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updatePreApprPriceFromRequestTable(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public List getDailyTransactionSummary(RegistrationBean registrationBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getDailyTransactionSummary(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<InsuranceBean> getPatientOutstandingAgeing(RegistrationBean regBean1) throws DaoException {
		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getPatientOutstandingAgeing(regBean1);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return (ArrayList<InsuranceBean>) us;
	}
	public ArrayList getAllMonthsBetweenDates(SetupBean setupBean) throws DaoException {
		ArrayList dateList=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			dateList=accountDao.getAllMonthsBetweenDates(setupBean);
			eclinicDaoManager.commitTransaction();
		
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dateList;
	}

	public ArrayList getAccountAmountMonthWise(AccountBean accBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getAccountAmountMonthWise(accBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getclinicReferals(RegistrationBean regBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getclinicReferals(regBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateProcedureDoneStatus(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateProcedureDoneStatus(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateDoneStatusFromRequestTable(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateDoneStatusFromRequestTable(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertReportDispatchDetails(RegistrationBean dispatchBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertReportDispatchDetails(dispatchBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllUsersAssignedtosubmodule(HierarchySetupBean hierarchySetupBean) throws DaoException {
		ArrayList list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)hierarchyDao.getAllUsersAssignedtosubmodule(hierarchySetupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertPasswordSetup(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertPasswordSetup(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList<SetupBean> getPasswordSetup(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> setB=null;
		try {        	
			eclinicDaoManager.startTransaction();
			setB=setupDao.getPasswordSetup(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setB;
	}
	public List<RegistrationBean> getAllTestsetupByCritForPriceCheck(RegistrationBean rgistrationBean) throws DaoException {

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllTestsetupByCritForPriceCheck(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}


	public ArrayList getAllReferClinicsForPriceCheck(RegistrationBean rgistrationBean) throws DaoException {

		ArrayList list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = registrationDao.getAllReferClinicsForPriceCheck(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllDeeleteBill(RegistrationBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllDeeleteBill(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList<RegistrationBean> getAllConsultDates(RegistrationBean labBean)throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  laboratoryDao.getAllConsultDates(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getDeltaCheckResults(RegistrationBean labBean)throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = laboratoryDao.getDeltaCheckResults(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllSurgeryBookings4OP(RegistrationBean registrationBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getAllSurgeryBookings4OP(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertSurgeryBookingDetails(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertSurgeryBookingDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public RegistrationBean getSurgeryBookingsDetailsById(RegistrationBean registrationBean) throws DaoException {
		RegistrationBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (RegistrationBean) registrationDao.getSurgeryBookingsDetailsById(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllSurveyLists(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllSurveyLists(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllSurveyCheckList(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllSurveyCheckList(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void savePatientSurvey(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.savePatientSurvey(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public SetupBean getSurveyDetails(SetupBean setupBean) throws DaoException {
		SetupBean suuveyBean=null;
		try {        	
			eclinicDaoManager.startTransaction();
			suuveyBean=(SetupBean)setupDao.getSurveyDetails(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return suuveyBean;
	}
	public SurgeryBean getSignInChecklist(SurgeryBean surgeryBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			surgeryBean = surgeryDao.getSignInChecklist(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return surgeryBean;
	}

	public void saveSignInChecklist(SurgeryBean surgeryBean) throws DaoException {
		try {
			if(null != surgeryBean.getIp_id() && surgeryBean.getIp_id().equals("")) {
				surgeryBean.setIp_id(null);
			}
			if(null != surgeryBean.getSerial_id() && surgeryBean.getSerial_id().equals("")) {
				surgeryBean.setSerial_id(null);
			}
			
			eclinicDaoManager.startTransaction();
			surgeryDao.saveSignInChecklist(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public SurgeryBean getTimeOutChecklist(SurgeryBean surgeryBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			surgeryBean = surgeryDao.getTimeOutChecklist(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return surgeryBean;
	}

	public void saveTimeOutChecklist(SurgeryBean surgeryBean) throws DaoException {
		try {
			if(null != surgeryBean.getIp_id() && surgeryBean.getIp_id().equals("")) {
				surgeryBean.setIp_id(null);
			}
			if(null != surgeryBean.getSerial_id() && surgeryBean.getSerial_id().equals("")) {
				surgeryBean.setSerial_id(null);
			}
			
			eclinicDaoManager.startTransaction();
			surgeryDao.saveTimeOutChecklist(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public SurgeryBean getSignOutChecklist(SurgeryBean surgeryBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			surgeryBean = surgeryDao.getSignOutChecklist(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return surgeryBean;
	}

	public void saveSignOutChecklist(SurgeryBean surgeryBean) throws DaoException {
		try {
			if(null != surgeryBean.getIp_id() && surgeryBean.getIp_id().equals("")) {
				surgeryBean.setIp_id(null);
			}
			if(null != surgeryBean.getSerial_id() && surgeryBean.getSerial_id().equals("")) {
				surgeryBean.setSerial_id(null);
			}
			
			eclinicDaoManager.startTransaction();
			surgeryDao.saveSignOutChecklist(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList getAllHelpNames(String module_Id) throws DaoException 
	{
		ArrayList list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)hierarchyDao.getAllHelpNames(module_Id);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public InPatientBean getReferedDoctorDetails(InPatientBean ipBean) throws DaoException {
		InPatientBean referBean; 
		try {
			eclinicDaoManager.startTransaction();
			referBean = inpatientDao.getReferedDoctorDetails(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return referBean;
	}
	public InPatientBean getTriageFormDetails(InPatientBean ipBean) throws DaoException {
		InPatientBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (InPatientBean) inpatientDao.getTriageFormDetails(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void saveTriageFormDetails(InPatientBean ipBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			inpatientDao.saveTriageFormDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	// Category Wise Income Report -START
	public List getAllCategories4Report(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllCategories4Report(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List getCategoryWiseCollection(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getCategoryWiseCollection(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	// Category Wise Income Report -END

	public List getAllSWIncomedetailedReport(RegistrationBean regBean) throws DaoException {
		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getAllSWIncomedetailedReport(regBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	/** Dima Reports START**/
	public ArrayList getAllListOfClaimsSummaryforDima(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllListOfClaimsSummaryforDima(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllServicesForDima(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllServicesForDima(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/** Dima Reports END**/
	public List<VitalSignsBean> getVitalSignsHeading(VitalSignsBean vitalSignsBean)throws DaoException {
		List<VitalSignsBean> list=null;
		try {
			eclinicDaoManager.startTransaction();
			list=(List<VitalSignsBean>)consultationDao.getVitalSignsHeading(vitalSignsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public String insertCardSetup(SetupBean setupBean) throws DaoException {
		String cardid="";
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertCardSetup(setupBean);
			cardid = setupDao.getLastInsertCardId();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

		return cardid;

	}

	public ArrayList getallCardList(SetupBean setupBean)  throws DaoException {
		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getallCardList(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateCardSetup(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.updateCardSetup(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public ArrayList getAllClaimsSubmittedStatus(PaymentBean payBean) throws DaoException {
		ArrayList claimstatusList=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			claimstatusList=registrationDao.getAllClaimsSubmittedStatus(payBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return claimstatusList;
	}

	public ArrayList getAllMachines(SetupBean setupBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getAllMachines(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertlabmachines(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertlabmachines(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added Lab Machine From Setup - "+setupBean.getLabunit(),null ,null,"find_sourcedet");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}}

	public void updatelabmachines(SetupBean setupBean,HttpServletRequest request) throws DaoException {

		try {
			SetupBean oldBean = getLabMachineById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.updatelabmachines(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Updated Lab Machine From Setup - "+oldBean.getLabunit(),null ,null,"lab_machines");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deletelabmachines(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			SetupBean oldBean = getLabMachineById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deletelabmachines(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted labmachines From Setup - "+oldBean.getMachine_name(),null ,null,"lab_machines");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public SetupBean getLabMachineById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getLabMachineById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public ArrayList getAllContainer() throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getAllContainer();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertContainer(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertContainer(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added Container From Setup - "+setupBean.getLabunit(),null ,null,"find_sourcedet");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}}

	public void updateContainer(SetupBean setupBean,HttpServletRequest request) throws DaoException {

		try {
			SetupBean oldBean = getContainerById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.updateContainer(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Updated Container From Setup - "+oldBean.getLabunit(),null ,null,"container_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteContainer(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			SetupBean oldBean = getContainerById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteContainer(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted container From Setup - "+oldBean.getMachine_name(),null ,null,"container_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public SetupBean getContainerById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getContainerById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}



	public void insertlabmethods(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertlabmethods(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added Method From Setup - "+setupBean.getMethod_name(),null ,null,"find_sourcedet");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}}

	public void updatelabmethods(SetupBean setupBean,HttpServletRequest request) throws DaoException {

		try {
			SetupBean oldBean = getLabMethodById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.updatelabmethods(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Updated Mehod From Setup - "+oldBean.getMethod_name(),null ,null,"test_method_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteLabmethod(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			SetupBean oldBean = getLabMethodById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deleteLabmethod(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted method From Setup - "+oldBean.getMachine_name(),null ,null,"test_method_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public SetupBean getLabMethodById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getLabMethodById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}




	public void insertdrivers(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertdrivers(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added Driver From Setup - "+setupBean.getDriver_name(),null ,null,"find_sourcedet");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}}

	public void updatedrivers(SetupBean setupBean,HttpServletRequest request) throws DaoException {

		try {
			SetupBean oldBean = getLabMethodById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.updatedrivers(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Updated Driver From Setup - "+oldBean.getDriver_name(),null ,null,"driver_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deletedrivers(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			SetupBean oldBean = getLabMethodById(setupBean);

			eclinicDaoManager.startTransaction();
			setupDao.deletedrivers(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted driver From Setup - "+oldBean.getDriver_name(),null ,null,"driver_setup");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public SetupBean getDriversById(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getDriversById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}
	public String getCountofPendingDT(PaymentBean paymentBean) throws DaoException {
		String pendingcount="";
		try 
		{        	
			eclinicDaoManager.startTransaction();
			pendingcount = accountDao.getCountofPendingDT(paymentBean);

			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return pendingcount;
	}
	public void insertConsultPackageServiceDetails(SetupBean setupBean,HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertConsultPackageServiceDetails(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public DashboardBean getPharmacyCashRevenueData(DashboardBean dashboardBean)  throws DaoException {
		DashboardBean dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getPharmacyCashRevenueData(dashboardBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public DashboardBean getTotalPharmacyRevenueData(DashboardBean dashboardBean) throws DaoException {
		DashboardBean dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getTotalPharmacyRevenueData(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public ArrayList<DashboardBean> getAllListOfClaimsSummPharm(DashboardBean dashboardBean) throws DaoException 
	{
		ArrayList<DashboardBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=dashboardDao.getAllListOfClaimsSummPharm(dashboardBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<DashboardBean> getFastMovingItemsData(DashboardBean dashboardBean) throws DaoException 
	{
		ArrayList<DashboardBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=dashboardDao.getFastMovingItemsData(dashboardBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList viewPostedPendingDT(AccountBean accountBean) throws DaoException {
		ArrayList<AccountBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.viewPostedPendingDT(accountBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllPostedTransactionDays(AccountBean accountBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=accountDao.getAllPostedTransactionDays(accountBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void activateDeactivateUser(HierarchySetupBean hierarchyBean) throws DaoException 
	{				
		try {        	
			eclinicDaoManager.startTransaction();
			hierarchyDao.activateDeactivateUser(hierarchyBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList<HierarchySetupBean> getModuleSubOptionsById(HierarchySetupBean hierarchySetupBean) throws DaoException {
		ArrayList<HierarchySetupBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=hierarchyDao.getModuleSubOptionsById(hierarchySetupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<HierarchySetupBean> getAllSubModuleOptionsAlloted(HierarchySetupBean hierarchySetupBean) throws DaoException {
		ArrayList<HierarchySetupBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=hierarchyDao.getAllSubModuleOptionsAlloted(hierarchySetupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List getAllAttendenceList(RegistrationBean registrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getAllAttendenceList(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public RegistrationBean getAttendenceDetailsById(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getAttendenceDetailsById(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void insertAttendenceList(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertAttendenceList(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void updateAttendencedetails(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateAttendencedetails(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}


	public SetupBean getCardDetailById(SetupBean setupBean) throws DaoException {
		SetupBean cardBean = null;
		try {
			eclinicDaoManager.startTransaction();
			cardBean = setupDao.getCardDetailById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return cardBean;
	}

	public SetupBean getProcedure4InsById(SetupBean setupBean) throws DaoException {
		SetupBean procedureBean = null;
		try {
			eclinicDaoManager.startTransaction();
			procedureBean = setupDao.getProcedure4InsById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return procedureBean;
	}

	public SetupBean getLab4InsById(SetupBean setupBean) throws DaoException {
		SetupBean labBean = null;
		try {
			eclinicDaoManager.startTransaction();
			labBean = setupDao.getLab4InsById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return labBean;
	}

	public SetupBean getConsult4InsById(SetupBean setupBean) throws DaoException {
		SetupBean consultBean = null;
		try {
			eclinicDaoManager.startTransaction();
			consultBean = setupDao.getConsult4InsById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return consultBean;
	}



	public SetupBean getProcedure4InsNetById(SetupBean setupBean) throws DaoException {
		SetupBean procedureBean = null;
		try {
			eclinicDaoManager.startTransaction();
			procedureBean = setupDao.getProcedure4InsNetById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return procedureBean;
	}

	public SetupBean getLab4InsNetById(SetupBean setupBean) throws DaoException {
		SetupBean labBean = null;
		try {
			eclinicDaoManager.startTransaction();
			labBean = setupDao.getLab4InsNetById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return labBean;
	}

	public SetupBean getConsult4InsNetById(SetupBean setupBean) throws DaoException {
		SetupBean consultBean = null;
		try {
			eclinicDaoManager.startTransaction();
			consultBean = setupDao.getConsult4InsNetById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return consultBean;
	}

	public SetupBean getAllDepartmentsUserById(SetupBean setupBean) throws DaoException {
		SetupBean userMapBean = null;
		try {
			eclinicDaoManager.startTransaction();
			userMapBean = setupDao.getAllDepartmentsUserById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userMapBean;
	}



	public AssetManageBean getAllLocationSetupById(AssetManageBean assetBean) throws DaoException {
		AssetManageBean locationBean = null;
		try {
			eclinicDaoManager.startTransaction();
			locationBean = assetManageDao.getAllLocationSetupById(assetBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return locationBean;
	}

	public void insertDocumentTemplate(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertDocumentTemplate(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public SetupBean getDocumentTypeById(SetupBean setupBean) throws DaoException {
		SetupBean documentBean = null;
		try {
			eclinicDaoManager.startTransaction();
			documentBean = setupDao.getDocumentTypeById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return documentBean;
	}

	public void insertRadiologyTemplate(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertRadiologyTemplate(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public SetupBean getRadiologyRepTypeById(SetupBean setupBean) throws DaoException {
		SetupBean radiologyBean = null;
		try {
			eclinicDaoManager.startTransaction();
			radiologyBean = setupDao.getRadiologyRepTypeById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return radiologyBean;
	}

	public void insertExercise(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertExercise(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public SetupBean getExcerciseById(SetupBean setupBean) throws DaoException {
		SetupBean exerciseBean = null;
		try {
			eclinicDaoManager.startTransaction();
			exerciseBean = registrationDao.getExcerciseById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return exerciseBean;
	}

	public InPatientBean getWardTypeByID(InPatientBean ipBean) throws DaoException {
		InPatientBean wardTypeBean = null;
		try {
			eclinicDaoManager.startTransaction();
			wardTypeBean = inpatientDao.getWardTypeByID(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return wardTypeBean;
	}

	public InPatientBean getRoomCategoryById(InPatientBean ipBean) throws DaoException {
		InPatientBean roomCategoryBean = null;
		try {
			eclinicDaoManager.startTransaction();
			roomCategoryBean = inpatientDao.getRoomCategoryById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return roomCategoryBean;
	}

	public InPatientBean getRoomDetailsById(InPatientBean ipBean) throws DaoException {
		InPatientBean roomDetailsBean = null;
		try {
			eclinicDaoManager.startTransaction();
			roomDetailsBean = inpatientDao.getRoomDetailsById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return roomDetailsBean;
	}

	public InPatientBean getBedTypeById(InPatientBean ipBean) throws DaoException {
		InPatientBean bedTypeBean = null;
		try {
			eclinicDaoManager.startTransaction();
			bedTypeBean = inpatientDao.getBedTypeById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return bedTypeBean;
	}

	public SetupBean getMarkExecutiveById(SetupBean setupBean) throws DaoException {
		SetupBean markExecBean = null;
		try {
			eclinicDaoManager.startTransaction();
			markExecBean = setupDao.getMarkExecutiveById(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return markExecBean;
	}

	/***Finance closing***/

	public ArrayList getallZakatList(SetupBean setupBean)throws DaoException {
		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getallZakatList(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public String insertZakatSetup(SetupBean setupBean)throws DaoException {

		String cardid="";
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertZakatSetup(setupBean);
			cardid = setupDao.getLastInsertCardId();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

		return cardid;


	}

	public void deactiveZakatSetup(SetupBean setupBean)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.deactiveZakatSetup(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllFinancialYears(AccountBean accountBean)throws DaoException {
		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = accountDao.getAllFinancialYears(accountBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertFinanceClosing(AccountBean accountBean)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			accountDao.insertFinanceClosing(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList getAllYearClosingList(AccountBean accountBean)throws DaoException  {
		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = accountDao.getAllYearClosingList(accountBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	/***Finance closing***/
	public void updatePostedTransactions(AccountBean accBean) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			receiptDao.updatePostedTransactions(accBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateVoucherNo4PostedTransactions(AccountBean accBean) throws DaoException 
	{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			receiptDao.updateVoucherNo4PostedTransactions(accBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void insertPreviousduedetails(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertPreviousduedetails(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void setAllClosedFiscalYears(String office_id) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			AccountBean accBean = new AccountBean();
			accBean.setOffice_id(office_id);
			ArrayList<AccountBean> fiscalYearList = accountDao.getAllYearClosingList(accBean);
			eclinicDaoManager.commitTransaction();
			businessLogic.setAllClosedFiscalYears(fiscalYearList, accHeadsBean);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/* eMAR Changes @Starts */
	public ArrayList<InPatientBean> getAllMedicineSchedulePeriod(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipConsultDao.getAllMedicineSchedulePeriod(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void saveMedicineShedule(InPatientBean ipBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.saveMedicineShedule(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void saveMedicineSheduleDetails(InPatientBean ipBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.saveMedicineSheduleDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateMedicineSheduleDetails(InPatientBean ipBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.updateMedicineSheduleDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void cancelMedicineSheduleDetails(InPatientBean ipBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			ipConsultDao.cancelMedicineSheduleDetails(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<InPatientBean> getAllConsultMedicinesScheduled4IP(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipConsultDao.getAllConsultMedicinesScheduled4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList<InPatientBean> getMedicineScheduleTimingsById(InPatientBean ipBean)throws DaoException {
		ArrayList<InPatientBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipConsultDao.getMedicineScheduleTimingsById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public InPatientBean getMedicineScheduleDetailsById(InPatientBean ipBean)throws DaoException {
		InPatientBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipConsultDao.getMedicineScheduleDetailsById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList<InPatientBean> getAllMedicineSchedulesDue(InPatientBean ipBean) throws DaoException {
		ArrayList<InPatientBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = ipConsultDao.getAllMedicineSchedulesDue(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public RegistrationBean getAllReferralEntries(RegistrationBean registrationBean) throws DaoException {
		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getAllReferralEntries(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public ArrayList getAllPaymentModes() throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllPaymentModes();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertClinicPayment(SetupBean setBean) throws DaoException 
	{

		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertClinicPayment(setBean);
			eclinicDaoManager.commitTransaction();
			//auditLogEntry(userBean, request, "INSERT", "Added a new user"+userBean.getUser_name(), null, null, "user_setup");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getClinicPaymentModes(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getClinicPaymentModes(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/** OPTOMETRY IMPLMTN - 04 JUN 2016 --- @START ---------@author nishitha **/
	public void insertEyeRefraction(GlassPrescriptionBean registrationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertEyeRefraction(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateEyeRefraction(GlassPrescriptionBean registrationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateEyeRefraction(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertContactLens(GlassPrescriptionBean registrationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertContactLens(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateContactLens(GlassPrescriptionBean registrationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateContactLens(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getContactLensByOpNo(RegistrationBean registrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getContactLensByOpNo(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public GlassPrescriptionBean getContactLensByConsult(String opNumber) throws DaoException {

		GlassPrescriptionBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getContactLensByConsult(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	/** OPTOMETRY IMPLMTN - 04 JUN 2016 --- @END ---------@author nishitha **/
	public ArrayList getPendingClaimsCountList(SetupBean setBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getPendingClaimsCountList(setBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getRejectedClaimsCountList(SetupBean setBean)throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)registrationDao.getRejectedClaimsCountList(setBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List getDayWiseCollectionSummary(SetupBean setBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getDayWiseCollectionSummary(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List getDoctorWiseCollectionSummary(SetupBean setBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getDoctorWiseCollectionSummary(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List getAllRefundCashPayments(RegistrationBean regiBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getAllRefundCashPayments(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List getAllRefundCashPayments4Doctor(RegistrationBean regiBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getAllRefundCashPayments4Doctor(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List getAllRefundInsurancePayments(RegistrationBean regiBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getAllRefundInsurancePayments(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List getAllRefundInsurancePayments4Doctor(RegistrationBean regiBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getAllRefundInsurancePayments4Doctor(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public InPatientBean getBedDetailsById(InPatientBean ipBean) throws DaoException {
		InPatientBean bedBean = null;
		try {
			eclinicDaoManager.startTransaction();
			bedBean = ipConsultDao.getBedDetailsById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return bedBean;
	}



	public ArrayList getAdvanceDetails(RegistrationBean registrationBean) throws DaoException{
		ArrayList list = null;
		try{

			eclinicDaoManager.startTransaction();
			list = (ArrayList)registrationDao.getAdvanceDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return list;
	}
	public void UpdateAdjustedDetails(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.UpdateAdjustedDetails(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public ArrayList getAdvanceDetailsAfterAdjusted(RegistrationBean registrationBean) throws DaoException{
		ArrayList list = null;
		try{

			eclinicDaoManager.startTransaction();
			list = (ArrayList)registrationDao.getAdvanceDetailsAfterAdjusted(registrationBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getPendingWriteoffs(AccountBean acBean) throws DaoException{
		ArrayList list = null;
		try{
			eclinicDaoManager.startTransaction();
			list = (ArrayList)accountDao.getPendingWriteoffs(acBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return list;
	}

	public InPatientBean getPatientAlertsCount(InPatientBean ipBean) throws DaoException {
		InPatientBean bedBean = null;
		try {
			eclinicDaoManager.startTransaction();
			bedBean = ipConsultDao.getPatientAlertsCount(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return bedBean;
	}


	//nayana@start
	public ArrayList getCountforAlerts(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList count=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			count=(ArrayList)consultationDao.getCountforAlerts(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return count;
	}

	public ArrayList<InsuranceBean> getAllInsurRevenueAgeing(InsuranceBean irBean)throws DaoException {
		ArrayList<InsuranceBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();		
			list=(ArrayList<InsuranceBean>)insuranceDao.getAllInsurRevenueAgeing(irBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	//nayana@end
	public InPatientBean getReceipt4IPById(InPatientBean ipBean) throws DaoException {
		InPatientBean ipBillBean = null;
		try {
			eclinicDaoManager.startTransaction();
			ipBillBean = ipBillingDao.getReceipt4IPById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ipBillBean;
	}

	public InPatientBean getProvBillDetailsById(InPatientBean ipBean) throws DaoException {
		InPatientBean ipBillBean = null;
		try {
			eclinicDaoManager.startTransaction();
			ipBillBean = ipBillingDao.getProvBillDetailsById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ipBillBean;
	}

	public InPatientBean getClaimBillsById(InPatientBean ipBean) throws DaoException {
		InPatientBean ipBillBean = null;
		try {
			eclinicDaoManager.startTransaction();
			ipBillBean = ipBillingDao.getClaimBillsById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ipBillBean;
	}
	public List<ReportBean> getAllDailyTransRefundCash(RegistrationBean regiBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = reportsDao.getAllDailyTransRefundCash(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<ReportBean> getAllDailyTransRefundInsurance(RegistrationBean regiBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  reportsDao.getAllDailyTransRefundInsurance(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getDetailedPatientOutstanding(RegistrationBean reportBean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) registrationDao.getDetailedPatientOutstanding(reportBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getPatOutstandReceivedDue(RegistrationBean regiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getPatOutstandReceivedDue(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<AccountBean> getPendingTransactionsCountForPosting(AccountBean accountBean) throws DaoException 
	{
		List<AccountBean> transBean = null;
		try {        	
			eclinicDaoManager.startTransaction();
			transBean = accountDao.getPendingTransactionsCountForPosting(accountBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {				
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return transBean;
	} 
	public ArrayList<PaymentBean> getVoucherDetailsRemarks(PaymentBean paymentBean) throws DaoException 
	{
		ArrayList list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<PaymentBean>)paymentDao.getVoucherDetailsRemarks(paymentBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public RegistrationBean getInsuranceClaimsById(RegistrationBean registrationBean) throws DaoException {
		RegistrationBean claimBean = null;
		try {
			eclinicDaoManager.startTransaction();
			claimBean = registrationDao.getInsuranceClaimsById(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return claimBean;
	}


	public ERxParseBean geteRxPriorRequestDiagnosisById(EPrescriptionBean ePrescriptionBean) throws DaoException {
		ERxParseBean eRxParseBean = null;
		try {
			eclinicDaoManager.startTransaction();
			eRxParseBean = eprescriptionDao.geteRxPriorRequestDiagnosisById(ePrescriptionBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return eRxParseBean;
	}
	public ArrayList getEclaimFilesCount(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getEclaimFilesCount(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public List getAllCreditNoteDetails(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllCreditNoteDetails(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}



	public RegistrationBean getNurseNotesById(RegistrationBean regtbean) throws DaoException {
		RegistrationBean nurseNotesBean = null;
		try {
			eclinicDaoManager.startTransaction();
			nurseNotesBean = registrationDao.getNurseNotesById(regtbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return nurseNotesBean;
	}

	public MedicalFormsBean getMedicalFormById(MedicalFormsBean medicalFormsBean) throws DaoException {
		MedicalFormsBean medicalFormsOldBean = null;
		try {
			eclinicDaoManager.startTransaction();
			medicalFormsOldBean = consultationDao.getMedicalFormById(medicalFormsBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return medicalFormsOldBean;
	}

	public HistoryPresentIllBean getPainRateById(HistoryPresentIllBean hopiBean) throws DaoException {
		HistoryPresentIllBean painRateBean = null;
		try {
			if(null != hopiBean) {
				if(null != hopiBean.getOp_number() || null != hopiBean.getConsult_id() || null != hopiBean.getSerial_id()) {
					eclinicDaoManager.startTransaction();
					painRateBean = registrationDao.getPainRateById(hopiBean);
					eclinicDaoManager.commitTransaction();
				}
			}
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return painRateBean;
	}

	public InPatientBean getNurseNotes4IPById(InPatientBean ipBean) throws DaoException {
		InPatientBean nurseNotesBean = null;
		try {
			eclinicDaoManager.startTransaction();
			nurseNotesBean = ipConsultDao.getNurseNotes4IPById(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return nurseNotesBean;
	}
	/** DAY CARE SURGERY WORKBENCH -------- @ START ---------- NAYANA **/
	public void insertSurgeryAdvance(RegistrationBean registrationBean) throws DaoException {
		SurgeryBean surgeryBean = new SurgeryBean();
		surgeryBean.setAdvance_proc_id(registrationBean.getProcedure_id());
		surgeryBean.setConsult_id(registrationBean.getConsult_id());
		surgeryBean.setOp_number(registrationBean.getOp_number());
		surgeryBean.setSurg_billed("N");
		try {
			eclinicDaoManager.startTransaction();
			surgeryDao.insertSurgeryAdvance(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public RegistrationBean fetchSurgeryAdvance(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationBean = surgeryDao.fetchSurgeryAdvance(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return registrationBean;
	}

	public SurgeryBean getVerifySign1(SurgeryBean consBean) throws DaoException {

		SurgeryBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = surgeryDao.getVerifySign1(consBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public SurgeryBean getVerifySign2(SurgeryBean consBean) throws DaoException {

		SurgeryBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = surgeryDao.getVerifySign2(consBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public SurgeryBean getVerifySign3(SurgeryBean consBean) throws DaoException {

		SurgeryBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = surgeryDao.getVerifySign3(consBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public SurgeryBean getSurgeryChecklistByID(String opNumber) throws DaoException {

		SurgeryBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = surgeryDao.getSurgeryChecklistByID(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertSurgeryChecklistDetail(SurgeryBean counsBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();

			surgeryDao.insertSurgeryChecklistDetail(counsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateSurgeryChecklistDetail(SurgeryBean counsBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();

			surgeryDao.updateSurgeryChecklistDetail(counsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public SurgeryBean getSurgeryDetails(SurgeryBean surgeryBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			surgeryBean = surgeryDao.getSurgeryDetails(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return surgeryBean;
	}

	public void saveSurgeryDetails(SurgeryBean surgeryBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			surgeryDao.saveSurgeryDetails(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateSurgeryDetails(SurgeryBean surgeryBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			surgeryDao.updateSurgeryDetails(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList<RegistrationBean> getAllOTNotes(RegistrationBean registrationBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) surgeryDao.getAllOTNotes(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertSurgeryNotes(RegistrationBean registrationBean) throws DaoException {
		try {

			eclinicDaoManager.startTransaction();
			surgeryDao.insertSurgeryNotes(registrationBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllOTTemplates(String type) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) surgeryDao.getAllOTTemplates(type);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateOTNotes(RegistrationBean regBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			surgeryDao.updateOTNotes(regBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public CounselingBean getPostOpInstructionID(String opNumber) throws DaoException {

		CounselingBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = surgeryDao.getPostOpInstructionID(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertPostOpInstruction(CounselingBean counsBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();

			surgeryDao.insertPostOpInstruction(counsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public SurgeryBean updateDischargeStatus(SurgeryBean surgeryBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			surgeryBean = surgeryDao.updateDischargeStatus(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return surgeryBean;
	}

	public SurgeryBean getIpAdmitDtls(SurgeryBean surgeryBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			surgeryBean = surgeryDao.getIpAdmitDtls(surgeryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return surgeryBean;

	}
	/** DAY CARE SURGERY WORKBENCH -------- @ END ---------- NAYANA **/

	/** DHA REPORTS FOR DAY CARE SURGERY ----- @START ---- NISHITHA **/
	public ArrayList getAllDoneProcedures(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllDoneProcedures(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getLabTestCountByCategory(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getLabTestCountByCategory(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllCategoryWiseLabTest(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllCategoryWiseLabTest(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllProcedureCategory(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllProcedureCategory(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getSurgeryList(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getSurgeryList(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSurgeryProcedureCodes(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllSurgeryProcedureCodes(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public String getCountOfSurgery(SetupBean setupBean) throws DaoException {
		String recTotal = null;
		try {
			eclinicDaoManager.startTransaction();
			recTotal = (String) setupDao.getCountOfSurgery(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return recTotal;
	}

	public ArrayList getNationalityWisePatientCount(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getNationalityWisePatientCount(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/** DHA REPORTS FOR DAY CARE SURGERY ----- @END ---- NISHITHA **/


	public List<ReportBean> getPatAccountStmntDetails(RegistrationBean registrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = reportsDao.getPatAccountStmntDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<ReportBean> getpatAccountCreditnoteDetails(RegistrationBean registrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = reportsDao.getpatAccountCreditnoteDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<ReportBean> getAllLedgerDetails(RegistrationBean registrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = reportsDao.getAllLedgerDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public String getPatientsTotalOutstandingByDate(ReportBean reportBean) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = reportsDao.getPatientsTotalOutstandingByDate(reportBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public String insertBillApprovalRequestDetails(RegistrationBean registrationBean, HttpServletRequest request)throws DaoException {
		String req_id="";
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.insertBillApprovalRequestDetails(registrationBean);
			req_id = setupDao.lastInsertRequestId();
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return req_id;
	}
	public void updateBillingApproval(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException 
	{		
		try{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateBillingApproval(registrationBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void cancelBillingApprovalRequest(RegistrationBean registrationBean) throws DaoException 
	{		
		try{        	
			eclinicDaoManager.startTransaction();
			setupDao.cancelBillingApprovalRequest(registrationBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public RegistrationBean getBillApprovalDetails(RegistrationBean registrationBean)throws DaoException 
	{
		RegistrationBean rbean=null;
		try {        	
			eclinicDaoManager.startTransaction();
			rbean=setupDao.getBillApprovalDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return rbean;
	}
	public ArrayList getBillApprovalDetailsList(RegistrationBean registrationBean)throws DaoException 
	{
		ArrayList billlist=null;
		try{        	
			eclinicDaoManager.startTransaction();
			billlist=setupDao.getBillApprovalDetailsList(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return billlist;
	}

	public List<SetupBean> getAllConsultDiagnosis4Claim(SetupBean setupBean) throws DaoException 
	{
		List<SetupBean> list= null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=setupDao.getAllConsultDiagnosis4Claim(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<HistoryPresentIllBean> getAllChiefComplaints4Claim(SetupBean setupBean) throws DaoException 
	{
		List<HistoryPresentIllBean> list= null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=setupDao.getAllChiefComplaints4Claim(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public SetupBean getConsultDiagnosisDetailsById(RegistrationBean registrationBean) throws DaoException 
	{
		SetupBean list= null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=registrationDao.getConsultDiagnosisDetailsById(registrationBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<OfficeLetterHeadBean> getOfficePrivilegeDetails(OfficeLetterHeadBean officeBean) throws DaoException {
		List<OfficeLetterHeadBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=hierarchyDao.getOfficePrivilegeDetails(officeBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<OfficeLetterHeadBean> getAllOfficePrivileges(OfficeLetterHeadBean officeBean) throws DaoException {
		List<OfficeLetterHeadBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=hierarchyDao.getAllOfficePrivileges(officeBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertOfficePrivileges(OfficeLetterHeadBean officeBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			hierarchyDao.insertOfficePrivileges(officeBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deleteOfficePrivileges(String value) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			hierarchyDao.deleteOfficePrivileges(value);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList getAllLabTestListICD(SetupBean setupBean) throws DaoException
	{
		ArrayList list= null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=consultationDao.getAllLabTestListICD(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabTestListICD4Insur(SetupBean setupBean) throws DaoException
	{
		ArrayList list= null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=consultationDao.getAllLabTestListICD4Insur(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllLabTestListICD4InsurNetwork(SetupBean setupBean)  throws DaoException
	{
		ArrayList list= null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=consultationDao.getAllLabTestListICD4InsurNetwork(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public String getNewIdToUpdateAfterSubmit(String type,String unique_id,UserBean userBean,RegistrationDao registrationDao) throws DaoException
	{
		//RegistrationBean regBean = new RegistrationBean();
		String next_id = "";
		String table_name = "";
		String field_check = "";
		String field_name = "";
		String prefix_name = "";
		String field_name_office = "office_id";
		if(type.equals("SA"))
		{
			table_name = "item_adjuststock_master";
			field_check = "id";
			field_name = "stk_adj_id";
			prefix_name = "stk_adj_prefix";
		}
		else if(type.equals("MR"))
		{
			table_name = "item_request";
			field_check = "request_Id";
			field_name = "mat_req_id";
			prefix_name = "mat_req_prefix";
		}
		else if(type.equals("IV"))
		{
			table_name = "sale_master";
			field_check = "sale_id";
			field_name = "iss_vouc_id";
			prefix_name = "iss_vouc_prefix";
			field_name_office = "request_tooffice";
		}
		else if(type.equals("IC"))
		{
			table_name = "item_consumption";
			field_check = "id";
			field_name = "mat_con_id";
			prefix_name = "mat_con_prefix";
		}
		else if(type.equals("PO"))
		{
			table_name = "purchaseorder_master";
			field_check = "porder_id";
			field_name = "pur_req_id";
			prefix_name = "pur_req_prefix";
		}
		else if(type.equals("PG"))
		{
			table_name = "purchase_grn_master";
			field_check = "grn_no";
			field_name = "grn_id";
			prefix_name = "pur_grn_prefix";
		}
		else if(type.equals("PI"))
		{
			table_name = "purchase_master";
			field_check = "purchase_id";
			field_name = "invoice_id";
			prefix_name = "pur_inv_prefix";
		}
		else if(type.equals("PR"))
		{
			table_name = "purchasereturn_master";
			field_check = "return_id";
			field_name = "pur_ret_id";
			prefix_name = "pur_ret_prefix";
		}
		else if(type.equals("SR"))
		{
			table_name = "salereturn_master";
			field_check = "return_id";
			field_name = "sale_ret_id";
			prefix_name = "sale_ret_prefix";
		}

		//regBean.setQuery("select "+field_name_office+" from "+table_name+" where "+field_check+"='"+unique_id+"'");
		parameterBean = new ParameterBean();
		parameterBean.setTable_name(table_name);
		parameterBean.setField_name(field_name_office);
		parameterBean.setField_name1(field_check);
		parameterBean.setField_value1(unique_id);
		parameterBean.setOffice_id(null);
		parameterBean.setField_name2(null);
		String office_id = commonDao.fetchValueWithSingleParam(parameterBean);
		parameterBean=null;
		if(office_id==null || office_id.equals(""))
			office_id = userBean.getOffice_id();

		//regBean.setQuery("select "+prefix_name+" from office_details where office_id='"+office_id+"'");
		parameterBean = new ParameterBean();
		parameterBean.setTable_name("office_details");
		parameterBean.setField_name(prefix_name);
		parameterBean.setField_name1(null);
		parameterBean.setField_value1(null);
		parameterBean.setOffice_id(office_id);
		parameterBean.setField_name2(null);
		String new_id_prefix = commonDao.fetchValueWithSingleParam(parameterBean);
		parameterBean=null;

		parameterBean = new ParameterBean();
		parameterBean.setTable_name(table_name);
		parameterBean.setField_name(field_name);
		parameterBean.setField_name2(field_name_office);
		parameterBean.setPrefixLength("0");
		parameterBean.setOffice_id(office_id);
		if(new_id_prefix!=null && !new_id_prefix.equals(""))
		{
			int len = new_id_prefix.length();
			if(""+len!=null && len>0){
				len = len+1;
				parameterBean.setPrefixLength(""+len);
				//regBean.setQuery("select max(1+mid("+field_name+","+len+")) from "+table_name+" where "+field_name_office+"='"+office_id+"'");
			}
			//else{
				//regBean.setQuery("select max("+field_name+"+1) from "+table_name+" where "+field_name_office+"='"+office_id+"'");	
			//}
		}
		//else{
			//regBean.setQuery("select max("+field_name+"+1) from "+table_name+" where "+field_name_office+"='"+office_id+"'");	
		//}
		//String new_id = registrationDao.isAlreadyExist(regBean);
		String new_id = commonDao.fetchMaxInventoryIdByPrefix(parameterBean);
		if(new_id == null)
			new_id = "1";

		if(new_id_prefix==null || new_id_prefix.equals("")){
			next_id = new_id;
		}else{
			next_id = new_id_prefix + new_id;
		}
		parameterBean=null;
		return next_id;		
	}
	public ArrayList getMedicalHistoryMaster(HistoryPresentIllBean historyPresentIllBean)  throws DaoException
	{
		ArrayList list= null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=consultationDao.getMedicalHistoryMaster(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertHistoryAssign(HistoryPresentIllBean historyPresentIllBean) throws DaoException
	{
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertHistoryAssign(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public ArrayList<HistoryPresentIllBean> getHistoryMasterByType(HistoryPresentIllBean historyPresentIllBean) throws DaoException
	{
		ArrayList<HistoryPresentIllBean> list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<HistoryPresentIllBean>) consultationDao.getHistoryMasterByType(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;		
	}

	public ArrayList getAllIncomeAccountHeads(AccountBean childBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) accountDao.getAllIncomeAccountHeads(childBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<AccountBean> getAllIncomeAccountChilds(AccountBean accbean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) accountDao.getAllIncomeAccountChilds(accbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public AccountBean getFinancialYearPeriod(AccountBean accountBean) throws DaoException {
		AccountBean accBean=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			accBean=accountDao.getFinancialYearPeriod(accountBean);

			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return accBean;
	}

	public void insertFinancialYear(AccountBean accountBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			accountDao.insertFinancialYear(accountBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}		

	}
	public void insertUsersOffice(UserBean userBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			loginDao.insertUsersOffice(userBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deleteUsersOffice(String id) throws DaoException 
	{
		try{    
			eclinicDaoManager.startTransaction();
			loginDao.deleteUsersOffice(id);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<OfficeLetterHeadBean> getUserAssignedOffices(UserBean userBean) throws DaoException 
	{
		ArrayList<OfficeLetterHeadBean> officeListFrUsers = null;
		try {
			OfficeLetterHeadBean officeBean = new OfficeLetterHeadBean();
			officeBean.setOffice_id(userBean.getOffice_id());
			officeBean.setOfficeName(userBean.getOffice_name());

			boolean curr_office = false;
			eclinicDaoManager.startTransaction();
			officeListFrUsers = hierarchyDao.getUserAssignedOffices(userBean);
			if(officeListFrUsers==null){
				officeListFrUsers = new ArrayList<OfficeLetterHeadBean>();
			}else{
				for(OfficeLetterHeadBean offBean : officeListFrUsers)
				{
					if(offBean.getOffice_id().equals(userBean.getOffice_id())){
						curr_office = true;
						break;
					}
				}
			}
			if(!curr_office)
				officeListFrUsers.add(officeBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return officeListFrUsers;
	}

	public List <HierarchySetupBean> getAllSeatsUnderDepartment(HierarchySetupBean hBean) throws DaoException
	{
		List<HierarchySetupBean> list = null;
		try
		{
			eclinicDaoManager.startTransaction();
			list=hierarchyDao.getAllSeatsUnderDepartment(hBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e2){
			}
			throw((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List <HierarchySetupBean> getAllDesignations(HierarchySetupBean hBean) throws DaoException
	{
		List<HierarchySetupBean> list = null;
		try
		{
			eclinicDaoManager.startTransaction();
			list=hierarchyDao.getAllDesignations(hBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e2){
			}
			throw((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public HierarchySetupBean getDepartmentForUser(HierarchySetupBean hBean) throws DaoException
	{
		HierarchySetupBean list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(HierarchySetupBean)hierarchyDao.getDepartmentForUser(hBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<HierarchySetupBean> getPrivUnderSeat(HierarchySetupBean hBean) throws DaoException
	{
		List<HierarchySetupBean> list = null;
		try
		{
			eclinicDaoManager.startTransaction();
			list=hierarchyDao.getPrivUnderSeat(hBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e2){
			}
			throw((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	// Department Privileges
	public List<MedicalPrivilegeBean> getDepartmentPrivilegeDetails(MedicalPrivilegeBean privBean) throws DaoException {
		List<MedicalPrivilegeBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = consultationDao.getDepartmentPrivilegeDetails(privBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertDepartmentPrivileges(MedicalPrivilegeBean privBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertDepartmentPrivileges(privBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deleteDepartmentPrivileges(String value) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.deleteDepartmentPrivileges(value);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}


	public List<RegistrationBean> getAllSLConsultationList(RegistrationBean rgistrationBean) throws DaoException {
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllSLConsultationList(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}






	/** Dental Chart Modifications - START **/
	public List<SetupBean> getAllDentalTreatmentsOfPatient(SetupBean setupBean) throws DaoException
	{
		List<SetupBean> setupBean1 = null;
		try {
			eclinicDaoManager.startTransaction();
			setupBean1 = consultationDao.getAllDentalTreatmentsOfPatient(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean1;
	} 
	/** Dental Chart Modifications - END **/

	public SmsBean getSmsSetupDetails(SmsBean smsBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			smsBean = setupDao.getSmsSetupDetails(smsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return smsBean;
	}

	public void insertPatientPhoto(PhotoUploadBean photoUploadBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertPatientPhoto(photoUploadBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public PhotoUploadBean getPatientPhoto(PhotoUploadBean photoUploadBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			photoUploadBean = registrationDao.getPatientPhoto(photoUploadBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return photoUploadBean;
	}

	public ArrayList getAllServices(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllServices(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<ReportBean> getAllDailyTransRefundCashSummary(RegistrationBean regiBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  reportsDao.getAllDailyTransRefundCashSummary(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<ReportBean> getAllDailyTransRefundInsuranceSummary(RegistrationBean regiBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  reportsDao.getAllDailyTransRefundInsuranceSummary(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}



	public List getAppointmentsForSMS(AppointmentBean appointmentBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) appointDao.getAppointmentsForSMS(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public SetupBean getLastPasswordUpdatedDate(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getLastPasswordUpdatedDate(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	public void updatePasswordSetup(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.updatePasswordSetup(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public List<UserBean> getAllUsersByPrivilageOption(UserBean userBean) throws DaoException 
	{
		List<UserBean> lst=null;
		try{        	
			eclinicDaoManager.startTransaction();
			lst=loginDao.getAllUsersByPrivilageOption(userBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lst;
	}





	public SetupBean getPasswordSetupById(SetupBean setBean) throws DaoException {
		SetupBean setB=null;
		try {        	
			eclinicDaoManager.startTransaction();
			setB=setupDao.getPasswordSetupById(setBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setB;
	}
	public List<DashboardBean> getPatientAppointRegisterCount(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getPatientAppointRegisterCount(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public List<DashboardBean> getPatientBillStatus(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getPatientBillStatus(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public List<DashboardBean> getDoctorViewedCount(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getDoctorViewedCount(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public SetupBean getConsultPackageServiceDetailsById(SetupBean setupBean) throws DaoException {
		SetupBean serviceBean = null;
		try {
			eclinicDaoManager.startTransaction();
			serviceBean = (SetupBean) setupDao.getConsultPackageServiceDetailsById(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return serviceBean;
	}

	public void insertPasswordChanged(SetupBean setupBean) throws DaoException {
		try{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertPasswordChanged(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}


	public List<DashboardBean> getDepartmentWisePatientCount(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getDepartmentWisePatientCount(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	/*
	 * CSSD Module Implementation Changes ---- @STARTS -----
	 */
	public ArrayList<CSSDBean> getAllItemsSterilizable(CSSDBean cssdBean) throws DaoException 
	{
		ArrayList<CSSDBean> list;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)cssdDao.getAllItemsSterilizable(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public CSSDBean getSterilizableItemById(String item_id) throws DaoException 
	{
		CSSDBean list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=cssdDao.getSterilizableItemById(item_id);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void updateSterilizationDetails(CSSDBean cssdBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			cssdDao.updateSterilizationDetails(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public ArrayList<CSSDBean> getAllEquipmentBundleList(CSSDBean cssdBean) throws DaoException 
	{
		ArrayList<CSSDBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=cssdDao.getAllEquipmentBundleList(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertEquipmentBundle(CSSDBean cssdBean) throws DaoException 
	{
		try	{        	
			eclinicDaoManager.startTransaction();
			cssdDao.insertEquipmentBundle(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deleteEquipmentBundle(CSSDBean cssdBean) throws DaoException 
	{
		try	{        	
			eclinicDaoManager.startTransaction();
			cssdDao.deleteEquipmentBundle(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateEquipmentBundle(CSSDBean cssdBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			cssdDao.updateEquipmentBundle(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public CSSDBean getEquipmentBundleById(String bundle_id) throws DaoException 
	{
		CSSDBean list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=cssdDao.getEquipmentBundleById(bundle_id);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<CSSDBean> getEquipmentBundleItemsById(String bundle_id) throws DaoException 
	{
		ArrayList<CSSDBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=cssdDao.getEquipmentBundleItemsById(bundle_id);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void addItemsToEquipmentBundle(CSSDBean cssdBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			cssdDao.addItemsToEquipmentBundle(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void activateEquipmentBundle(CSSDBean cssdBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			cssdDao.activateEquipmentBundle(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deactiveEquipmentBundle(CSSDBean cssdBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			cssdDao.deactiveEquipmentBundle(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public ArrayList<CSSDBean> getAllEquipmentAllocation(CSSDBean cssdBean) throws DaoException 
	{
		ArrayList<CSSDBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=cssdDao.getAllEquipmentAllocation(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}	
	public void registerSterilizableEquipment(ArrayList<CSSDBean> itemList,HttpServletRequest request, UserBean userBean, HttpSession session) 
	{
		CSSDBean cssdBean = new CSSDBean();
	/*	RegistrationBean regBean = new RegistrationBean();
		DecimalFormat df=new DecimalFormat("#########.00");
		DecimalFormat df3=new DecimalFormat("#########.000");
		DecimalFormat df4=new DecimalFormat("#########.0000");
		SimpleDateFormat sdf3=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");*/
		String eqpBarcode="";

		try{
			eclinicDaoManager.startTransaction();
			if(itemList!=null && itemList.size()>0)
			{
				Iterator itr = itemList.iterator(); 
				while(itr.hasNext())
				{
					cssdBean=(CSSDBean) itr.next();
					if(cssdBean.getQty_delivered()!=null && !cssdBean.getQty_delivered().equals("") && !cssdBean.getQty_delivered().equals(""))
					{
						//regBean.setQuery("select item_name from item_master where item_id='"+cssdBean.getItem_id()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("item_master");
						parameterBean.setField_name("item_name");
						parameterBean.setField_name1("item_id");
						parameterBean.setField_value1(cssdBean.getItem_id());
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2(null);
						String item_name=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;

						//regBean.setQuery("select child_id from account_child where child_name='"+item_name+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("account_child");
						parameterBean.setField_name("child_id");
						parameterBean.setField_name1("child_name");
						parameterBean.setField_value1(item_name);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2(null);
						String child_id=commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;

						if(child_id!=null && !child_id.equals(""))
							cssdBean.setChild_id(child_id);
						else
							cssdBean.setChild_id("");
						for(int i=0;i<Double.parseDouble(cssdBean.getQty_delivered());i++)
						{
							/*regBean.setQuery("select if(max(batch_no) is null,'1',max(batch_no)+1) from cssd_equipments where item_id='"+cssdBean.getItem_id()+"'");
							String batch = registrationDao.isAlreadyExist(regBean);*/

							parameterBean = new ParameterBean();
							parameterBean.setTable_name("cssd_equipments");
							parameterBean.setItem_id(cssdBean.getItem_id());
							String batch = commonDao.fetchNextBatchNumber(parameterBean);
							parameterBean=null;
							
							cssdBean.setBatch_no(batch);

							if (cssdBean.getItem_code()!=null) 
								eqpBarcode = cssdBean.getItem_code();
							if(eqpBarcode!="")
								eqpBarcode = eqpBarcode.concat("-EB");

							eqpBarcode = eqpBarcode.concat(cssdBean.getBatch_no());
							cssdBean.setBatch_no(batch);
							cssdBean.setEqp_barcode(eqpBarcode);
							cssdBean.setDepartment_id("0");
							cssdDao.insertEquipmentRegistration(cssdBean);
							/*regBean.setQuery("update item_stock set sterilization='Y' where stock_id='"+cssdBean.getSerial_id()+"'");
							registrationDao.deleteQuery(regBean);*/
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("item_stock");
							parameterBean.setField_name("sterilization='Y'");
							parameterBean.setField_name1("stock_id='"+cssdBean.getSerial_id()+"'");
							commonDao.updateQueryInCommon(parameterBean);
							parameterBean=null;
						}
					}
				}				
			}			
			eclinicDaoManager.commitTransaction();
		}catch (Exception e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (DaoException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		}		
	}
	public ArrayList<CSSDBean> getAllRegisteredEquipment(CSSDBean cssdBean) throws DaoException 
	{
		ArrayList<CSSDBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=cssdDao.getAllRegisteredEquipment(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<CSSDBean> getAllCSSDEquipments(CSSDBean cssdBean) throws DaoException 
	{
		ArrayList<CSSDBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=cssdDao.getAllCSSDEquipments(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public String insertEquipmentRequest(CSSDBean cssdBean) throws DaoException 
	{
		String pid=null;
		try{        	
			eclinicDaoManager.startTransaction();
			cssdDao.insertEquipmentRequest(cssdBean);
			pid=cssdDao.getLastEquipmentRequestId();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return pid;
	}
	public CSSDBean getEquipmentRequestByID(String pid) throws DaoException 
	{
		CSSDBean list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(CSSDBean)cssdDao.getEquipmentRequestByID(pid);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<CSSDBean> getEquipmentRequestDetailsByID(String pid) throws DaoException 
	{
		ArrayList list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<CSSDBean>)cssdDao.getEquipmentRequestDetailsByID(pid);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<CSSDBean> getAllEquipmentRequestsList(CSSDBean cssdBean) throws DaoException 
	{
		ArrayList list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)cssdDao.getAllEquipmentRequestsList(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void updateEquipmentRequest(CSSDBean cssdBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			cssdDao.updateEquipmentRequest(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public ArrayList<CSSDBean> getAllCSSDEquipmentsBySearch(CSSDBean cssdBean) throws DaoException
	{
		ArrayList<CSSDBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)cssdDao.getAllCSSDEquipmentsBySearch(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertEquipmentRequestDetails(CSSDBean cssdBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			cssdDao.insertEquipmentRequestDetails(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public void deleteEquipmentRequest(CSSDBean cssdBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			cssdDao.deleteEquipmentRequest(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public void deleteEquipmentRequestDetails(String serial_id) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			cssdDao.deleteEquipmentRequestDetails(serial_id);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public ArrayList<CSSDBean> getAllEquipmentIssuanceList(CSSDBean cssdBean) throws DaoException
	{
		ArrayList<CSSDBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)cssdDao.getAllEquipmentIssuanceList(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllEqpRequestsList(PurchaseBean purchaseBean) throws DaoException
	{
		ArrayList<PurchaseBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)cssdDao.getAllEqpRequestsList(purchaseBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<PurchaseBean> getAllEqpIssueList(PurchaseBean purchaseBean) throws DaoException
	{
		ArrayList<PurchaseBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)cssdDao.getAllEqpIssueList(purchaseBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<CSSDBean> getAllEquipmentsinDepartment(CSSDBean cssdBean)  throws DaoException
	{
		ArrayList<CSSDBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)cssdDao.getAllEquipmentsinDepartment(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertSterilizationRequest(CSSDBean cssdBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			cssdDao.insertSterilizationRequest(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public ArrayList<CSSDBean> getSterilizationRequestDetails(CSSDBean cssdBean) throws DaoException 
	{
		ArrayList<CSSDBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=cssdDao.getSterilizationRequestDetails(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void sterilizationRequestItemTransfer(CSSDBean cssdBean)	throws DaoException
	{
		try  {   
			int remqty=(Integer.parseInt(cssdBean.getAvQnty()))-(Integer.parseInt(cssdBean.getItem_quantity()));
			eclinicDaoManager.startTransaction();
			//RegistrationBean regBean = new RegistrationBean();
			ArrayList<CSSDBean> barcodeLists = cssdDao.getSterilizationRequestDetails(cssdBean);
			for(CSSDBean barcodeList:barcodeLists)
			{
				/*regBean.setQuery("update fixed_assets set department_id="+cssdBean.getToDepartment_id()+" where barcode='"+barcodeList.getBarcode()+"'");
				registrationDao.deleteQuery(regBean);*/
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("fixed_assets");
				parameterBean.setField_name("department_id='"+cssdBean.getToDepartment_id()+"'");
				parameterBean.setField_name1("barcode='"+barcodeList.getBarcode()+"'");
				commonDao.updateQueryInCommon(parameterBean);
				parameterBean=null;
			}

			/*regBean.setQuery("update item_stock set item_quantity="+remqty+" where item_id='"+cssdBean.getItem_id()+"' and department_id='"+cssdBean.getDepartment_id()+"'and office_id='"+cssdBean.getOffice_id()+"'");
			registrationDao.deleteQuery(regBean);*/
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("item_stock");
			parameterBean.setField_name("item_quantity='"+remqty+"'");
			parameterBean.setField_name1("item_id='"+cssdBean.getItem_id()+"' and department_id='"+cssdBean.getDepartment_id()+"'and office_id='"+cssdBean.getOffice_id()+"'");
			commonDao.updateQueryInCommon(parameterBean);
			parameterBean=null;

			cssdDao.insertItemStock4Sterilization(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public ArrayList<CSSDBean> getAllAcknowledgedSterilizationRequest(CSSDBean cssdBean) throws DaoException 
	{
		ArrayList<CSSDBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=cssdDao.getAllAcknowledgedSterilizationRequest(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public CSSDBean getAllSterilizationDetails(CSSDBean cssdbean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			cssdbean=cssdDao.getAllSterilizationDetails(cssdbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return cssdbean;
	}
	public void saveSterilizerDetails(CSSDBean cssdBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			cssdDao.saveSterilizerDetails(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public CSSDBean getSterilizerCycleDetails(CSSDBean cssdbean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			cssdbean=cssdDao.getSterilizerCycleDetails(cssdbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return cssdbean;
	}
	public void updateSterilizerDetails(CSSDBean cssdBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			cssdDao.updateSterilizerDetails(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public void sentEquipment4Packing(CSSDBean cssdBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			cssdDao.sentEquipment4Packing(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public ArrayList<CSSDBean> getAllSterilizationPackedLists(CSSDBean cssdBean) throws DaoException 
	{
		ArrayList<CSSDBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=cssdDao.getAllSterilizationPackedLists(cssdBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void sterilizationIssueItemTransfer(CSSDBean sterilizedEqp)throws DaoException
	{
		try{
			eclinicDaoManager.startTransaction();
			//RegistrationBean regBean=new RegistrationBean();

			/*regBean.setQuery("update item_stock set item_quantity=item_quantity+1 where item_id='"+sterilizedEqp.getItem_id()+"' "
					+ "and department_id='"+sterilizedEqp.getDept_Id()+"'");
			registrationDao.deleteQuery(regBean);*/
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("item_stock");
			parameterBean.setField_name("item_quantity=item_quantity+1");
			parameterBean.setField_name1(" item_id='"+sterilizedEqp.getItem_id()+"'and department_id='"+sterilizedEqp.getDept_Id()+"'");
			commonDao.updateQueryInCommon(parameterBean);
			parameterBean=null;

			/*regBean.setQuery("update item_stock set item_quantity=item_quantity-1 where item_id='"+sterilizedEqp.getItem_id()+"' "
					+ "and department_id='"+sterilizedEqp.getToDepartment_id()+"' and sterilization='N'");
			registrationDao.deleteQuery(regBean);*/
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("item_stock");
			parameterBean.setField_name("item_quantity=item_quantity-1");
			parameterBean.setField_name1("item_id='"+sterilizedEqp.getItem_id()+"'and department_id='"+sterilizedEqp.getToDepartment_id()+"' and sterilization='N'");
			commonDao.updateQueryInCommon(parameterBean);
			parameterBean=null;

			/*regBean.setQuery("update fixed_assets set department_id="+sterilizedEqp.getDept_Id()+" where barcode='"+sterilizedEqp.getBarcode()+"'");
			registrationDao.deleteQuery(regBean);*/
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("fixed_assets");
			parameterBean.setField_name("department_id='"+sterilizedEqp.getDept_Id()+"'");
			parameterBean.setField_name1("barcode='"+sterilizedEqp.getBarcode()+"'");
			commonDao.updateQueryInCommon(parameterBean);
			parameterBean=null;
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}
	public List<DashboardBean> getSampleCollectedStatusCount(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getSampleCollectedStatusCount(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public List<DashboardBean> getAccessionStatusCount(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getAccessionStatusCount(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public List<DashboardBean> getAuthenticationStatusCount(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getAuthenticationStatusCount(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public List<DashboardBean> getDispatchStatus(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getDispatchStatus(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public void insertEncounterReopen(ConsultationBean consultationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertEncounterReopen(consultationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List<ConsultationBean> getEncounterReopenDetails(ConsultationBean consultationBean) throws DaoException {
		List<ConsultationBean> reopenList=null;
		try {
			eclinicDaoManager.startTransaction();
			reopenList = consultationDao.getEncounterReopenDetails(consultationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return reopenList;
	}

	public List<RegistrationBean> getAllEncounterReopenDetails(RegistrationBean registrationBean) throws DaoException {
		List<RegistrationBean> reopenList=null;
		try {
			eclinicDaoManager.startTransaction();
			reopenList = consultationDao.getAllEncounterReopenDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return reopenList;
	}
	public List<RegistrationBean> getAllTestsInProfile4SampleCollect(RegistrationBean registrationBean) throws DaoException {
		List<RegistrationBean> testProfiles=null;
		try {
			eclinicDaoManager.startTransaction();
			testProfiles = laboratoryDao.getAllTestsInProfile4SampleCollect(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return testProfiles;
	}
	public ArrayList getAllTestResults(RegistrationBean registrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = (ArrayList)setupDao.getAllTestResults(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList getDoctorInsurNetPrice(SetupBean setup)throws DaoException{
		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getDoctorInsurNetPrice(setup);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<DashboardBean> getMaterialRequestCount(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getMaterialRequestCount(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}

	public List<DashboardBean> getPurchaseOrderStatus(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getPurchaseOrderStatus(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public RegistrationBean getBillStatus(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getBillStatus(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void insertCopyTemplates(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			consultationDao.insertCopyTemplates(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added new template "+registrationBean.getTemplate_name()+" in copy templates", "", "", "template_master");
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateCopyTemplates(RegistrationBean registrationBean,HttpServletRequest request) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			consultationDao.updateCopyTemplates(registrationBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(registrationBean, request, "UPDATE", "Updated a template "+registrationBean.getTemplate_name()+" in copy templates", "", "", "template_master");
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public synchronized void collectSampleForLabAndRadiology(String method,RegistrationBean registrationBean,UserBean userBean,HttpServletRequest request) throws Exception
	{
		SimpleDateFormat sdFromDB = new SimpleDateFormat("dd-MM-yyyy");
		SimpleDateFormat sdToDB = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat sdToDB1 = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		ParameterBean parameterBean = new ParameterBean();
		try{        	
			eclinicDaoManager.startTransaction();

			RegistrationBean patientBean=null;
			if(method.equals("collectSample") || method.equals("radServiceDone")){
				registrationBean.setOp_number(request.getParameter("op_number"));
				registrationBean.setConsult_id(request.getParameter("consult_id"));
			}
			registrationBean.setOffice_id(userBean.getOffice_id());
			patientBean = registrationDao.getConsultDetailByID(registrationBean);
			/** Checking whether barcode no already exists **/
			if(patientBean.getBarcode_no() == null) {
				/** Code for updating barcode no in doctorConsult table ***/
					patientBean = generateAndUpdateBarcodeNo(patientBean,userBean);
				}
			String consultDate=patientBean.getConsult_date();
			int age=0;

			String sex=patientBean.getSex();

			if(patientBean.getPatient_age()!=null && !patientBean.getPatient_age().equals("") && !patientBean.getPatient_age().equals("0"))
				age=Integer.parseInt(patientBean.getPatient_age())*365;

			if(patientBean.getPatient_agemonth()!=null && !patientBean.getPatient_agemonth().equals("") && !patientBean.getPatient_agemonth().equals("0"))
				age=age+Integer.parseInt(patientBean.getPatient_agemonth())*30;

			if(patientBean.getPatient_ageweek()!=null && !patientBean.getPatient_ageweek().equals("") && !patientBean.getPatient_ageweek().equals("null") && !patientBean.getPatient_ageweek().equals("0"))
				age=age+Integer.parseInt(patientBean.getPatient_ageweek())*7;

			//SetupBean setBean=null;
			registrationBean.setOp_number(patientBean.getOp_number());
			if(method.equals("newRadTestEntry") || method.equals("radServiceDone"))
				registrationBean.setLab_type("(test_setup.lab_type='S' or test_setup.lab_type='X' or test_setup.lab_type='E')");
			else
				registrationBean.setLab_type("test_setup.lab_type='L'");
			//credit note entries to reflect in sample collect

			registrationBean.setCredit_note(null);
			List<SetupBean> list = registrationDao.getAllConsultLabTest(registrationBean);

			ArrayList<String> labs = new ArrayList<String>();
			if(method.equals("collectSample") || method.equals("radServiceDone")){
				String abc[] = request.getParameter("selmails").split(",");
				for(int i=0;i<abc.length;i++)
				{
					labs.add(abc[i]);
				}
			}else{
				String abc[]=request.getParameterValues("selmails");
				for(int i=0;i<abc.length;i++)
				{
					labs.add(abc[i]);
				}
			}

			/*registrationBean.setQuery("select lab_slno from doctor_consult where consult_id='"+patientBean.getConsult_id()+"'");
			String lno=registrationDao.isAlreadyExist(registrationBean);*/
			//String labslno="";
			//DecimalFormat labSlNo=new DecimalFormat("000");
			String lno="";
			for(SetupBean setBean : list) //iterating consult labtest list
			{
				/*if(labs.contains(setBean.getLabtest_id()))*/
				Boolean status = true;
				String collectDate=null,collectHr=null,collectMn=null;
				String receiveDate=null,receiveHr=null,receiveMn=null;
				if(labs.contains(setBean.getSerial_id()))
				{
					if(setBean.getLab_type()!=null && setBean.getLab_type().equals("L"))
					{
					collectDate=sdToDB.format(sdFromDB.parse(request.getParameter("collect_date"+setBean.getContainer_id())));
					collectHr=request.getParameter("collect_hour"+setBean.getContainer_id());
					collectMn=request.getParameter("collect_minute"+setBean.getContainer_id());
					
					receiveDate=sdToDB.format(sdFromDB.parse(request.getParameter("received_date"+setBean.getContainer_id())));
					receiveHr=request.getParameter("received_hour"+setBean.getContainer_id());
					receiveMn=request.getParameter("received_minute"+setBean.getContainer_id());
					}
					
					
					String send_out = setBean.getSendout_lab();
					setBean.setOffice_id(userBean.getOffice_id());
					if(setBean.getProfile_type().equals("Y"))
					{							
						String abc[]=request.getParameterValues("selmailsp"+setBean.getSerial_id());
						String prof_test_ids = "";
						if(abc!=null && abc.length>0){
							for(int i=0;i<abc.length;i++)
							{
								if(prof_test_ids.equals(""))
									prof_test_ids = abc[i];
								else
									prof_test_ids = prof_test_ids + "," + abc[i];
							}
							if(!prof_test_ids.equals("")){
								patientBean.setProfile_testid(prof_test_ids);
							}
						}
						else {
							prof_test_ids =  laboratoryDao.getProfileIds(setBean);
							patientBean.setProfile_testid(prof_test_ids);
						}

						patientBean.setTestId(setBean.getLabtest_id());
						patientBean.setActive_status("Y");
						patientBean.setOffice_id(userBean.getOffice_id());
						List<RegistrationBean> pTestList = setupDao.getAllTestsInProfile(patientBean); //parameter
						for(RegistrationBean pTestBean : pTestList)
						{
							setBean.setOffice_id(userBean.getOffice_id());
							setBean.setContainer_id(pTestBean.getContainer_id());
							setBean.setTest_suffix(pTestBean.getTest_suffix());
							lno=getBarcodeNo4LabByContainer(consultDate,setBean,userBean,patientBean);

							parameterBean = new ParameterBean();
							parameterBean.setLab_idno(lno);
							parameterBean.setConsult_id(setBean.getConsult_id());
							parameterBean.setOffice_id(userBean.getOffice_id());
							parameterBean.setTest_id(pTestBean.getProfile_testid());
							
							if( laboratoryDao.checkDuplicateLabIdno(parameterBean) == null) {
								// Different Barcode for same test, same patient, collected same day - START
								if (laboratoryDao.checkDuplicateTestId(parameterBean) != null && status) {

									String consId=setBean.getConsult_id();
									setBean.setConsult_id(null); // for generating new barcode no
									lno=getBarcodeNo4LabByContainer(consultDate,setBean,userBean,patientBean);
									setBean.setConsult_id(consId); // resetting consult_id
									status = false;
								}
								// Different Barcode for same test, same patient, collected same day - END

								String idOfTestInProfile="";
								idOfTestInProfile=pTestBean.getProfile_testid();
								pTestBean.setTestId(idOfTestInProfile);
								pTestBean.setLabtest_id(pTestBean.getCategoryId());
								pTestBean.setOffice_id(userBean.getOffice_id());
								pTestBean.setLabtest_id(idOfTestInProfile);
								pTestBean = registrationDao.getEditTestSetup(pTestBean); 
								registrationBean.setTestId(idOfTestInProfile);
								if(null != pTestBean && pTestBean.getRemarks()!=null)
									registrationBean.setRemarks(pTestBean.getRemarks());
								registrationBean.setLab_idno(lno);
								registrationBean.setEnteredby(userBean.getUser_id());
								registrationBean.setSerial_id(setBean.getLabtest_id());//to insert profile id

								if(send_out==null || send_out.equals("")){
									//registrationBean.setQuery("select sendout_lab from test_setup_office where test_id='"+idOfTestInProfile+"' and office_id='"+userBean.getOffice_id()+"'");
									parameterBean = new ParameterBean();
									parameterBean.setTable_name("test_setup_office");
									parameterBean.setField_name("sendout_lab");
									parameterBean.setField_name1("test_id");
									parameterBean.setField_value1(idOfTestInProfile);
									parameterBean.setOffice_id(userBean.getOffice_id());
									parameterBean.setField_name2(null);
									String clinic_id = commonDao.fetchValueWithSingleParam(parameterBean);
									parameterBean=null;
									if(clinic_id!=null && !clinic_id.equals("") && !clinic_id.equals("0"))
										registrationBean.setSendout_lab(clinic_id);
								}else{
									registrationBean.setSendout_lab(send_out);
								}

								//RegistrationBean labtestBean = registrationDao.getTestDetailsById(registrationBean);
								RegistrationBean labtestBean=null; // for duplicate test sample collection
								if(pTestBean.getActive_status().equals("Y") && labtestBean==null)
								{
									registrationBean.setOffice_id(userBean.getOffice_id());
									registrationBean.setEmergency(setBean.getEmergency());
									registrationBean.setContainer_id(setBean.getContainer_id());
									registrationBean.setTest_suffix(setBean.getTest_suffix());
									/*if(userBean.getLab_status()!=null && !userBean.getLab_status().equals("") && userBean.getLab_status().equals("Y")) {
									String collect_date = laboratoryDao.getCollectDate(registrationBean.getConsult_id());
									if(collect_date!=null && !collect_date.equals("") )
										registrationBean.setSamplCollectDate(collect_date);
								    }*/
									if(setBean.getLab_type()!=null && setBean.getLab_type().equals("L")) {
										
										registrationBean.setSamplCollectDate(collectDate+" "+collectHr+":"+collectMn);
										registrationBean.setSampleReceivedDate(receiveDate+" "+receiveHr+":"+receiveMn);
									}
										
									else {
										registrationBean.setSamplCollectDate(sdToDB1.format(new Date()));
										registrationBean.setSampleReceivedDate(sdToDB1.format(new Date()));
									}
										
								    
								   
									registrationDao.insertTestDetails(registrationBean);

									String testreportid = registrationDao.getLastInsertTestNumber();

									labtestBean = new RegistrationBean();
									labtestBean.setTestDetailsid(testreportid);
									labtestBean = registrationDao.getTestDetailsById(registrationBean);

									registrationBean.setTestId(idOfTestInProfile);
									registrationBean.setActive_status("Y");
									registrationBean.setOffice_id(userBean.getOffice_id());
									List<RegistrationBean> sublist = registrationDao.selectSubsetupItems(registrationBean);
									for(RegistrationBean subTestBean : sublist)
									{
										subTestBean.setOffice_id(userBean.getOffice_id());
										if(subTestBean.getActive_status().equals("Y"))
										{
											subTestBean.setTestDetailsid(testreportid); 
											subTestBean.setTestId(idOfTestInProfile);
											subTestBean.setOp_number(registrationBean.getOp_number()); 
											subTestBean.setLab_idno(lno);
											subTestBean.setAge_lower(""+age);
											subTestBean.setSex(sex);
											if(subTestBean.getIs_bold()==null)
												subTestBean.setIs_bold("N");
											subTestBean.setOffice_id(userBean.getOffice_id());
											registrationDao.insertTestResultsdetails(subTestBean);
										}
									}
									String log_remarks = "";
									if(method.equals("newRadTestEntry") || method.equals("radServiceDone"))
										log_remarks = "Radiology Test [ "+labtestBean.getTestName()+" ] Done For Patient "+labtestBean.getPatient_name();
									else
										log_remarks = "Laboratory Test [ "+labtestBean.getTestName()+" ] Sample Collection Done For Patient "+labtestBean.getPatient_name();
									auditLogEntryForLogic(labtestBean, request, "INSERT", log_remarks, registrationBean.getOp_number(), patientBean.getConsult_id(), "test_details");
								}
							}
						}

						if(method.equals("newRadTestEntry") || method.equals("radServiceDone"))
						{
							/*registrationBean.setQuery("update consult_labtest set samp_collect='Y' where consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getSerial_id()+"'");
							registrationDao.deleteQuery(registrationBean);*/
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("consult_labtest");
							parameterBean.setField_name("samp_collect='Y'");
							parameterBean.setField_name1("consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getSerial_id()+"'");
							commonDao.updateQueryInCommon(parameterBean);
							parameterBean=null;

							/*registrationBean.setQuery("update test_details set forward_toauth='Y',accession='Y',accession_by='"+userBean.getUser_id()+"', accession_date=sysdate() where lab_idno='"+lno+"' and test_id='"+setBean.getLabtest_id()+"'");
							registrationDao.deleteQuery(registrationBean);*/

							parameterBean = new ParameterBean();
							parameterBean.setAccession_by(userBean.getUser_id());
							parameterBean.setLab_idno(lno);
							parameterBean.setTest_id(setBean.getLabtest_id());
							commonDao.updateAccessionDetails(parameterBean);
							parameterBean=null;
							
							if(null != setBean.getRequest_id() && !setBean.getRequest_id().equals("")) {
								/*registrationBean.setQuery("update consult_labtest_request set samp_collect='Y' where consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getRequest_id()+"'");
								registrationDao.deleteQuery(registrationBean);*/
								parameterBean = new ParameterBean();
								parameterBean.setTable_name("consult_labtest_request");
								parameterBean.setField_name("samp_collect='Y'");
								parameterBean.setField_name1("consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getRequest_id()+"'");
								commonDao.updateQueryInCommon(parameterBean);
								parameterBean=null;
							}
						}
						else
						{
							/*registrationBean.setQuery("select count(profile_testid) from test_profile_setup where test_id='"+setBean.getLabtest_id()+"' and active_status='Y' and office_id='"+userBean.getOffice_id()+"' and profile_testid not in(select test_id from test_details where consult_id="+setBean.getConsult_id()+")");
							int pending_count = Integer.parseInt(registrationDao.isAlreadyExist(registrationBean));*/

							parameterBean = new ParameterBean();
							parameterBean.setField_name("profile_testid");
							parameterBean.setTable_name("test_profile_setup");
							parameterBean.setField_name1("test_id");
							parameterBean.setField_value1(setBean.getLabtest_id());
							parameterBean.setOffice_id(userBean.getOffice_id());
							parameterBean.setField_name2(" active_status='Y'  and profile_testid not in(select test_id from test_details where consult_id="+setBean.getConsult_id()+")");
							int pending_count = Integer.parseInt(commonDao.getCountofCommon(parameterBean));
							parameterBean=null;
							
							if(pending_count==0){
								/*registrationBean.setQuery("update consult_labtest set samp_collect='Y' where consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getSerial_id()+"'");
								registrationDao.deleteQuery(registrationBean);*/
								
								parameterBean = new ParameterBean();
								parameterBean.setTable_name("consult_labtest");
								parameterBean.setField_name("samp_collect='Y'");
								parameterBean.setField_name1(" consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getSerial_id()+"'");
								commonDao.updateQueryInCommon(parameterBean);
								parameterBean=null;

								if(null != setBean.getRequest_id() && !setBean.getRequest_id().equals("")) {
									/*registrationBean.setQuery("update consult_labtest_request set samp_collect='Y' where consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getRequest_id()+"'");
									registrationDao.deleteQuery(registrationBean);*/
									parameterBean = new ParameterBean();
									parameterBean.setTable_name("consult_labtest");
									parameterBean.setField_name("samp_collect='Y'");
									parameterBean.setField_name1(" consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getRequest_id()+"'");
									commonDao.updateQueryInCommon(parameterBean);
									parameterBean=null;
								}
							}
						}
					}
					else // not profile
					{
						if(send_out==null || send_out.equals("")){
							//registrationBean.setQuery("select sendout_lab from test_setup_office where test_id='"+setBean.getLabtest_id()+"' and office_id='"+userBean.getOffice_id()+"'");
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("test_setup_office");
							parameterBean.setField_name("sendout_lab");
							parameterBean.setField_name1("test_id");
							parameterBean.setField_value1(setBean.getLabtest_id());
							parameterBean.setOffice_id(userBean.getOffice_id());
							parameterBean.setField_name2(null);
							String clinic_id =  commonDao.fetchValueWithSingleParam(parameterBean);
							parameterBean=null;
							if(clinic_id!=null && !clinic_id.equals("") && !clinic_id.equals("0"))
								registrationBean.setSendout_lab(clinic_id);
						}else{
							registrationBean.setSendout_lab(send_out);
						}

						setBean.setOffice_id(userBean.getOffice_id());
						if(setBean.getLab_idno() == null)
						  lno=getBarcodeNo4LabByContainer(consultDate,setBean,userBean,patientBean);
						else
						  lno=setBean.getLab_idno();
						
						parameterBean = new ParameterBean();
						parameterBean.setLab_idno(lno);
						parameterBean.setConsult_id(setBean.getConsult_id());
						parameterBean.setOffice_id(userBean.getOffice_id());
						parameterBean.setTest_id(setBean.getLabtest_id());
						
						if( laboratoryDao.checkDuplicateLabIdno(parameterBean) == null)
						{
							// Different Barcode for same test, same patient, collected same day - START
							if (laboratoryDao.checkDuplicateTestId(parameterBean) != null && status) {

								String consId=setBean.getConsult_id();
								setBean.setConsult_id(null); // for generating new barcode no
								if(setBean.getLab_idno() == null)
									lno=getBarcodeNo4LabByContainer(consultDate,setBean,userBean,patientBean);
								else
									lno=setBean.getLab_idno();
								setBean.setConsult_id(consId); // resetting consult_id
								status = false;
							}
							// Different Barcode for same test, same patient, collected same day - END

							registrationBean.setTestId(setBean.getLabtest_id());
							//registrationBean.setLab_idno(registrationBean.getBarcode_no());
							registrationBean.setLab_idno(lno);
							registrationBean.setEnteredby(userBean.getUser_id());
							registrationBean.setSerial_id(null); // this is the profile test id

							//RegistrationBean labtestBean = registrationDao.getTestDetailsById(registrationBean);
							RegistrationBean labtestBean=null;
							if(labtestBean==null)
							{
								registrationBean.setOffice_id(userBean.getOffice_id());

								/*if(userBean.getLab_status()!=null && !userBean.getLab_status().equals("") && userBean.getLab_status().equals("Y")) {
								String collect_date = laboratoryDao.getCollectDate(registrationBean.getConsult_id());
								if(collect_date!=null && !collect_date.equals("") )
									registrationBean.setSamplCollectDate(collect_date);
							}*/
							
							    if(setBean.getLab_type()!=null && setBean.getLab_type().equals("L")) {
							    	registrationBean.setSamplCollectDate(collectDate+" "+collectHr+":"+collectMn);
							        registrationBean.setSampleReceivedDate(receiveDate+" "+receiveHr+":"+receiveMn);
							    }
									
								else {
									registrationBean.setSamplCollectDate(sdToDB1.format(new Date()));
									registrationBean.setSampleReceivedDate(sdToDB1.format(new Date()));
								}
									
								registrationBean.setEmergency(setBean.getEmergency());
								registrationBean.setContainer_id(setBean.getContainer_id());
								registrationBean.setTest_suffix(setBean.getTest_suffix());
								registrationDao.insertTestDetails(registrationBean);

								String testreportid = registrationDao.getLastInsertTestNumber();

								labtestBean = new RegistrationBean();
								labtestBean.setTestDetailsid(testreportid);
								labtestBean = registrationDao.getTestDetailsById(registrationBean);
								
								if(labtestBean==null)
									labtestBean=registrationBean;

								String log_remarks = "";
								if(method.equals("newRadTestEntry") || method.equals("radServiceDone"))
									log_remarks = "Radiology Test [ "+labtestBean.getTestName()+" ] Done For Patient "+labtestBean.getPatient_name();
								else
									log_remarks = "Laboratory Test [ "+labtestBean.getTestName()+" ] Sample Collection Done For Patient "+labtestBean.getPatient_name();
								auditLogEntryForLogic(labtestBean, request, "INSERT", log_remarks, registrationBean.getOp_number(), patientBean.getConsult_id(), "test_details");

								if(method.equals("newRadTestEntry") || method.equals("radServiceDone"))
								{
									/*registrationBean.setQuery("update consult_labtest set samp_collect='Y' where consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getSerial_id()+"'");
									registrationDao.deleteQuery(registrationBean);*/
									parameterBean = new ParameterBean();
									parameterBean.setTable_name("consult_labtest");
									parameterBean.setField_name("samp_collect='Y'");
									parameterBean.setField_name1(" consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getSerial_id()+"'");
									commonDao.updateQueryInCommon(parameterBean);
									parameterBean =null;
									
									//registrationBean.setQuery("update test_details set forward_toauth='Y',accession='Y',accession_by='"+userBean.getUser_id()+"', accession_date=sysdate() where lab_idno='"+lno+"' and test_id='"+setBean.getLabtest_id()+"'");
									//registrationDao.deleteQuery(registrationBean);
									
									registrationBean.setUser_id(userBean.getUser_id());
									registrationBean.setLab_idno(lno);
									registrationBean.setTest_id(setBean.getLabtest_id());
									laboratoryDao.acknowledgeOfRadiologyTest(registrationBean);
								}
								else
								{
									/*registrationBean.setQuery("update consult_labtest set samp_collect='Y' where consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getSerial_id()+"'");
									registrationDao.deleteQuery(registrationBean);*/
									parameterBean = new ParameterBean();
									parameterBean.setTable_name("consult_labtest");
									parameterBean.setField_name("samp_collect='Y'");
									parameterBean.setField_name1(" consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getSerial_id()+"'");
									commonDao.updateQueryInCommon(parameterBean);
									parameterBean =null;
									
								}

								if(null != setBean.getRequest_id() && !setBean.getRequest_id().equals("")) {
									/*registrationBean.setQuery("update consult_labtest_request set samp_collect='Y' where consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getRequest_id()+"'");
									registrationDao.deleteQuery(registrationBean);*/
									parameterBean = new ParameterBean();
									parameterBean.setTable_name("consult_labtest_request");
									parameterBean.setField_name("samp_collect='Y'");
									parameterBean.setField_name1("consult_id='"+setBean.getConsult_id()+"' and labtest_id='"+setBean.getLabtest_id()+"' and id='"+setBean.getRequest_id()+"'");
									commonDao.updateQueryInCommon(parameterBean);
									parameterBean=null;
									
								}
								/*if(setBean.getTest_template()!=null && !setBean.getTest_template().equals(""))
								{
									registrationBean.setQuery("update test_details set remarks='"+setBean.getTest_template()+"' where test_Detailsid='"+testreportid+"'");
									registrationDao.deleteQuery(registrationBean);
								}*/
								registrationBean.setTestId(setBean.getLabtest_id());
								registrationBean.setActive_status("Y");
								registrationBean.setOffice_id(userBean.getOffice_id());
								List<RegistrationBean> sublist = registrationDao.selectSubsetupItems(registrationBean);
								for(RegistrationBean subTestBean : sublist)
								{
									if(subTestBean.getActive_status().equals("Y"))
									{
										subTestBean.setTestDetailsid(testreportid); 
										subTestBean.setOffice_id(userBean.getOffice_id());
										subTestBean.setOp_number(registrationBean.getOp_number()); 
										subTestBean.setLab_idno(lno);
										subTestBean.setAge_lower(""+age);
										subTestBean.setSex(sex);
										if(subTestBean.getIs_bold()==null)
											subTestBean.setIs_bold("N");
										subTestBean.setOffice_id(userBean.getOffice_id());
										registrationDao.insertTestResultsdetails(subTestBean);
									}
								}
							}
						}
					}
				}
			}

			//registrationBean.setQuery("select count(labtest_id) from consult_labtest where samp_collect='N' and consult_id='"+request.getParameter("consult_id")+"'");
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("consult_labtest");
			parameterBean.setField_name1("consult_id");
			parameterBean.setField_value1(request.getParameter("consult_id"));
			parameterBean.setOffice_id(null);
			parameterBean.setField_name2("samp_collect='N'");
			String samp_count =commonDao.fetchCountCommonQuery(parameterBean);
			parameterBean=null;
			if(samp_count==null || (samp_count!=null && samp_count.equals("0"))){
				/*registrationBean.setQuery("update doctor_consult set lab_status='Y' where consult_id='"+request.getParameter("consult_id")+"'");
				registrationDao.deleteQuery(registrationBean);*/
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("doctor_consult");
				parameterBean.setField_name("lab_status='Y'");
				parameterBean.setField_name1(" consult_id='"+request.getParameter("consult_id")+"'");
				commonDao.updateQueryInCommon(parameterBean);
				parameterBean=null;
			}
			eclinicDaoManager.commitTransaction();

			if(patientBean!=null)
			{
				if(patientBean.getLab_idno()==null)
				{
					patientBean.setLab_idno(lno);
				}
			}

			//return patientBean;
		}catch (Exception e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
				e2.printStackTrace();
			}
			throw ((Exception) e.fillInStackTrace());
		}
	}
	/**
	 * Purpose : -> For generating and updating Barcode no for Consultation
	 * @param patientBean
	 * @param userBean
	 * @return RegistrationBean
	 * @throws Exception
	 * @author indrajith
	 */
	private RegistrationBean generateAndUpdateBarcodeNo(RegistrationBean patientBean,UserBean userBean) throws Exception {
		try {
			ParameterBean parameterBean = new ParameterBean();
			StringBuilder barcode = new StringBuilder();
			LocalDate date = LocalDate.now();
			barcode.append(userBean.getLab_id_prefix());
			barcode.append(date.getYear()%100);
			barcode.append(new DecimalFormat("000").format(date.getDayOfYear()));
			barcode.append("%");
			parameterBean.setOffice_id(userBean.getOffice_id());
			parameterBean.setField_name(barcode.toString());
			Long barcodeNo = common.fetchMaxBarcodeNo(parameterBean,false);
			barcodeNo = (barcodeNo == null) ? Long.valueOf(barcode.toString().replace("%", "001")):(barcodeNo+1l);
			patientBean.setBarcode_no(barcodeNo+"");
			common.updateBarcodeNoInDoctorConsult(patientBean);
		} catch (Exception e) {
			throw new Exception("Error while generating and updating barcode no for consult_id : "+patientBean.getConsult_id());
		}
		return patientBean;
	}

	/***Incremental id for Saba**/
	public String getIncId() throws DaoException 
	{

		//SimpleDateFormat sdFromDB = new SimpleDateFormat("dd-MM-yyyy");
		SimpleDateFormat sdToDB = new SimpleDateFormat("yyyy-MM-dd");
		String currentDt= sdToDB.format(new Date());
		String [] dateParts = currentDt.split("-");
		String day = dateParts[2];
		
		//RegistrationBean regBean = new RegistrationBean();
		int incId = 1;
		if(day.equals("1"))
		{
			/*regBean.setQuery( "select sch_number from test_details where date(sample_collect_date)='"+currentDt+"'");
			String idExist = isAlreadyExist(regBean);*/
			
			parameterBean = new ParameterBean();
			parameterBean.setField_value1(currentDt);
			String idExist = common.fetchSCHNumber(parameterBean);
			parameterBean=null;
			if(idExist!=null)
				incId = incId+1;
			else
				incId = 1;
		}else {
			/*regBean.setQuery( "select max(sch_number) from test_details where sch_number is not null and sch_number<>''");
			String schid = isAlreadyExist(regBean);*/
			
			parameterBean = new ParameterBean();
			parameterBean.setField_name("sch_number");
			parameterBean.setTable_name("test_details");
			parameterBean.setField_name1("sch_number is not null and sch_number<>''");
			String schid = common.getCommonMaxValue(parameterBean);
			parameterBean=null;
			
			if(schid==null || schid.equals(""))
				incId = 1;
			else 
				incId = Integer.parseInt(schid)+1;	
		}
		
		String incrId = String.valueOf(incId);
		return incrId;
	
	}
	
	/***Incremental id for Saba**/
	
	
	
	/**
	 * Bar code No is based on Consult_id, Date, Container.
	 * Bar code No is 10 digit -> 
	 * First 2 Digits -> YY
	 * Next 3 Digits -> Date Difference of current date from 01-01-CurrentYr
	 * Next 2 digits -> Container ID from container_setup
	 * Last 3 digits -> Serial No starting from 1 incremented based on container id and current date
	 * @param consultDate
	 * @param setupBean
	 * @return
	 * @throws DaoException 
	 */
	public synchronized String getBarcodeNo4LabByContainer(String consultDate, SetupBean setupBean,UserBean userBean,RegistrationBean patientBean) throws DaoException 
	{
		//SimpleDateFormat sdFromDB = new SimpleDateFormat("dd-MM-yyyy");
		//SimpleDateFormat sdToDB = new SimpleDateFormat("yyyy-MM-dd");
		String barcode = "";
		Date currentDt= new Date();
		
		DecimalFormat labSlNo = new DecimalFormat("000");
		DecimalFormat twoDigit = new DecimalFormat("00");

		SimpleDateFormat sdf3 = new SimpleDateFormat("yyyy");
		SimpleDateFormat sdf4 = new SimpleDateFormat("yy");
		//SimpleDateFormat sdf = new SimpleDateFormat("dMMyy");
		//SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
		
		String dateString = sdf3.format(currentDt)+"-01-01";
        LocalDate startDate = LocalDate.parse(dateString);
        LocalDate endtDate = LocalDate.now();
        Long range = ChronoUnit.DAYS.between(startDate, endtDate) + 1;
        Integer totDays = range.intValue();
        
      /****************** Lab Idno based on container *********************************************************/
		if(userBean.getLab_idno_container_wise() != null && userBean.getLab_idno_container_wise().equals("Y")) {
			
			// null check done for Different Barcode for same test, same patient, collected same day
			if(null != setupBean.getConsult_id() && !setupBean.getConsult_id().equals("")) {
				barcode = setupDao.getLabIdNoByContainer(setupBean);
			}

			String consultId = setupBean.getConsult_id();
			if (null == barcode || barcode.equals("")) {
				setupBean.setConsult_id(null);
				barcode = setupDao.getLabIdNoByContainer(setupBean);

				if (barcode == null) {
					barcode = "1";
				} else {
					barcode = barcode.substring(9);
					barcode = "" + (Integer.parseInt(barcode) + 1);
				}
				
				String prefix = userBean.getOffice_id();
				if(userBean.getLab_id_prefix()!=null && !userBean.getLab_id_prefix().equals(""))
					prefix = userBean.getLab_id_prefix();
				barcode = prefix + sdf4.format(new Date()) + labSlNo.format(totDays) + twoDigit.format(Integer.parseInt(setupBean.getContainer_id())) +  labSlNo.format(Integer.parseInt(barcode));
				setupBean.setConsult_id(consultId);
			}
		}
	     /****************** Lab Idno Container Suffix **************************************************************/
		else {
			
				barcode =   patientBean.getBarcode_no() + twoDigit.format(Integer.parseInt(setupBean.getContainer_id()));
				
			}
			
		return barcode;
	}
	public synchronized String checkEjadaTestResultsAndUpdateStatus(RegistrationBean registrationBean,String no_result,HttpServletRequest request,UserBean userBean,String method,String sms_template) throws Exception
	{
		try{        	
			eclinicDaoManager.startTransaction();

			boolean forward_status = true;
			boolean closed_status = false;
			if(method.equals("authentAll")){
				updateTestResultEntriesFromEquip(registrationBean, request);
				if(registrationBean.getForward_toauth()!=null && registrationBean.getForward_toauth().equals("Y"))
					forward_status = true;
				else
					forward_status = false;
			}
			if(registrationBean.getClosed_status()!=null && registrationBean.getClosed_status().equals("Y"))
				closed_status = true;

			boolean result_status = true;
			String id = "";
			if (registrationBean.getIcd_code() != null && registrationBean.getIcd_code() != "") {
				//registrationBean.setQuery("select id from test_setup_ejada where cpt_code='" + registrationBean.getIcd_code() + "'");
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("test_setup_ejada");
				parameterBean.setField_name("id");
				parameterBean.setField_name1("cpt_code");
				parameterBean.setField_value1(registrationBean.getIcd_code());
				parameterBean.setOffice_id(null);
				parameterBean.setField_name2(null);
				id = commonDao.fetchValueWithSingleParam(parameterBean);
				parameterBean=null;

				if (id != null && id != "") 
				{
					List<RegistrationBean> paramList = registrationDao.getTestResultForReport(registrationBean);
					if(paramList!=null && paramList.size()>0){
						for (RegistrationBean testResultBean : paramList) {
							if(testResultBean.getTest_abbr()!=null && !testResultBean.getTest_abbr().equals(""))
							{
								if(testResultBean.getTestResult()!=null && !testResultBean.getTestResult().equals(""))
									result_status = true;
								else{
									result_status = false;
									if(no_result.equals(""))
										no_result = "Results Required For :\n "+testResultBean.getCategoryName()+" [ "+testResultBean.getTestName()+" ]";
									else
										no_result += " \n "+testResultBean.getCategoryName()+" [ "+testResultBean.getTestName()+" ]";
								}
							}
						}
					}
					
					if(result_status){
						/*registrationBean.setQuery("update consult_labtest set ejada_status='Y' where consult_id='" + registrationBean.getConsult_id()
								+ "' and labtest_id='" + registrationBean.getTestId() + "'");
						registrationDao.deleteQuery(registrationBean);*/
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("consult_labtest");
						parameterBean.setField_name("ejada_status='Y'");
						parameterBean.setField_name1(" consult_id='" + registrationBean.getConsult_id()+"' and labtest_id='" + registrationBean.getTestId() + "'");
						commonDao.updateQueryInCommon(parameterBean);
						parameterBean=null;
					}
				}
			}

			if(result_status){
				if (forward_status && !closed_status) {
					
						/*registrationBean.setQuery("update test_details set verified_by='" + userBean.getUser_id()
								+ "',closed_status='Y',forward_toauth='Y',verified_date=sysdate() where test_Detailsid=" + registrationBean.getTestDetailsid());*/
						
						if(userBean.getAuto_dispatch() != null  &&  userBean.getAuto_dispatch().equals("") && userBean.getAuto_dispatch().equals("Y") ) {
							parameterBean = new ParameterBean();
							parameterBean.setVerified_by(userBean.getUser_id());
							//parameterBean.setEnteredby(userBean.getUser_id());
							parameterBean.setTest_Detailsid(registrationBean.getTestDetailsid());
							commonDao.updateTestVerifiedDetails(parameterBean);
							parameterBean=null;
							
							RegistrationBean regBean = new RegistrationBean();
							regBean=registrationDao.getTestDetailsById(registrationBean);
							auditLogEntryForLogic(regBean, request, "Update", "Lab Test Authenticated(with auto dispatch)["+regBean.getTestName()+"]", registrationBean.getOp_number(), registrationBean.getConsult_id(), "test_details");
							
							parameterBean = new ParameterBean();
							parameterBean.setTable_name("test_details");
							parameterBean.setField_name(" dispatch_status='Y'");
							parameterBean.setField_name1(" test_Detailsid='"+ registrationBean.getTestDetailsid() + "' ");
							commonDao.updateQueryInCommon(parameterBean);
							parameterBean=null;
							
								
								RegistrationBean dispatchBean = new RegistrationBean();
								dispatchBean.setOp_number(registrationBean.getOp_number());
								dispatchBean.setConsult_id(registrationBean.getConsult_id());
								dispatchBean.setPatient_name(registrationBean.getPatient_name());
								dispatchBean.setLab_idno(registrationBean.getLab_idno());
								dispatchBean.setTest_id(registrationBean.getTestId());
								dispatchBean.setDispatch_by(userBean.getUser_id());
								registrationDao.insertReportDispatchDetails(dispatchBean);
							
						}
						else {
							/*parameterBean.setField_name(" verified_by='" + userBean.getUser_id() + "',closed_status='Y',forward_toauth='Y',verified_date=sysdate() ");
							parameterBean.setField_name1(" test_Detailsid='" + registrationBean.getTestDetailsid()+"'");*/
							parameterBean = new ParameterBean();
							parameterBean.setVerified_by(userBean.getUser_id());
							//parameterBean.setEnteredby(userBean.getUser_id());
							parameterBean.setTest_Detailsid(registrationBean.getTestDetailsid());
							commonDao.updateTestVerifiedDetails(parameterBean);
							parameterBean=null;
							
							RegistrationBean regBean = new RegistrationBean();
							regBean=registrationDao.getTestDetailsById(registrationBean);
							auditLogEntryForLogic(regBean, request, "Update", "Lab Test Authenticated ["+regBean.getTestName()+"]", registrationBean.getOp_number(), registrationBean.getConsult_id(), "test_details");
						}
						
					/*registrationDao.deleteQuery(registrationBean);*/
					//commonDao.updateQueryInCommon(parameterBean);
					registrationBean.setClosed_status("Y");

					

					RegistrationBean regBean = new RegistrationBean();
					regBean.setAlert_type("TEST_RESULT");
					regBean.setAlert_description("TestResult From Lab");
					regBean.setAlert_status("N");
					regBean.setUser_id(registrationBean.getDoctors_id());
					regBean.setDtconvert("dt");
					regBean.setOffice_id(userBean.getOffice_id());
					regBean.setConsult_id(registrationBean.getConsult_id());
					regBean.setOp_number(registrationBean.getOp_number());
					String alert_param = registrationBean.getTestDetailsid() + "~" + registrationBean.getLab_idno() + "~" + registrationBean.getTestId();
					regBean.setAlert_parameter(alert_param);
					registrationDao.insertAlertDetails(regBean);

					//regBean.setQuery("select enteredby from consult_labtest where consult_id='" + registrationBean.getConsult_id() + "' and labtest_id='" + registrationBean.getTestId() + "'");
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("consult_labtest");
					parameterBean.setField_name("enteredby");
					parameterBean.setField_name1("consult_id");
					parameterBean.setField_value1(registrationBean.getConsult_id());
					parameterBean.setOffice_id(null);
					parameterBean.setField_name2("labtest_id='" + registrationBean.getTestId() + "'");
					String user_id = commonDao.fetchValueWithSingleParam(parameterBean);
					parameterBean=null;
					if (user_id != null && !user_id.equals(registrationBean.getDoctors_id())) {
						regBean.setUser_id(user_id);
						registrationDao.insertAlertDetails(regBean);
					}
					
				if(userBean.getAuto_dispatch() != null  &&  userBean.getAuto_dispatch().equals("Y") ) {

					String referedConsultId = "";
					String referedLabIdno = "";
					//String labIdNo=registrationBean.getLab_idno();
					ArrayList orglist=(ArrayList)laboratoryDao.getLabTestOrganism(registrationBean);
					
					if(registrationBean.getConsult_id()!=null){
						/*registrationBean.setQuery("SELECT if(refered_consult_id is null,'',refered_consult_id) FROM doctor_consult where consult_id='"+registrationBean.getConsult_id() + "'");
						referedConsultId = registrationDao.isAlreadyExist(registrationBean);*/
						parameterBean = new ParameterBean();
						parameterBean.setField_name("refered_consult_id");
						parameterBean.setTable_name("doctor_consult");
						parameterBean.setField_name1("consult_id");
						parameterBean.setField_value1(registrationBean.getConsult_id());
						parameterBean.setField_name2(" refer_consult_status='Y'");
						referedConsultId =commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
					}
					if (referedConsultId != null && !referedConsultId.equals("null") && referedConsultId.length() > 0) {
						
						//registrationBean.setQuery("SELECT distinct lab_idno FROM test_details where consult_id='"+referedConsultId+"' and test_id='"+registrationBean.getTestId()+"'");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("test_details");
						parameterBean.setField_name("distinct lab_idno");
						parameterBean.setField_name1("consult_id");
						parameterBean.setField_value1(referedConsultId);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2("test_id='"+registrationBean.getTestId()+"'");
						referedLabIdno = commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;

					if(referedLabIdno !=null && !referedLabIdno.equals("")) {
						
						registrationBean.setDispatch_status(null);
						RegistrationBean testBean = registrationDao.getTestDetailsById(registrationBean);
						//ArrayList samplelist = (ArrayList) getTestResultForReport(registrationBean);
						List<RegistrationBean> samplelist = registrationDao.getTestResultForReport(registrationBean);
						

						registrationBean.setLab_idno(referedLabIdno);
						updateTestResultEntriesFromEquip(registrationBean, request);

						registrationBean.setTestDetailsid("");
						RegistrationBean refTestBean = registrationDao.getTestDetailsById(registrationBean);
						//ArrayList referedSamplelist = (ArrayList) getTestResultForReport(registrationBean);
						
						//registrationBean.setQuery("SELECT office_id FROM doctor_consult where consult_id='"+referedConsultId+"' ");
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("doctor_consult");
						parameterBean.setField_name("office_id");
						parameterBean.setField_name1("consult_id");
						parameterBean.setField_value1(referedConsultId);
						parameterBean.setOffice_id(null);
						parameterBean.setField_name2(null);
						String office_id = commonDao.fetchValueWithSingleParam(parameterBean);
						parameterBean=null;
						registrationBean.setOffice_id(office_id);
						//List<RegistrationBean> referedSamplelist = registrationDao.getTestResultForReport(registrationBean);
						
						
						
						String fileno = null;
                        if (null != orglist && orglist.size() > 0) {
                        	
                        	/*registrationBean.setQuery("delete from test_organism where lab_idno='"+referedLabIdno+"'");				  
                        	registrationDao.deleteQuery(registrationBean);*/ 
                        	parameterBean = new ParameterBean();
                			parameterBean.setTable_name("test_organism");
                			parameterBean.setField_name1("lab_idno='"+referedLabIdno+"'");
                        	commonDao.deleteQueryInCommon(parameterBean);
                        	parameterBean=null;
            				/*registrationBean.setQuery("delete from test_sensitivity where lab_idno='"+referedLabIdno+"'");		
            				registrationDao.deleteQuery(registrationBean);*/ 
                        	parameterBean = new ParameterBean();
                			parameterBean.setTable_name("test_sensitivity");
                			parameterBean.setField_name1(" lab_idno='"+referedLabIdno+"'");
                        	commonDao.deleteQueryInCommon(parameterBean);
                        	parameterBean=null;
							
            				SetupBean orgBean= new SetupBean();
							RegistrationBean orgBean1= new RegistrationBean();
							Iterator orgitr=orglist.iterator();
							while(orgitr.hasNext())
							{
								orgBean=(SetupBean)orgitr.next();
								orgBean1.setTestId(orgBean.getTest_id());
								orgBean1.setLab_idno(referedLabIdno);
								orgBean1.setOrganism_id(orgBean.getOrganism_id());
								laboratoryDao.insertTestOrganism(orgBean1);
								//orgBean1.setQuery("SELECT max(id) FROM test_organism");
								parameterBean = new ParameterBean();
								parameterBean.setTable_name("test_organism");
								fileno=commonDao.fetchMaxIdfromTable(parameterBean);
								parameterBean=null;
								
								orgBean1.setLab_idno(null);
								orgBean1.setTest_organism_id(orgBean.getSerial_id());
								ArrayList senlist=(ArrayList)laboratoryDao.getLabTestSensitivity(orgBean1);
								if (null != senlist && senlist.size() > 0) {
									SetupBean senBean=null;
									RegistrationBean senRegBean= new RegistrationBean();
									Iterator senitr=senlist.iterator();
									while(senitr.hasNext())
									{
										senBean=(SetupBean)senitr.next();
										senRegBean.setTest_organism_id(fileno);
										senRegBean.setLab_idno(referedLabIdno);
										senRegBean.setAntibiotic_id(senBean.getAntibiotic_id());
										senRegBean.setSensitivity(senBean.getSensitivity());
										laboratoryDao.insertTestAntibiotic(senRegBean);
									}
								}
							}
								
						}

						/*registrationBean.setQuery("update test_details set closed_status='Y',verified_date=sysdate(), verified_by='"
								+ testBean.getVerified_by() + "' , forward_toauth='Y', remarks='" + testBean.getRemarks() + "' where test_Detailsid='"
								+ refTestBean.getTestDetailsid() + "' ");
						registrationDao.deleteQuery(registrationBean);*/
						
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("test_details");
						//parameterBean.setField_name(" closed_status='Y',verified_date=sysdate(), verified_by='"+ testBean.getVerified_by() + "' , forward_toauth='Y', remarks='" + testBean.getRemarks() + "'");
						parameterBean.setField_name(" forward_toauth='Y', remarks='" + testBean.getRemarks() + "'");
						parameterBean.setField_name1(" test_Detailsid='"+ refTestBean.getTestDetailsid() + "' ");
						commonDao.updateQueryInCommon(parameterBean);
						parameterBean=null;

						Iterator itr = samplelist.iterator();
						//Iterator ritr = referedSamplelist.iterator();
						RegistrationBean testResultBean = null;
						//RegistrationBean referedTestResultBean = null;
						while (itr.hasNext()) {
							testResultBean = (RegistrationBean) itr.next();
							testResultBean.setLab_idno(referedLabIdno);
							testResultBean.setTest_Result(testResultBean.getTestResult());
							laboratoryDao.updateHl7TestResults(testResultBean);
						}
					  }
					}
				  }
				}
			}else{
				registrationBean.setClosed_status("N");					
			}

			eclinicDaoManager.commitTransaction();
			
			if (null != registrationBean.getClosed_status() && registrationBean.getClosed_status().equals("Y")) {
				if (null != userBean.getClinical_pathway() && userBean.getClinical_pathway().equals("Y")) {
					/*QueryBean queryBean = new QueryBean();
					queryBean.setQuery_string(" SELECT lab_type FROM test_setup WHERE test_id='" + registrationBean.getTestId() + "'");
					String labType = executeQueryString(queryBean);*/
					
					
					String labType =common.fetchValueWithSingleParam("test_setup", "lab_type", "test_id", registrationBean.getTestId(), null, null);
					if (null != labType && !labType.equals("")) {
						if(labType.equals("L")){
							
							String paramIds="";
							List<RegistrationBean> paramList = getTestResultForReport(registrationBean);
							if(paramList!=null && paramList.size()>0){
								for (RegistrationBean testResultBean : paramList) {
										if(testResultBean.getTestResult()!=null && !testResultBean.getTestResult().equals("")) {
											if(!paramIds.equals(""))
												paramIds = paramIds+",";
											
											paramIds=paramIds+testResultBean.getParameter_id();
										}
									}
								}
							
							pathwayLogic.executeClinicalPathwayFlow(registrationBean.getConsult_id(), userBean, "L", request,paramIds);
						} else {
							pathwayLogic.executeClinicalPathwayFlow(registrationBean.getConsult_id(), userBean, "X", request, registrationBean.getTestId());
						}
					}
				}
			}

			return no_result;
		}catch (Exception e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((Exception) e.fillInStackTrace());
		}
	}
	/**
	 * Deletes Unused test_result entries on updating results from eqp_results
	 * 
	 * @param registrationBean
	 * @throws DaoException 
	 */
	public void updateTestResultEntriesFromEquip(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException 
	{
		List<RegistrationBean> allTestsOfPatient = null;
		if (null == registrationBean.getTestId() || registrationBean.getTestId().equals("")) {
			/*Called from Registration Action - editLTRAll - To update and fetch all Tests of Patient. So testID =""; */
			registrationBean.setTestId(null);
		}

		allTestsOfPatient = registrationDao.getTestIdsFromResult(registrationBean); // fetches testIds whose result_saved=N

		// If test_results.result_saved=N, executes the below code...
		if (null != allTestsOfPatient && allTestsOfPatient.size() > 0) {
			String eqpIds = "";
			String eqpTestIds = "";

			/*registrationBean.setQuery("SELECT id FROM lab_machines WHERE machine_name='NA' or machine_name like '%Not Applicable%'");
			String eqpIdOfNA = registrationDao.isAlreadyExist(registrationBean);*/
			
			parameterBean = new ParameterBean();
			parameterBean.setField_name("id");
			parameterBean.setTable_name("lab_machines");
			parameterBean.setField_name2(" machine_name='NA' or machine_name like '%Not Applicable%'");
			String eqpIdOfNA =commonDao.fetchValueWithSingleParam(parameterBean);
			parameterBean=null;
			
			if(null != eqpIdOfNA && !eqpIdOfNA.equals("")) {
				eqpIds = eqpIdOfNA;
			}

			/*
			 * Fetch Equipment IDs and EqpTestIds for the Test Result based
			 * on lab_idno
			 */
			List<SetupBean> testEqpDtls = setupDao.getTestEqpResultDetails(registrationBean);
			if (null != testEqpDtls && testEqpDtls.size() > 0) {

				/* update test_results with value from equipment. */
				/*registrationBean.setQuery("update test_results,eqp_results " 
						+ "set test_results.test_result=eqp_results.eqpresults,  test_results.result_saved='Y' where "
						+ "test_results.eqp_id=eqp_results.EqpId  and test_results.eqp_testid=eqp_results.EqpTestId and " 
						+ "test_results.lab_idno=eqp_results.BarcodeNo and "
						+ "test_results.result_saved='N' and " + "test_results.lab_idno='" + registrationBean.getLab_idno() + "'");
				registrationDao.deleteQuery(registrationBean);*/
				
				parameterBean=new ParameterBean();
				parameterBean.setLab_idno(registrationBean.getLab_idno());
				commonDao.updateTestResultswithEqp(parameterBean);
				
				/*if(null != eqpIdOfNA && !eqpIdOfNA.equals("")) {
							registrationBean.setQuery("update test_results set test_results.result_saved='Y' where " + "test_results.result_saved='N' and "
									+ "test_results.lab_idno='" + registrationBean.getLab_idno() + "' and test_results.eqp_id='" + eqpIdOfNA + "'");
							admin.deleteQuery(registrationBean);
						}*/

				for (SetupBean eqpBean : testEqpDtls) {
					if (null != eqpBean.getEqp_id() && !eqpBean.getEqp_id().equals("")) {
						if (eqpIds.equals("")) {
							eqpIds = eqpBean.getEqp_id();
						} else {
							eqpIds = eqpIds + "," + eqpBean.getEqp_id();
						}
					}
					if (null != eqpBean.getEqp_testid() && !eqpBean.getEqp_testid().equals("")) {
						if (eqpTestIds.equals("")) {
							eqpTestIds = "'"+eqpBean.getEqp_testid()+"'";
						} else {
							eqpTestIds = eqpTestIds + "," + "'"+eqpBean.getEqp_testid()+"'";
						}
					}
				}
				/*
				 * Iterate the selected list of Tests. If profile, then
				 * fetch all the tests in that profile.Otherwise testId is
				 * present. Then, delete unused test_result entries based on
				 * testIds and EqpIds.
				 */
				/*String testIds = "";
				for (RegistrationBean patientTestBean : allTestsOfPatient) {
					if (!eqpIds.equals("") && !eqpTestIds.equals("")) {
						patientTestBean.setEqp_id(eqpIds);
						patientTestBean.setEqp_testid(eqpTestIds);
						testIds = patientTestBean.getTestId();

						if (null != testIds && !testIds.equals("")) {
							patientTestBean.setTestId(testIds);
							patientTestBean.setLab_idno(registrationBean.getLab_idno());
							registrationDao.deleteUnusedTestResultEntries(patientTestBean);
						}
					}
				}*/
			}
		}
	}

	/** Dar Afia changes START **/
	public List<SetupBean> getAllInsurares4ClaimCombined(SetupBean setupBean) throws DaoException {
		List<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = insuranceDao.getAllInsurares4ClaimCombined(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<RegistrationBean> getAllListOfClaims4ReportCombined(SetupBean setupBean) throws DaoException {
		List<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = insuranceDao.getAllListOfClaims4ReportCombined(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSensitivity(SetupBean setupBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllSensitivity(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertsensitivity(SetupBean setupBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertsensitivity(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added Lab Machine From Setup - " + setupBean.getLabunit(), null, null, "find_sourcedet");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updatesensitivity(SetupBean setupBean, HttpServletRequest request) throws DaoException {

		try {
			SetupBean oldBean = getLabMachineById(setupBean);

			eclinicDaoManager.startTransaction();
			laboratoryDao.updatesensitivity(setupBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "UPDATE", "Updated Lab Machine From Setup - " + oldBean.getLabunit(), null, null, "lab_machines");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deletesensitivity(SetupBean setupBean, HttpServletRequest request) throws DaoException {
		try {
			SetupBean oldBean = getLabMachineById(setupBean);

			eclinicDaoManager.startTransaction();
			laboratoryDao.deletesensitivity(setupBean);
			eclinicDaoManager.commitTransaction();

			if (null != oldBean)
				auditLogEntry(oldBean, request, "DELETE", "Deleted labmachines From Setup - " + oldBean.getMachine_name(), null, null, "lab_machines");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public ArrayList getAllListOfClaimsByInsurarSub(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) insuranceDao.getAllListOfClaimsByInsurarSub(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getFileTrackingDetails(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) reportsDao.getFileTrackingDetails(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<SetupBean> getAllInsuranceProviders4Report(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) insuranceDao.getAllInsuranceProviders4Report(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getPatientEncounterType(SetupBean setupBean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) reportsDao.getPatientEncounterType(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<ReportBean> getAllListOfInvCashInsurance(SetupBean setupBean) throws DaoException {
		ArrayList<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<ReportBean>) reportsDao.getAllListOfInvCashInsurance(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/** Darafia changes - END **/
	public void insertTestOrganism(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertTestOrganism(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(registrationBean, request, "INSERT", "Added Test Organism For Lab ID No : "+registrationBean.getLab_idno(), registrationBean.getOp_number(),registrationBean.getConsult_id(),"test_organism");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public ArrayList getAllOrganisms(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)laboratoryDao.getAllOrganisms(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getLabTestOrganism(RegistrationBean registrationBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)laboratoryDao.getLabTestOrganism(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) 
		{
			try{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) {
			}throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getOrganismNames(RegistrationBean regiBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)laboratoryDao.getOrganismNames(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) 
		{
			try{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) {
			}throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getAntibioAndOrganisms(RegistrationBean regiBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)laboratoryDao.getAntibioAndOrganisms(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) 
		{
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<RegistrationBean> getAllAntiMicobialResistanceSurveillance(RegistrationBean registrationBean) throws DaoException {

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllAntiMicobialResistanceSurveillance(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List getAllTestofPatientReferral(RegistrationBean registrationBean) throws DaoException 
	{

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllTestofPatientReferral(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	
	public List getAllTestofPatientReferralAccecpted(RegistrationBean registrationBean) throws DaoException 
	{

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllTestofPatientReferralAccecpted(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getHisPatientDetails(RegistrationBean rgistrationBean) throws DaoException 
	{

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getHisPatientDetails(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public RegistrationBean getAllSickLeaveDetails(RegistrationBean rgistrationBean) throws DaoException 
	{
		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getAllSickLeaveDetails(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List getAllSickLeaveDetailsList(RegistrationBean rgistrationBean) throws DaoException 
	{
		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getAllSickLeaveDetailsList(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void insertLeaveCertificatedetails(RegistrationBean registrationBean, HttpServletRequest request)throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			consultationDao.insertLeaveCertificatedetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public SetupBean getXMLFileForClaim(SetupBean setupBean) throws DaoException 
	{
		SetupBean us = null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			us=setupDao.getXMLFileForClaim(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<SetupBean> getAllOrganism() throws DaoException 
	{
		List<SetupBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllOrganism();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public SetupBean getOrganismDetailsById(String categoryId) throws DaoException {

		SetupBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getOrganismDetailsById(categoryId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public String getOrganismNameifExists(String name) throws DaoException 
	{
		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getOrganismNameifExists(name);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void insertTestOrganisms(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertTestOrganisms(setupBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(setupBean, request, "INSERT", "Added a Test Organism : "+setupBean.getOrganism_name(), null, null, "test_organism_setup");
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 
	public void updateOrganism(SetupBean setupBean, HttpServletRequest request) throws DaoException 
	{
		try {        	
			SetupBean oldBean = getOrganismDetailsById(setupBean.getOrganism_id());

			eclinicDaoManager.startTransaction();
			laboratoryDao.updateOrganism(setupBean);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean) {
				auditLogEntry(oldBean, request, "UPDATE", "Edited & Updated a Test Organism : "+oldBean.getOrganism_name(), null, null, "test_organism_setup");
			}
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	} 
	public void activateOrganism(String id, HttpServletRequest request) throws DaoException 
	{
		try 
		{        	
			SetupBean oldBean = getOrganismDetailsById(id);

			eclinicDaoManager.startTransaction();
			laboratoryDao.activateOrganism(id);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Deactivated Test Organism : " + oldBean.getOrganism_name(), null, null, "test_organism_setup");

		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deactivateOrganism(String id, HttpServletRequest request) throws DaoException 
	{
		try {        
			SetupBean oldBean = getOrganismDetailsById(id);

			eclinicDaoManager.startTransaction();
			laboratoryDao.deactivateOrganism(id);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Activated Test Organism : "+oldBean.getOrganism_name() , null, null, "test_organism_setup");
		}catch (DaoException e) {
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deleteOrganism(String organism_id, HttpServletRequest request)throws DaoException 
	{
		try {
			SetupBean oldBean = getOrganismDetailsById(organism_id);

			eclinicDaoManager.startTransaction();
			laboratoryDao.deleteOrganism(organism_id);
			eclinicDaoManager.commitTransaction();

			if(null != oldBean) {
				auditLogEntry(oldBean, request, "DELETE", "Deleted a Test Organism : "+oldBean.getOrganism_name(), null, null, "test_organism_setup");
			}
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<SetupBean> getAllDoctorsAppointAssigned(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllDoctorsAppointAssigned(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertDoctorsAppointAssigned(SetupBean setbean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertDoctorsAppointAssigned(setbean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<SetupBean> getAllEncounterDiagnosis(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllEncounterDiagnosis(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getAllEncounterLabTestRequested(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllEncounterLabTestRequested(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getAllEncounterLabTestsBilled(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllEncounterLabTestsBilled(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getAllEncounterProcedureRequested(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllEncounterProcedureRequested(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getAllEncounterProcedureBilled(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllEncounterProcedureBilled(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getAllEncounterMedications(SetupBean setupBean) throws DaoException 
	{
		ArrayList<RegistrationBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)setupDao.getAllEncounterMedications(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<DocumentDetailBean> getAllEncounterAttachments(SetupBean setupBean) throws DaoException 
	{
		ArrayList<DocumentDetailBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<DocumentDetailBean>)setupDao.getAllEncounterAttachments(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<ReportBean> getAllEncounterStatusDetails(ReportBean reportbean) throws DaoException 
	{
		List<ReportBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = reportsDao.getAllEncounterStatusDetails(reportbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getAllReopenRequestDetails(RegistrationBean registrationBean) throws DaoException {
		List<RegistrationBean> reopenList=null;
		try {
			eclinicDaoManager.startTransaction();
			reopenList = consultationDao.getAllReopenRequestDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return reopenList;
	}
	public List<RegistrationBean> getAllEncountersList(RegistrationBean registrationBean) throws DaoException {

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllEncountersList(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<SetupBean> getSeviceInsurancePrice(SetupBean setupBean)throws DaoException{
		List<SetupBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getSeviceInsurancePrice(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<SetupBean> getSeviceInsuranceNetPrice(SetupBean setupBean)throws DaoException{
		List<SetupBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getSeviceInsuranceNetPrice(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void updateInsurancePriceForProcedures(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsurancePriceForProcedures(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateInsurancePriceForLabtest(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsurancePriceForLabtest(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateInsurancePriceForDoctor(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsurancePriceForDoctor(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateInsuranceDiscPercentForProcedures(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsuranceDiscPercentForProcedures(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateInsuranceDiscPercentForLabtests(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsuranceDiscPercentForLabtests(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateInsuranceDiscountForProcedures(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsuranceDiscountForProcedures(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateInsuranceDiscountForLabtests(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsuranceDiscountForLabtests(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateInsurancePreAppStatusForProcedures(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsurancePreAppStatusForProcedures(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateInsurancePreAppStatusForLabtests(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsurancePreAppStatusForLabtests(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateInsuranceFactorForProcedures(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsuranceFactorForProcedures(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateInsuranceFactorForLabtests(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsuranceFactorForLabtests(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void deleteInsurancePrice(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.deleteInsurancePrice(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateInsuranceRejectionDetailsById(SetupBean setupBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			setupDao.updateInsuranceRejectionDetailsById(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<DashboardBean> getMonthWiseCashNet(DashboardBean dashboardBean) throws DaoException 
	{
		ArrayList<DashboardBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=dashboardDao.getMonthWiseCashNet(dashboardBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<DashboardBean> getMonthWiseInsuranceNet(DashboardBean dashboardBean) throws DaoException 
	{
		ArrayList<DashboardBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=dashboardDao.getMonthWiseInsuranceNet(dashboardBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<DashboardBean> getMonthWiseCollectionSummary(DashboardBean dashboardBean) throws DaoException 
	{
		ArrayList<DashboardBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=dashboardDao.getMonthWiseCollectionSummary(dashboardBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<DashboardBean> getMonthWisePatientCount(DashboardBean dashboardBean) throws DaoException 
	{
		ArrayList<DashboardBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=dashboardDao.getMonthWisePatientCount(dashboardBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllPatientsCountByDoctorDesig(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getAllPatientsCountByDoctorDesig(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getAllDHADoctors(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllDHADoctors(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getAllDentalPatientsCountAndTreatments(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getAllDentalPatientsCountAndTreatments(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getAllDHADentalProcedure(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllDHADentalProcedure(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	//anaesthesia workbench jan5 2017 - START
	public List<AnaesthesiaBean> getAllAnaestheticListSearch(AnaesthesiaBean anaesBean) throws DaoException {
		List<AnaesthesiaBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = anaesthesiaDao.getAllAnaestheticListSearch(anaesBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<AnaesthesiaBean> getAllHistoryMasterRisks(AnaesthesiaBean anaesBean) throws DaoException {
		List<AnaesthesiaBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = anaesthesiaDao.getAllHistoryMasterRisks(anaesBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public List<AnaesthesiaBean> getPatientHistoryforRisks(AnaesthesiaBean anaesBean) throws DaoException {
		List<AnaesthesiaBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = anaesthesiaDao.getPatientHistoryforRisks(anaesBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertIntraOpdetails(AnaesthesiaBean anaesBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			anaesthesiaDao.insertIntraOpdetails(anaesBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public AnaesthesiaBean getAllIntraOpDetails(AnaesthesiaBean anaesBean) throws DaoException {
		AnaesthesiaBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = anaesthesiaDao.getAllIntraOpDetails(anaesBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public AnaesthesiaBean getAllPreOpDetails(AnaesthesiaBean anaesBean) throws DaoException {
		AnaesthesiaBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = anaesthesiaDao.getAllPreOpDetails(anaesBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public void insertPreOpdetails(AnaesthesiaBean anaesBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			anaesthesiaDao.insertPreOpdetails(anaesBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	//anaesthesia workbench jan5 2017 - END



	/**  Excluded Diagnosis - insurance START **/
	public ArrayList<RegistrationBean> getAllExcludedDiagnosis4Ins(RegistrationBean registrationBean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) insuranceDao.getAllExcludedDiagnosis4Ins(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	private RegistrationBean getExcludedDiagnosisById(RegistrationBean registrationBean) throws DaoException {
		RegistrationBean exDiagBean = null;
		try {
			eclinicDaoManager.startTransaction();
			exDiagBean = insuranceDao.getExcludedDiagnosisById(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return exDiagBean;
	}

	public void insertExcludedDiagnosis4Ins(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			insuranceDao.insertExcludedDiagnosis4Ins(registrationBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(registrationBean, request, "INSERT", "Inserted an excluded diagnosis under Insurance", "", "", "diagnosis_insurar");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteExcludedDiagnosis4Ins(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			RegistrationBean oldBean = getExcludedDiagnosisById(registrationBean);
			eclinicDaoManager.startTransaction();
			insuranceDao.deleteExcludedDiagnosis4Ins(registrationBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(oldBean, request, "DELETE", "Deleted an excluded diagnosis under Insurance", "", "", "diagnosis_insurar");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllDiagnosisCode4Ins(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) insuranceDao.getAllDiagnosisCode4Ins(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<RegistrationBean> getAllExcludedDiagnosis4InsNet(RegistrationBean registrationBean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) insuranceDao.getAllExcludedDiagnosis4InsNet(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	private RegistrationBean getExcludedDiagnosisNetById(RegistrationBean registrationBean) throws DaoException {
		RegistrationBean exDiagBean = null;
		try {
			eclinicDaoManager.startTransaction();
			exDiagBean = insuranceDao.getExcludedDiagnosisNetById(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return exDiagBean;
	}

	public void insertExcludedDiagnosis4InsNet(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			insuranceDao.insertExcludedDiagnosis4InsNet(registrationBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(registrationBean, request, "INSERT", "Inserted an excluded diagnosis under Insurance Network", "", "", "diagnosis_insurar_net");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void deleteExcludedDiagnosis4InsNet(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			RegistrationBean oldBean = getExcludedDiagnosisNetById(registrationBean);
			eclinicDaoManager.startTransaction();
			insuranceDao.deleteExcludedDiagnosis4InsNet(registrationBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(oldBean, request, "DELETE", "Deleted an excluded diagnosis under Insurance Network", "", "", "diagnosis_insurar_net");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllDiagnosisCode4InsNet(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) insuranceDao.getAllDiagnosisCode4InsNet(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	/**  Excluded Diagnosis - insurance END **/

	/**  Triage Forms in OP Module START **/
	public MedicalFormsBean getAllTriagForms(MedicalFormsBean medicalFormsBean) throws DaoException {
		MedicalFormsBean msterlist = null;
		try {
			eclinicDaoManager.startTransaction();
			msterlist = consultationDao.getAllTriagForms(medicalFormsBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return msterlist;
	}
	public List<MedicalFormsBean> getTriagFormContents(MedicalFormsBean medicalFormsBean, boolean isSaved) throws DaoException {
		List<MedicalFormsBean> msterlist = null;
		try {
			eclinicDaoManager.startTransaction();
			msterlist = consultationDao.getTriagFormContents(medicalFormsBean, isSaved);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return msterlist;
	}
	/**  Triage Forms in OP Module END **/


	/** Copy TestReferenceRange, Default resultset,Alt resultset values from a Test Parameter Mapping START **/
	public void copyTestReferenceRangeValues(RegistrationBean registrationBean) throws DaoException { //new method for param setup feb9 2017
		try {
			eclinicDaoManager.startTransaction();

			//registrationBean.setQuery("select max(id) from test_parameter_mapping");
			parameterBean =new ParameterBean();
			parameterBean.setTable_name("test_parameter_mapping");
			registrationBean.setSerial_id(commonDao.fetchMaxIdfromTable(parameterBean));
			laboratoryDao.insertTestParameterRanges(registrationBean);  

			laboratoryDao.insertTestDefaultvalues(registrationBean); 

			//registrationBean.setQuery("select id from test_reference_range where param_mapping_id ='"+registrationBean.getParam_mapping_id()+"'");
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("test_reference_range");
			parameterBean.setField_name("id");
			parameterBean.setField_name1("param_mapping_id");
			parameterBean.setField_value1( registrationBean.getParam_mapping_id());
			parameterBean.setOffice_id(null);
			parameterBean.setField_name2(null);
			
			String oldIds=commonDao.fetchValueWithSingleParam(parameterBean);
			parameterBean=null;

			//registrationBean.setQuery("select id from test_reference_range where param_mapping_id ='"+registrationBean.getSerial_id()+"'");
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("test_reference_range");
			parameterBean.setField_name("id");
			parameterBean.setField_name1("param_mapping_id");
			parameterBean.setField_value1(registrationBean.getSerial_id());
			parameterBean.setOffice_id(null);
			parameterBean.setField_name2(null);
			
			String newIds=commonDao.fetchValueWithSingleParam(parameterBean);
			parameterBean=null;
			String newNormalIds[] = null;

			if (newIds != null && !newIds.equals("")) {
				newNormalIds= newIds.split(",");

			}
			if (oldIds != null && !oldIds.equals("")) {			
				String oldNormalIds[] = oldIds.split(",");				
				if(oldNormalIds.length == newNormalIds.length) {
					for (int i = 0; i < oldNormalIds.length; i++) {
						registrationBean.setSerial_id(newNormalIds[i]);
						registrationBean.setNormal_id(oldNormalIds[i]);
						laboratoryDao.insertTestAltvalues(registrationBean); 
					}
				}
			}

			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void insertTestParameterRanges(RegistrationBean registrationBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertTestParameterRanges(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void insertTestDefaultvalues(RegistrationBean registrationBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertTestDefaultvalues(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void insertTestAltvalues(RegistrationBean registrationBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertTestAltvalues(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	/** Copy TestReferenceRange, Default resultset,Alt resultset values from a Test Parameter Mapping END **/

	public void updateProcedureConfirmStatus(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateProcedureConfirmStatus(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateProcedureConfirmStatusByConsultId(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			consultationDao.updateProcedureConfirmStatusByConsultId(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	// Dashboard - Lab Status - START
	public List<DashboardBean> getAllInvestigationsOrdered(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getAllInvestigationsOrdered(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	public List<DashboardBean> getAllLabOrderStatus(DashboardBean dashboardBean) throws DaoException {
		List<DashboardBean> dataBean = null;
		try {
			eclinicDaoManager.startTransaction();
			dataBean = dashboardDao.getAllLabOrderStatus(dashboardBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return dataBean;
	}
	// Dashboard - Lab Status - END

	public List getAllMasterData4AccountChild(AccountBean accountBean) throws DaoException {
		List childList = null;
		try {
			eclinicDaoManager.startTransaction();
			childList = accountDao.getAllMasterData4AccountChild(accountBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return childList;
	}

	public ArrayList getAllFrequencyList(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)consultationDao.getAllFrequencyList(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	// Laboratory - Re-run labtests method Feb22 2017
	public void insertRerunRequest(LaboratoryBean laboratoryBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertRerunRequest(laboratoryBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	} 

	public List<LaboratoryBean> getRerunTestResults(LaboratoryBean laboratoryBean) throws DaoException {
		List<LaboratoryBean> lablist = null;
		try {
			eclinicDaoManager.startTransaction();
			lablist = laboratoryDao.getRerunTestResults(laboratoryBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lablist;
	}
	public OfficeLetterHeadBean getAllSmsVendorsDetails(OfficeLetterHeadBean officeBean) throws DaoException{

		OfficeLetterHeadBean offBean = null;
		try {
			eclinicDaoManager.startTransaction();
			offBean = setupDao.getAllSmsVendorsDetails(officeBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return offBean;
	}
	public ArrayList getSmsVendorNames(OfficeLetterHeadBean officeBean) throws DaoException{

		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getSmsVendorNames(officeBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void updateSmsVendorDetails(OfficeLetterHeadBean offBean, HttpServletRequest request)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.updateSmsVendorDetails(offBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(offBean, request, "UPDATE", "Updated Sms Details of Vendors", null, null, "sms_vendors");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public List<RegistrationBean> getListOfPatientsReport(RegistrationBean registrationBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) reportsDao.getListOfPatientsReport(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	//methods for diagnosis setup & medical illustrative reports feb28 2017--nayana
	public ArrayList getDiagnosisCategoryList(SetupBean setupBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getDiagnosisCategoryList(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertDiagCat(SetupBean setupBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertDiagCat(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void insertDiagnosisValues(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertDiagnosisValues(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public ArrayList getDiagnosisValues(SetupBean setupBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getDiagnosisValues(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;            
	}

	public ArrayList getMedicalIllustrativeReportDetails(SetupBean setupBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getMedicalIllustrativeReportDetails(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;            
	}
	//methods for diagnosis setup & medical illustrative reports feb28 2017 ends--nayana
	//equipment wise test details report --nayana march4 2017
	public ArrayList getEqpWiseTestDetails(SetupBean setupBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = laboratoryDao.getEqpWiseTestDetails(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;            
	}
	//equipment wise test details report --nayana march4 2017  

	//parameter wise test details report --nayana march6 2017
	public ArrayList getEqpWiseTestParamDetails(SetupBean setupBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = laboratoryDao.getEqpWiseTestParamDetails(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;            
	}
	//parameter wise test details report --nayana march6 2017


	public List<PaymentBean> getAllPaidAccountsPayableInvoices(AccountBean accountBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) accountDao.getAllPaidAccountsPayableInvoices(accountBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<ReportBean> getDailyDocWiseRevenueSummary(RegistrationBean regiBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = reportsDao.getDailyDocWiseRevenueSummary(regiBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<LaboratoryBean> getLabConsumptionDetails(LaboratoryBean testBean)throws DaoException {
		ArrayList<LaboratoryBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = laboratoryDao.getLabConsumptionDetails(testBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;            
	}

	public void deleteConsultLabTest(HttpServletRequest request,String fromPage) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();

			RegistrationBean testBean = new RegistrationBean();
			testBean.setSerial_id(request.getParameter("serial_id"));
			if(fromPage!=null && fromPage.equalsIgnoreCase("Bill"))
				testBean = registrationDao.getConsultLabTestByID(testBean);
			else
				testBean = registrationDao.getConsultLabTestRequestById(testBean);

			if(testBean!=null){
				if(null != request.getParameter("serial_id") && !request.getParameter("serial_id").equals(""))
				{
					RegistrationBean labtestBean = new RegistrationBean();
					labtestBean.setConsult_id(testBean.getConsult_id());
					labtestBean.setIp_id(testBean.getIp_id());

					if(fromPage.equalsIgnoreCase("Bill"))
					{
						labtestBean.setTablename("consult_labtest");
						labtestBean.setSerial_id(request.getParameter("serial_id"));
						registrationDao.deleteConsultLabTest(labtestBean);					
					}
					else
					{
						labtestBean.setTablename("consult_labtest_request");
						labtestBean.setSerial_id(request.getParameter("serial_id"));
						registrationDao.deleteConsultLabTest(labtestBean);	

						labtestBean.setTablename("consult_labtest");
						labtestBean.setSerial_id(null);
						labtestBean.setRequest_id(request.getParameter("serial_id"));
						registrationDao.deleteConsultLabTest(labtestBean);
					}
					auditLogEntryForLogic(testBean, request, "DELETE", "Deleted an Investigation from  IP Doctor's Workbench/Billing ", testBean.getOp_number(),testBean.getConsult_id(),"consult_labtest");
				}
			}
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deleteConsultProcedure(UserBean userBean,HttpServletRequest request,String fromPage, String method) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();

			RegistrationBean procBean = new RegistrationBean();
			procBean.setSerial_id(request.getParameter("serial_id"));
			procBean.setOffice_id(userBean.getOffice_id());
			if(fromPage!=null && fromPage.equalsIgnoreCase("Bill"))
				procBean = registrationDao.getConsultProcedureByID(procBean);
			else
				procBean = registrationDao.getConsultProcedureRequestById(procBean);

			if(procBean!=null){
				if(null != request.getParameter("serial_id") && !request.getParameter("serial_id").equals(""))
				{
					RegistrationBean procedureBean = new RegistrationBean();
					procedureBean.setConsult_id(procBean.getConsult_id());
					procedureBean.setIp_id(procBean.getIp_id());

					if(fromPage.equalsIgnoreCase("Bill"))
					{
						procedureBean.setTablename("consult_procedure");
						procedureBean.setSerial_id(request.getParameter("serial_id"));
						registrationDao.deleteConsultProcedure(procedureBean);					
					}
					else
					{
						procedureBean.setTablename("consult_procedure_request");
						procedureBean.setSerial_id(request.getParameter("serial_id"));
						registrationDao.deleteConsultProcedure(procedureBean);	

						procedureBean.setTablename("consult_procedure");
						procedureBean.setSerial_id(null);
						procedureBean.setRequest_id(request.getParameter("serial_id"));
						registrationDao.deleteConsultProcedure(procedureBean);
					}
					if(method.equals("deleteConsumable")){
						auditLogEntryForLogic(procBean,request, "DELETE", "Deleted a Consumption Entry from IP ", procBean.getOp_number(),procBean.getConsult_id(),"consult_procedure");
					}else{
						auditLogEntryForLogic(procBean, request, "DELETE", "Deleted a Procedure/Treatment from IP Doctor's Workbench/Billing", procBean.getOp_number(),procBean.getConsult_id(),"consult_procedure");
					}
				}
			}
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public InPatientBean getPatientDueDetails4IP(InPatientBean ipBean) throws DaoException 
	{
		InPatientBean ipBillBean = null;
		try {
			eclinicDaoManager.startTransaction();
			ipBillBean = ipBillingDao.getPatientDueDetails4IP(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return ipBillBean;
	}

	/**  SAUDI INSURANCE INTEGRATION STARTS @ 15 MAR 2017**/
	public RegistrationBean getPatientDetail4Eligibility(RegistrationBean registrationBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationBean = insuranceDao.getPatientDetail4Eligibility(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return registrationBean;
	}

	public String getNextTransactionId4InsurarEligibility(InsuranceParseBean insuranceParseBean) throws DaoException {
		String transacId="0";
		try {
			eclinicDaoManager.startTransaction();
			transacId=insuranceDao.getNextTransactionId4InsurarEligibility(insuranceParseBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return transacId;
	}

	public void insertInsurarEligibility(InsuranceParseBean insuranceParseBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			insuranceDao.insertInsurarEligibility(insuranceParseBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateInsurarEligibility(InsuranceParseBean insuranceParseBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			insuranceDao.updateInsurarEligibility(insuranceParseBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public void updateClaimSubmitDetails(InsuranceBean insuranceBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			insuranceDao.updateClaimSubmitDetails(insuranceBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public List<InsuranceBean> getAllListOfClaimsInBatch(InsuranceBean insuranceBean)  throws DaoException {
		List<InsuranceBean> claimsList =null;
		try {
			eclinicDaoManager.startTransaction();
			claimsList = insuranceDao.getAllListOfClaimsInBatch(insuranceBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return claimsList;
	}

	public List<RegistrationBean> getAllListOfClaimDetails4Submission(SetupBean setupBean)  throws DaoException {
		List<RegistrationBean> claimsList =null;
		try {
			eclinicDaoManager.startTransaction();
			claimsList = insuranceDao.getAllListOfClaimDetails4Submission(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return claimsList;
	}
	/**  SAUDI INSURANCE INTEGRATION ENDS @ 15 MAR 2017**/
	public ArrayList<UserBean> getAllHierarchyOffices() throws DaoException 
	{
		ArrayList<UserBean> lst=null;
		try{        	
			eclinicDaoManager.startTransaction();
			lst=(ArrayList)setupDao.getAllHierarchyOffices();
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lst;
	}
	public Boolean deletePayAdjustment(String receiptDetailsId, HttpServletRequest request) throws DaoException {
		PaymentBean receiptDetails = null;
		Boolean processStatus = true;
		try {
			eclinicDaoManager.startTransaction();
			receiptDetails = (PaymentBean) receiptDao.getReceiptDetailSById(receiptDetailsId);
			auditLogEntryForLogic(receiptDetails, request, "DELETE", "Removed pay adjust", null, null, "receipt_details");
			receiptDao.deleteReceiptDetails(receiptDetailsId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
				processStatus = false;
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return processStatus;
	}

	/** IP PREAPPROVAL STARTS @ APR 11 2017 **/
	public void updateConsultProcIP(InPatientBean ipBean, HttpServletRequest request)throws DaoException
	{

		try {
			eclinicDaoManager.startTransaction();
			ipBillingDao.updateConsultProcIP(ipBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(ipBean, request, "UPDATE", "Edited & Updated a Procedure/Treatment from IP Billing", ipBean.getIp_number(),ipBean.getConsult_id(),ipBean.getTablename());

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void updateConsultLabIP(InPatientBean ipBean, HttpServletRequest request)throws DaoException
	{

		try {
			eclinicDaoManager.startTransaction();
			ipBillingDao.updateConsultLabIP(ipBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(ipBean, request, "UPDATE", "Edited & Updated an Investigation from IP Billing", ipBean.getIp_number(),ipBean.getConsult_id(),ipBean.getTablename());

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updatePreApprPriceFromRequestTableIP(InPatientBean ipBean, HttpServletRequest request) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			ipBillingDao.updatePreApprPriceFromRequestTableIP(ipBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	/** IP PREAPPROVAL ENDS @ APR 11 2017 **/
	public List<HistoryPresentIllBean> getSignificantSignsList(HistoryPresentIllBean historyPresentIllBean) throws DaoException{
		List<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  consultationDao.getSignificantSignsList(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllMedServicesForPreApp(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllMedServicesForPreApp(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	// New Query For ListOfClaims--MetLife Apr24 2017 
	/**linked to ICD_CODES	 **/
	public List<RegistrationBean> getAllListOfClaims4ReportCombined2(SetupBean setupBean) throws DaoException {
		List<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = insuranceDao.getAllListOfClaims4ReportCombined2(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	// New Query For ListOfClaims-- MetLife endss Apr24 2017 

	public DocumentDetailBean getAssetAttachedById(DocumentDetailBean docBean) throws DaoException {
		DocumentDetailBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=assetManageDao.getAssetAttachedById(docBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateMaintananceInfo(AssetManageBean assetBean, HttpServletRequest request) throws DaoException {
		try {

			AssetManageBean oldBean = getAssetmaintenanceInfoById(assetBean);
			eclinicDaoManager.startTransaction();
			assetManageDao.updateAssetMaintananceInfo(assetBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(oldBean, request, "UPDATE", "Updated Asset Maintenance Info",null,null,"asset_maintenance_info");
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public AssetManageBean getAssetMaintenanceById(AssetManageBean assetBean) throws DaoException {
		AssetManageBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=assetManageDao.getAssetMaintenanceById(assetBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllAssetMaintenanceSchedules(AssetManageBean assetBean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAllAssetMaintenanceSchedules(assetBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;

	}

	public List getAllTestByLabNoForReferral(String sampleId ) throws DaoException 
	{

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAllTestByLabNoForReferral(sampleId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList getAppointStatusList(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)appointDao.getAppointStatusList(appointmentBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertAppointStatusDetails(AppointmentBean appointmentBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			appointDao.insertAppointStatusDetails(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<AppointmentBean> getAppointmentStatusById(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<AppointmentBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=appointDao.getAppointmentStatusById(appointmentBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<HistoryPresentIllBean> getFamilyRelationsMaster() throws DaoException {
		ArrayList<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<HistoryPresentIllBean>) registrationDao.getFamilyRelationsMaster();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void insertFamilyRelation(HistoryPresentIllBean hopiBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertFamilyRelation(hopiBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(hopiBean, request, "INSERT", "Added a Family Member :" + hopiBean.getOp_number(), null, null, "family_relation");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList<RegistrationBean> getAllFamilyMembers(HistoryPresentIllBean hopiBean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) registrationDao.getAllFamilyMembers(hopiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	// diagnosis indicator changes may 04 2017
	public ArrayList<ConsultationBean> getAllDiagnosisIndicators(ConsultationBean consBean) throws DaoException {
		ArrayList<ConsultationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) consultationDao.getAllDiagnosisIndicators(consBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	// diagnosis indicator changes may 04 2017

	//medicinesearch insurance based colr change(Dr.consult->Medication tab) may1 2017  
	public ArrayList getAllMedicineList4InsurNetwork(RegistrationBean regBean)throws DaoException{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllMedicineList4InsurNetwork(regBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllMedicineList4Insur(RegistrationBean regBean)throws DaoException{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllMedicineList4Insur(regBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}


	public ArrayList getAllMedicines4SearchByGrp4InsurNetwork(SetupBean setBean)throws DaoException{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllMedicines4SearchByGrp4InsurNetwork(setBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllMedicines4SearchByGrp4Insur(SetupBean setBean)throws DaoException{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllMedicines4SearchByGrp4Insur(setBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	//IP
	public ArrayList<InPatientBean> getAllMedicines4Search4IPInsur(InPatientBean ipbean) throws DaoException{
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)ipConsultDao.getAllMedicines4Search4IPInsur(ipbean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<InPatientBean> getAllMedicines4Search4IPInsurNetwork(InPatientBean ipbean)throws DaoException{
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)ipConsultDao.getAllMedicines4Search4IPInsurNetwork(ipbean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<InPatientBean> getAllMedicines4SearchByGrp4IPInsur(InPatientBean ipbean)throws DaoException{
		ArrayList<InPatientBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)ipConsultDao.getAllMedicines4SearchByGrp4IPInsur(ipbean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<InPatientBean> getAllMedicines4SearchByGrp4IPInsurNetwork(InPatientBean ipbean)throws DaoException{
		ArrayList<InPatientBean> list =null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)ipConsultDao.getAllMedicines4SearchByGrp4IPInsurNetwork(ipbean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	//medicinesearch insurance based colr change(Dr.consult->Medication tab) may1 2017 

	public ArrayList getAllCustomerSalePendingTransactionDays(AccountBean accountBean) throws DaoException 
	{
		ArrayList<AccountBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  accountDao.getAllCustomerSalePendingTransactionDays(accountBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList<String> getDocWiseTimeslots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<String> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<String>)appointDao.getDocWiseTimeslots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<ReportBean> getDocWiseRevenueReport(SetupBean setBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getDocWiseRevenueReport(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<ReportBean> getAllCreditNotesForDoctor(SetupBean setBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = reportsDao.getAllCreditNotesForDoctor(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<ReportBean> getAllRefundCash4DocRevenue(SetupBean regiBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = reportsDao.getAllRefundCash4DocRevenue(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<ReportBean> getAllRefundIns4DocRevenue(SetupBean regiBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list =  reportsDao.getAllRefundIns4DocRevenue(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getPrevCashReceiptsVouch4DocRevenue(SetupBean setupBean) throws DaoException {
		ArrayList list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)reportsDao.getPrevCashReceiptsVouch4DocRevenue(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllSampleCollectedDetails(RegistrationBean labBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllSampleCollectedDetails(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	//method for banksetup june12 2017
	public String insertBankSetup(SetupBean setupBean) throws DaoException 
	{
		String bank_id = null;
		try{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertBankSetup(setupBean);
			bank_id = setupDao.getLastBankId();
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return bank_id;
	}
	public ArrayList getAllBanksList(SetupBean setupBean)  throws DaoException 
	{
		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getAllBanksList(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void updateBankSetup(SetupBean setupBean) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			setupDao.updateBankSetup(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<PurchaseBean> getAllAssetItemsStkAdjst(PurchaseBean pbBean) throws DaoException 
	{
		ArrayList list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAllAssetItemsStkAdjst(pbBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;	
	}	
	public PurchaseBean getAllInformationforStkAdjst(PurchaseBean pbBean)throws DaoException 
	{
		PurchaseBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = assetManageDao.getAllInformationforStkAdjst(pbBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}	
	public ArrayList getAllAssetMasterList(AssetManageBean assetBean) throws DaoException 
	{
		ArrayList list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAllAssetMasterList(assetBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	//method to create office group june13 2017	
	public String insertOfficeGroup(AccountBean accountBean) throws DaoException 
	{
		String group_id = null;
		try{        	
			eclinicDaoManager.startTransaction();
			accountDao.insertOfficeGroup(accountBean);
			group_id = accountDao.getLastGroupId();
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return group_id;
	} 
	public ArrayList getAllOfficeGroups(AccountBean accBean) throws DaoException 
	{
		ArrayList list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getAllOfficeGroups(accBean);
			eclinicDaoManager.commitTransaction();

		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void updateOfficeGroup(AccountBean accBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			accountDao.updateOfficeGroup(accBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void deleteOfficeGroup(AccountBean accBean) throws DaoException 
	{
		try {        	
			eclinicDaoManager.startTransaction();
			accountDao.deleteOfficeGroup(accBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<UserBean> getAllSeatsUnderGroupWithPrivilage(UserBean userBean) throws DaoException 
	{
		ArrayList<UserBean> lst=null;
		try{        	
			eclinicDaoManager.startTransaction();
			lst = setupDao.getAllSeatsUnderGroupWithPrivilage(userBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lst;
	}
	
	public ArrayList getDailyDocWiseCollectionSummaryMonthly(RegistrationBean regBean) throws DaoException {
		ArrayList<ReportBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list = setupDao.getDailyDocWiseCollectionSummaryMonthly(regBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public List<AccountBean> getAllAccountChildsWithValues(AccountBean accountBean) throws DaoException {
		List<AccountBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = accountDao.getAllAccountChildsWithValues(accountBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public void updateDrConsultPatientDetailsOnly(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateDrConsultPatientDetailsOnly(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	
	public ArrayList<SetupBean> getAllMatchingTableColumnFrom2Schema(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllMatchingTableColumnFrom2Schema(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	
	/********************* Liju 25-7-2017 *****************/
	public ArrayList<RegistrationBean> getTestDetailsId(
			RegistrationBean reg) throws DaoException {
		ArrayList<RegistrationBean>list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) registrationDao
					.getTestDetailsId(reg);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList getAllDriversForSampleTransffer() throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) registrationDao.getAllDriversForSampleTransffer();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public List<RegistrationBean> getAllTestIdByTestDetailsId(RegistrationBean registrationBean) throws DaoException 
	{

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllTestIdByTestDetailsId(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	
	public List<RegistrationBean> getAllTestsByLabNo(String sampleId ) throws DaoException 
	{

		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllTestsByLabNo(sampleId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	/**  FOR IP CHECKOUT LIST ----- @START ---- NIDHI **/
	public List<RegistrationBean> getAllCheckOutLists(RegistrationBean regBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = surgeryDao.getAllCheckOutLists(regBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	/**  FOR DAY CARE SURGERY ----- @START ---- NIDHI **/
	public CounselingBean getPreOpInstructionID(String opNumber) throws DaoException {

		CounselingBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = surgeryDao.getPreOpInstructionID(opNumber);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void insertPreOpInstruction(CounselingBean counsBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();

			surgeryDao.insertPreOpInstruction(counsBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	
	public void saveDayCareSurgDetails(RegistrationBean regBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			surgeryDao.saveDayCareSurgDetails(regBean);
			eclinicDaoManager.commitTransaction();

			/* audit log given in action */

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	
	
	/****Optometry start ***Nidhi***/
	
	public void insertRefraSurgery(GlassPrescriptionBean registrationBean) throws DaoException {

		try {
			eclinicDaoManager.startTransaction();
			consultationDao.insertRefraSurgery(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public ArrayList getRefraSurgeryTempl(RegistrationBean registrationBean) throws DaoException {

		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getRefraSurgeryTempl(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void deleteRefraSurgery(String id, HttpServletRequest request) throws DaoException {
		try {
			GlassPrescriptionBean oldBean = new GlassPrescriptionBean();
			oldBean.setSerial_id(id);
			oldBean = getRefraSurgeryById(oldBean);

			eclinicDaoManager.startTransaction();
			consultationDao.deleteRefraSurgery(id);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "DELETE", "Deleted Refrative Surgery Of Patient From Doctor's / Nurse's Workbench", oldBean.getOp_number(),
					oldBean.getConsult_id(), "eye_refrasurgery");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public GlassPrescriptionBean getRefraSurgeryByConsult(String serialId) throws DaoException {

		GlassPrescriptionBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = consultationDao.getRefraSurgeryByConsult(serialId);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	
	public void updateRefraSurgery(GlassPrescriptionBean registrationBean, HttpServletRequest request) throws DaoException {

		try {
			GlassPrescriptionBean oldBean = getRefraSurgeryById(registrationBean);

			eclinicDaoManager.startTransaction();
			consultationDao.updateRefraSurgery(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Updated Patient's Refra Surgery From Doctor's/Nurse's Workbench.",
					oldBean.getOp_number(), oldBean.getConsult_id(), "eye_refrasurgery");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public GlassPrescriptionBean getRefraSurgeryById(GlassPrescriptionBean gpBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			gpBean = consultationDao.getRefraSurgeryById(gpBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return gpBean;
	}
	
	public ArrayList getDischargeListForReport(SetupBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getDischargeListForReport(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllSurgeryPatList(RegistrationBean setupBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllSurgeryPatList(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<RegistrationBean> getAllIPDischargeList(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = surgeryDao.getAllIPDischargeList(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public List<RegistrationBean> getAllIPSurgeryList(RegistrationBean rgistrationBean) throws DaoException {

		List us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = surgeryDao.getAllIPSurgeryList(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	/***For Package Outstand Detailed Report _Nidhi ***/
	public String getOpeningPackageOutStand(ReportBean reportBean) throws DaoException {

		String us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = reportsDao.getOpeningPackageOutStand(reportBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList<RegistrationBean> getPackageOutstandingDetails(RegistrationBean reportBean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) reportsDao.getPackageOutstandingDetails(reportBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getPackageOutStandReceivedDue(RegistrationBean regiBean) throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) reportsDao.getPackageOutStandReceivedDue(regiBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getAllConsultedDoctors4Posting(SetupBean setupBean) throws DaoException 
	{
		ArrayList<RegistrationBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list = registrationDao.getAllConsultedDoctors4Posting(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList getAllSMSLog(RegistrationBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllSMSLog(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList getAllSMSAndEmailLog(RegistrationBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllSMSAndEmailLog(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList getAllUnpaidBill(RegistrationBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllUnpaidBill(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList getReverseAutReport(RegistrationBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getReverseAutReport(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllClinicWiseReport(RegistrationBean labBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) laboratoryDao.getAllClinicWiseReport(labBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	//queries for internal referals new..AUG14 2017
	public ArrayList getAllReferralDetails(SetupBean referBean)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllReferralDetails(referBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public RegistrationBean getDuplicateProcedureByConsultDate(RegistrationBean registrationBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			registrationBean = consultationDao.getDuplicateProcedureByConsultDate(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return registrationBean;
	}
	
	public RegistrationBean getDuplicateLabtestByConsultDate(RegistrationBean registrationBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			registrationBean = consultationDao.getDuplicateLabtestByConsultDate(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return registrationBean;
	}

	public ArrayList<SetupBean> getAllInsurarNetworkEmployers(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<SetupBean>) setupDao.getAllInsurarNetworkEmployers(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public SetupBean getNetworkOfficeIdsByEmployer(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupBean = setupDao.getNetworkOfficeIdsByEmployer(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return setupBean;
	}

	// method for insurance consult limit AUG19 2017
	public String getInsuranceConsultationCount(RegistrationBean registrationBean) {
		String consult_count = null;
		try {
			eclinicDaoManager.startTransaction();
			consult_count = setupDao.getInsuranceConsultationCount(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}

		}
		return consult_count;
	}
	
	public List<SetupBean> getAllDoctorsByConsultation(SetupBean setupBean) throws DaoException {
		List<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getAllDoctorsByConsultation(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public List<SetupBean> getDWConsultDetails(SetupBean setupBean) throws DaoException {
		List<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getDWConsultDetails(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<SetupBean> getDWConsultlabDetails(SetupBean setupBean) throws DaoException {
		List<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getDWConsultlabDetails(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<SetupBean> getDWProcedureDetails(SetupBean setupBean) throws DaoException {
		List<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getDWProcedureDetails(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<RegistrationBean> getDWSponserDetails(SetupBean setupBean) throws DaoException {
		List<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getDWSponserDetails(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<OfficeLetterHeadBean> getUserAssignedDepartments(UserBean userBean) throws DaoException 
	{
		ArrayList<OfficeLetterHeadBean> officeListFrUsers = null;
		try {
			eclinicDaoManager.startTransaction();
			officeListFrUsers = hierarchyDao.getUserAssignedDepartments(userBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return officeListFrUsers;
	}
	
	public void deleteUsersDepartment(String id) throws DaoException 
	{
		try{    
			eclinicDaoManager.startTransaction();
			loginDao.deleteUsersDepartment(id);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void insertUsersDepartment(UserBean userBean) throws DaoException 
	{
		try{        	
			eclinicDaoManager.startTransaction();
			loginDao.insertUsersDepartment(userBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public List<RegistrationBean> getPatientWiseTests(RegistrationBean labBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getPatientWiseTests(labBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	// Add Favourite LabTests & Refer Clinics --Mastersetup--Sep10 2017
	public void insertReferClinicFav(SetupBean setupBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertReferClinicFav(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public SetupBean getAllReferClinicFav(SetupBean setupBean) throws DaoException {
		SetupBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (SetupBean) setupDao.getAllReferClinicFav(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllInvestigations4SearchforReferClinics(SetupBean setupBean) throws DaoException {
		ArrayList us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = setupDao.getAllInvestigations4SearchforReferClinics(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	// Add Favourite LabTests & Refer Clinics --Mastersetup--Sep10 2017 endss
	
	/**List of Invoices for Specific Patient**/
	public ArrayList<RegistrationBean> getInvForSpecificPatient(SetupBean setupBean) throws DaoException{
		ArrayList<RegistrationBean> list=null;
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)setupDao.getInvForSpecificPatient(setupBean);
			eclinicDaoManager.commitTransaction();

		}catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/**
	 * Returns all SupplersList for Select options.
	 * @param setupBean for officeId
	 * @return <code>List&lt;CustomSelectList&gt;</code>
	 * @throws DaoException 
	 */
	public List<CustomSelectList> getAllSuppliersForSelectOption(SetupBean setupBean) throws DaoException { 
		List<CustomSelectList> suppliers = null;
		try {
			eclinicDaoManager.startTransaction();
			suppliers = reportsDao.getAllSuppliersForSelectOption(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return suppliers;
	}
	public ArrayList<RegistrationBean> getAllConsultIdsClaimRecRemit(SetupBean setupBean) throws DaoException{
		ArrayList<RegistrationBean> consultIds = null;
		try {
			eclinicDaoManager.startTransaction();
			consultIds = reportsDao.getAllConsultIdsClaimRecRemit(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return consultIds;
	}
	
	public RegistrationBean getPatientAdvanceDetails(RegistrationBean registrationBean1)  throws DaoException
	{
		RegistrationBean advanceBean = null;
		try {
			eclinicDaoManager.startTransaction();
			advanceBean = registrationDao.getPatientAdvanceDetails(registrationBean1);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return advanceBean;
	}

	public void insertPatientAdvanceDetails(RegistrationBean advanceBean)  throws DaoException
	{
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertPatientAdvanceDetails(advanceBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}		
	}

	public void updatePatientAdvanceDetails(RegistrationBean newAdvanceBean)  throws DaoException
	{
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updatePatientAdvanceDetails(newAdvanceBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList<RegistrationBean> getClaims4OutRemitReport(SetupBean setupBean) throws DaoException 
	{
		//modified for club months xml generation
		ArrayList<RegistrationBean> list=null;
		if(setupBean.getOrderby()==null || setupBean.getOrderby().equals(""))
			setupBean.setOrderby("order by doctor_consult.insurar_id,doctor_consult.insurar_sub,doctor_consult.consult_date");
		//modified for club months xml generation
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)setupDao.getClaims4OutRemitReport(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertComplaintAssign(RegistrationBean registrationBean)throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			setupDao.insertComplaintAssign(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public ArrayList getPresentComplByDeptwise(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try {        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getPresentComplByDeptwise(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e){
			try{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	//LabResultStatisticsReport Query Oct07 2017 
	public ArrayList<RegistrationBean> getLabResultStatisticsReportValues(RegistrationBean regiBean) throws DaoException{
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = reportsDao.getLabResultStatisticsReportValues(regiBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}		
	public ArrayList<AssetManageBean> getAssetWarrentyExpirDetails(PurchaseBean Pbean) throws DaoException {
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)assetManageDao.getAssetWarrentyExpirDetails(Pbean); 
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;	
	}
	
	public ArrayList getAllReferralTests(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getAllReferralTests(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList<AssetManageBean> getAssetAdditionDisposalInfoById(AssetManageBean assetBean) throws DaoException 
	{
		ArrayList<AssetManageBean> List = null;
		try {
			eclinicDaoManager.startTransaction();
			List = assetManageDao.getAssetAdditionDisposalInfoById(assetBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return List;
	}
	public void insertAssetAdditionDisposalInfo(AssetManageBean assetBean,HttpServletRequest request)throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			assetManageDao.insertAssetAdditionDisposalInfo(assetBean);
			eclinicDaoManager.commitTransaction();
			auditLogEntry(assetBean, request, "INSERT", "Saves Asset Addition Disposal Info",null,null,"asset_addition_disposal_info");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public ArrayList getBankAttachments(AccountBean accountBean) throws DaoException{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)accountDao.getBankAttachments(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void insertBankAttachments(AccountBean accountBean) throws DaoException{
			try 
		{        	
			eclinicDaoManager.startTransaction();
			accountDao.insertBankAttachments(accountBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public ArrayList getAllCompAssignes(SetupBean setupBean) throws DaoException {

		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getAllCompAssignes(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	/**
	 * <h3>Purpose</h3>
	 * For Listing all doctors without linking offices.
	 * @author Sreenathan
	 * @param setupBean
	 * @return
	 * @throws DaoException
	 */
	public List<SetupBean> getAllDoctorsFromSetup(SetupBean setupBean) throws DaoException {
		List<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getAllDoctorsFromSetup(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getDetailedWriteoffsClaims4Report(SetupBean setupBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList)setupDao.getDetailedWriteoffsClaims4Report(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public String getTestDetaislCount(RegistrationBean regBean)
	{
		String count=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			count=laboratoryDao.getTestDetaislCount(regBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}

		}
		return count;
	}
	
	public void insertClaimDetails4Approval(HistoryPresentIllBean hopiBean) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertClaimDetails4Approval(hopiBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public List<HistoryPresentIllBean> getAllClaimDetails4Approval(HistoryPresentIllBean hopiBean) throws DaoException 
	{
		List<HistoryPresentIllBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllClaimDetails4Approval(hopiBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public void insertClaimDetailsApprovalData(RegistrationBean approvalBean) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertClaimDetailsApprovalData(approvalBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public void updateClaimDetailsApprovalData(RegistrationBean approvalBean) throws DaoException 
	{
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.updateClaimDetailsApprovalData(approvalBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}
	public List<RegistrationBean> getAllClaimApprovalData(RegistrationBean approvalBean) throws DaoException 
	{
		List<RegistrationBean> us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getAllClaimApprovalData(approvalBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public RegistrationBean getPendingClaimApprovalData(RegistrationBean approvalBean) throws DaoException 
	{
		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = registrationDao.getPendingClaimApprovalData(approvalBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	public ArrayList getAllRefundedAdvances(RegistrationBean registrationBean) throws DaoException{
		ArrayList list = null;
		try{

			eclinicDaoManager.startTransaction();
			list = (ArrayList)registrationDao.getAllRefundedAdvances(registrationBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return list;
	}
//Dec17 2017 Language Preferrable - newregistration
	public ArrayList getAllLanguages(SetupBean setBean) throws DaoException{
		ArrayList list = null;
		try{

			eclinicDaoManager.startTransaction();
			list = (ArrayList)setupDao.getAllLanguages(setBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return list;
	}

	public UserBean getUserWisePrivilegeDetails(UserBean userBean) throws DaoException{
		UserBean privBean = null;
		try{

			eclinicDaoManager.startTransaction();
			privBean = hierarchyDao.getUserWisePrivilegeDetails(userBean);
			eclinicDaoManager.commitTransaction();
		}catch(DaoException dao){
			try{
				eclinicDaoManager.rollbackTransaction();
			}catch(Exception e){

			}
			throw ((DaoException) dao.fillInStackTrace());
		}
		return privBean;
	}
	public ArrayList<SetupBean> getAllDhaCountries(SetupBean setupBean) throws DaoException 
	{
		ArrayList<SetupBean> lst = null;
		try {
			eclinicDaoManager.startTransaction();
			lst = setupDao.getAllDhaCountries(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return lst;
	}
//Token Num Generation Dec18 2017
	public void insertPatientTokens(RegistrationBean registrationBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			if(registrationBean.getAppoint_id()!=null && registrationBean.getAppoint_id().equals(""))
				registrationBean.setAppoint_id(null);
			registrationDao.insertPatientTokens(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { 
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		
	}
	
	public List getNotusedServicesReport(SetupBean setBean) throws DaoException {
		List list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList) setupDao.getNotusedServicesReport(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public String deleteTreatPlan(String plan_id,HttpServletRequest request) throws DaoException 
	{
		String insid="Not Deleted";
		//RegistrationBean registrationBean = new RegistrationBean();
		try 
		{        	
			eclinicDaoManager.startTransaction();
			/*registrationBean.setQuery("delete from treatment_plandetails where plan_id = "+plan_id);
			registrationDao.deleteQuery(registrationBean);*/
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("treatment_plandetails");
			parameterBean.setField_name1(" plan_id = '"+plan_id+"'");
			commonDao.deleteQueryInCommon(parameterBean);
			parameterBean=null;
			/*registrationBean.setQuery("delete from treatment_plan where plan_id = "+plan_id);
			registrationDao.deleteQuery(registrationBean);*/
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("treatment_plan");
			parameterBean.setField_name1("plan_id = '"+plan_id+"'");
			commonDao.deleteQueryInCommon(parameterBean);
			parameterBean=null;
 			eclinicDaoManager.commitTransaction();
 			insid = "Treatment Plan Deleted Successfully!!!";
			auditLogEntry("Delete", request, "Delete", "Deleted Dental Treatment Plan", plan_id,"",  "treatment_plan");


		} 
		catch (DaoException e) 
		{
			insid = "Sorry!! Some Problem Occured While deleting the plan!!!";
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return insid;
	}

	public ArrayList<AppointmentBean> getAllResAppointmentSlotsWeek(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<AppointmentBean>)appointDao.getAllResAppointmentSlotsWeek(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	  
	public SetupBean getDentalPlanTreatById(SetupBean setupBean)
			throws DaoException {
		SetupBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list= setupDao.getDentalPlanTreatById(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public SetupBean getDentTreatPlansById(SetupBean setupBean) throws DaoException{
		SetupBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list= setupDao.getDentTreatPlansById(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public AppointmentBean getAllResRescheduledAppointIds(AppointmentBean appointmentBean) throws DaoException{
		AppointmentBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list= appointDao.getAllResRescheduledAppointIds(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
		public ArrayList getAllUserReportMasterDetails(HierarchySetupBean hierarchyBean) throws DaoException 
	{
		ArrayList userDetails=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			userDetails=loginDao.getAllUserReportMasterDetails(hierarchyBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return userDetails;
	} 
		public ArrayList getReportMaster(UserBean useBean) throws DaoException 
		{
			ArrayList userDetails=null;
			try 
			{        	
				eclinicDaoManager.startTransaction();
				userDetails=loginDao.getReportMaster(useBean);
				eclinicDaoManager.commitTransaction();

			} 
			catch (DaoException e) 
			{
				try 
				{
					eclinicDaoManager.rollbackTransaction();
				} 
				catch (Exception e2) 
				{
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return userDetails;
		}

		public String cancelTreatPlan(String plan_id,HttpServletRequest request) throws DaoException 
	{
		String insid=null;
		//RegistrationBean queryBean = new RegistrationBean();
		try 
		{        	
			eclinicDaoManager.startTransaction();
			/*queryBean.setQuery("delete from dental_treatments where plan_id = "+plan_id);
			registrationDao.deleteQuery(queryBean);*/
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("dental_treatments");
			parameterBean.setField_name1("plan_id = '"+plan_id+"'");
			commonDao.deleteQueryInCommon(parameterBean);
			parameterBean=null;
			
			/*queryBean.setQuery("update treatment_plandetails where plan_id = "+plan_id);
			registrationDao.deleteQuery(queryBean);*/
			/*queryBean.setQuery("update treatment_plan set approve_status = 'N' where plan_id = "+plan_id);
			registrationDao.deleteQuery(queryBean);*/
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("treatment_plan");
			parameterBean.setField_name("approve_status = 'N'");
			parameterBean.setField_name1("plan_id = '"+plan_id+"'");
			commonDao.updateQueryInCommon(parameterBean);
			parameterBean=null;
			 
			 
			eclinicDaoManager.commitTransaction();
			auditLogEntry("Cancel treatment plan", request, "INSERT", "Rejected Dental Treatment Plan", request.getParameter("opno"), plan_id, "treatment_plan");


		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return insid;
	}

	public List<RegistrationBean> getCompanyClaims4ReportCombined(SetupBean setupBean) throws DaoException {
		List<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = insuranceDao.getCompanyClaims4ReportCombined(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList<RegistrationBean> getCompanyClaimsPharmacy(SetupBean setupBean) throws DaoException {
		// modified for club months xml generation
		ArrayList<RegistrationBean> list = null;
		  
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) insuranceDao.getCompanyClaimsPharmacy(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public void updatePainRate(HistoryPresentIllBean hopiBean) throws DaoException {

		try {

			eclinicDaoManager.startTransaction();
			registrationDao.updatePainRate(hopiBean);

			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public RegistrationBean getPatientCountryDetails(RegistrationBean regbean) throws DaoException {
		RegistrationBean list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list= registrationDao.getPatientCountryDetails(regbean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public List<ReportBean> getDeptwiseRevenueReport(RegistrationBean registrationBean) throws DaoException {
		List<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getDeptwiseRevenueReport(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}	
	public ReportBean getSalesSummaryReport(RegistrationBean registrationBean) throws DaoException {
		ReportBean list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getSalesSummaryReport(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getAllSpecialities4Patients(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getAllSpecialities4Patients(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<SetupBean> getAllDhaGroups(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<SetupBean>)setupDao.getAllDhaGroups(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public List<HistoryPresentIllBean> getPatientVisitDtlsByTypeGNC(HistoryPresentIllBean historyPresentIllBean) throws DaoException{
		List<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			if(historyPresentIllBean.getType()!=null && historyPresentIllBean.getType().equals("PD")) {
				list =  consultationDao.getAllPDConsultDiagnosis(historyPresentIllBean);
			}
			else
				list =  consultationDao.getPatientVisitDtlsByTypeGNC(historyPresentIllBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList<RegistrationBean> getGross4NonResidents(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getGross4NonResidents(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList getAllBillswithVatReport(SetupBean setBean)throws DaoException{
		ArrayList<ReportBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<ReportBean>) registrationDao.getAllBillswithVatReport(setBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public ArrayList getAllListOfReceiptsSummary(SetupBean setupBean) throws DaoException{
		ArrayList<RegistrationBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)setupDao.getAllListOfReceiptsSummary(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public String getAllAmountsAdjusted(RegistrationBean regBean)throws DaoException{
		String amountsadjusted=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			amountsadjusted=insuranceDao.getAllAmountsAdjusted(regBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}

		}
		return amountsadjusted;
	}
	public List<RegistrationBean> getModalityMapDetails(RegistrationBean registrationBean) throws DaoException {

		List<RegistrationBean> masterBean = null;
		try {
			eclinicDaoManager.startTransaction();
			masterBean = registrationDao.getModalityMapDetails(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return masterBean;
	}
	public List<RegistrationBean> getAllLabtestMachines(RegistrationBean registrationBean) throws DaoException {

		List<RegistrationBean> masterBean = null;
		try {
			eclinicDaoManager.startTransaction();
			masterBean = registrationDao.getAllLabtestMachines(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return masterBean;
	}
	public List<RegistrationBean> getLabResultForDHSReport(RegistrationBean registrationBean) throws DaoException {
		List<RegistrationBean> masterBean = null;
		try {
			eclinicDaoManager.startTransaction();
			masterBean = registrationDao.getLabResultForDHSReport(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return masterBean;
	}
	public List<RegistrationBean> getRadioResultForDHSReport(RegistrationBean registrationBean) throws DaoException {
		List<RegistrationBean> masterBean = null;
		try {
			eclinicDaoManager.startTransaction();
			masterBean = registrationDao.getRadioResultForDHSReport(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return masterBean;
	}
	
	public void insertUpdateDeleteQueryString(QueryBean queryBean) throws DaoException {
		try {
			eclinicDaoManager.startTransaction();
			registrationDao.insertUpdateDeleteQueryString(queryBean);
			eclinicDaoManager.commitTransaction();
			queryBean=null;

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) { /* ignore */
			}
			throw ((DaoException) e.fillInStackTrace());
		}
	}

	public String executeQueryString(QueryBean queryBean) throws DaoException {
		String result = null;
		try {
			eclinicDaoManager.startTransaction();
			result = registrationDao.executeQueryString(queryBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return result;
	}
	
	public ArrayList<RegistrationBean> getAllListOfClaims4Display(SetupBean setupBean) throws DaoException 
	{
		//modified for club months xml generation
		ArrayList<RegistrationBean> list=null;
		if(setupBean.getOrderby()==null || setupBean.getOrderby().equals(""))
			setupBean.setOrderby("order by doctor_consult.insurar_id,doctor_consult.insurar_sub,doctor_consult.consult_date");
		//modified for club months xml generation
		try{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)setupDao.getAllListOfClaims4Display(setupBean);
			eclinicDaoManager.commitTransaction();
		}catch (DaoException e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2){
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public List<RegistrationBean> getTestDetaislCount4Report(RegistrationBean regBean) throws DaoException{
		List<RegistrationBean> countlist = null;
		try {
			eclinicDaoManager.startTransaction();
			countlist = registrationDao.getTestDetaislCount4Report(regBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return countlist;
	}
	public ArrayList<PurchaseBean> getAllItemStockMasterHeads(PurchaseBean purBean) throws DaoException{
		
		ArrayList<PurchaseBean> headlist = null;
		try {
			eclinicDaoManager.startTransaction();
			headlist = setupDao.getAllItemStockMasterHeads(purBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return headlist;
	}
	
	public SetupBean getAllAdjustedAmounts(SetupBean setupBean) throws DaoException {

		SetupBean adjustBean = null;
		try {
			eclinicDaoManager.startTransaction();
			adjustBean = setupDao.getAllAdjustedAmounts(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return adjustBean;
	}

	public ArrayList getAllReceiptListForPatient(RegistrationBean oldBean) throws DaoException {
		ArrayList<RegistrationBean> receiptlist = null;
		try {
			eclinicDaoManager.startTransaction();
			receiptlist = setupDao.getAllReceiptListForPatient(oldBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return receiptlist;
	}

	public void updateReceiptPreviousDue(RegistrationBean receiptBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateReceiptPreviousDue(receiptBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}	
	public ArrayList getPerformanceReportDetails(RegistrationBean performBean) throws DaoException {
		ArrayList<RegistrationBean> performReport = null;
		try {
			eclinicDaoManager.startTransaction();
			performReport = setupDao.getPerformanceReportDetails(performBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return performReport;
	}
	
	public List<RegistrationBean> getActualPerformanceByDate(RegistrationBean performBean) throws DaoException {
		ArrayList<RegistrationBean> performReport = null;
		try {
			eclinicDaoManager.startTransaction();
			performReport = setupDao.getActualPerformanceByDate(performBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return performReport;
	}
	public ArrayList getDoctorsCountPerformance(RegistrationBean performBean) throws DaoException {
		ArrayList<RegistrationBean> performReport = null;
		try {
			eclinicDaoManager.startTransaction();
			performReport = setupDao.getDoctorsCountPerformance(performBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return performReport;
	}
//Queries to link tests.. June13 2018 @start
	public void insertTestLinkSetup(RegistrationBean registrationBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertTestLinkSetup(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		
	}
	public ArrayList getLinkedTests(RegistrationBean regBean) throws DaoException {
		ArrayList<RegistrationBean> registrationBean = null;
		try {
			eclinicDaoManager.startTransaction();
			registrationBean = setupDao.getLinkedTests(regBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return registrationBean;
	}

	public void deleteTestLinks(RegistrationBean registrationBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.deleteTestLinks(registrationBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		
	}


//Queries to link tests.. June13 2018 @end

//Query to update Logo in office_details table @start--june18 2018
	public void updateAccreditationlogo(OfficeLetterHeadBean officeBean) throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateAccreditationlogo(officeBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}	
	public RegistrationBean getAccreditation(RegistrationBean registrationBean) throws DaoException {

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getAccreditation(registrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	
	public RegistrationBean getLabTestRequestedDate(RegistrationBean registrationBean) throws DaoException{
		try {
			eclinicDaoManager.startTransaction();
			registrationBean = consultationDao.getLabTestRequestedDate(registrationBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return registrationBean;
	}
	
	public OfficeLetterHeadBean getAccreditationLogo(OfficeLetterHeadBean officeBean) throws DaoException {
		OfficeLetterHeadBean offBean = null;
		try {
			eclinicDaoManager.startTransaction();
			offBean = setupDao.getAccreditationLogo(officeBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return offBean;
	}
	public List<RegistrationBean> getAllLabtestReports(RegistrationBean regBean) throws DaoException {
		List<RegistrationBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=consultationDao.getAllLabtestReports(regBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	

	public ArrayList<RegistrationBean> gtAllChequeReturnedList(RegistrationBean reg)throws DaoException {
		ArrayList list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.gtAllChequeReturnedList(reg);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	public void updateReceiptChequStatus(RegistrationBean reg)throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.updateReceiptChequStatus(reg);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	
	// Query for deltaCheck mandatory(Laboratory) June25 2018 starts @Nayana
	public String getTestResultCountForDeltaCheck(RegistrationBean regBean)throws DaoException{
		String count="";
		try {
			eclinicDaoManager.startTransaction();
			count=laboratoryDao.getTestResultCountForDeltaCheck(regBean);
			eclinicDaoManager.commitTransaction();
		}
		catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		
		return count;
	}
	// Query for deltaCheck mandatory(Laboratory) June25 2018 ends @Nayana

	public void insertintoInvoiceApprovedAmount(SetupBean setBean) throws DaoException{
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.insertintoInvoiceApprovedAmount(setBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		
	}

	public ArrayList<SetupBean> getAllFilesByPaymentReference(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean>fileList = null;
		try {
			eclinicDaoManager.startTransaction();
			fileList=setupDao.getAllFilesByPaymentReference(setupBean);
			eclinicDaoManager.commitTransaction();
		}
		catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		
		return fileList;
	}

	public void DropInvoiceApprovedAmount() throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.DropInvoiceApprovedAmount();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		
	}

	public void createInvoiceApprovedAmount() throws DaoException {
		try 
		{        	
			eclinicDaoManager.startTransaction();
			setupDao.createInvoiceApprovedAmount();
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		
	}

	public ArrayList<SetupBean> getAllMissingReceiptAdjInvoices(SetupBean setupBean) throws DaoException {
		ArrayList<SetupBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = setupDao.getAllMissingReceiptAdjInvoices(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}

	
	
	public synchronized String getMaxrequestNo(RegistrationBean regbean) throws DaoException 
	{
		String maxReqNo = null;
		try {
			eclinicDaoManager.startTransaction();
			maxReqNo = laboratoryDao.getMaxrequestNo(regbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return maxReqNo;
	}
	
	public RegistrationBean getDoctorsId(RegistrationBean rgistrationBean) throws DaoException 
	{

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getDoctorsId(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}

	public RegistrationBean getDepartmentId(RegistrationBean rgistrationBean) throws DaoException 
	{

		RegistrationBean us = null;
		try {
			eclinicDaoManager.startTransaction();
			us = laboratoryDao.getDepartmentId(rgistrationBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return us;
	}
	
	public synchronized String checkOpNumberExist(RegistrationBean regbean) throws DaoException 
	{
		String opNumber = null;
		try {
			eclinicDaoManager.startTransaction();
			opNumber = registrationDao.checkOpNumberExist(regbean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return opNumber;
	}
	//Camp Setup Changes-Master Setup July10 2018
		public ArrayList getAllCampSetup(SetupBean setupBean)throws DaoException {
			ArrayList<SetupBean> list = null;
			try {
				eclinicDaoManager.startTransaction();
				list = setupDao.getAllCampSetup(setupBean);
				eclinicDaoManager.commitTransaction();
			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return list;
		}
		
		public void insertintoCampSetup(SetupBean setBean) throws DaoException{
			try 
			{        	
				eclinicDaoManager.startTransaction();
				setupDao.insertintoCampSetup(setBean);
				eclinicDaoManager.commitTransaction();

			} 
			catch (DaoException e) 
			{
				try 
				{
					eclinicDaoManager.rollbackTransaction();
				} 
				catch (Exception e2) 
				{
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			
		}
		public void updateCampSetup(SetupBean setupBean) throws DaoException{
			try 
			{        	
				eclinicDaoManager.startTransaction();
				setupDao.updateCampSetup(setupBean);
				eclinicDaoManager.commitTransaction();

			} 
			catch (DaoException e) 
			{
				try 
				{
					eclinicDaoManager.rollbackTransaction();
				} 
				catch (Exception e2) 
				{
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			
		}
		public void deleteCampSetup(SetupBean setupBean) throws DaoException{
			try 
			{        	
				eclinicDaoManager.startTransaction();
				setupDao.deleteCampSetup(setupBean);
				eclinicDaoManager.commitTransaction();

			} 
			catch (DaoException e) 
			{
				try 
				{
					eclinicDaoManager.rollbackTransaction();
				} 
				catch (Exception e2) 
				{
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			
		}

		public void actDeactCamps(SetupBean setupBean) throws DaoException{
			try 
			{        	
				eclinicDaoManager.startTransaction();
				setupDao.actDeactCamps(setupBean);
				eclinicDaoManager.commitTransaction();

			} 
			catch (DaoException e) 
			{
				try 
				{
					eclinicDaoManager.rollbackTransaction();
				} 
				catch (Exception e2) 
				{
				}
				throw ((DaoException) e.fillInStackTrace());
			}		
		}
		
		//Camp Setup Changes-Master Setup July10 2018 endss
	public String checkDuplicateLabIdno(ParameterBean parameterBean)throws DaoException {

		String labIdno="";
		try {        	
			eclinicDaoManager.startTransaction();
			labIdno=laboratoryDao.checkDuplicateLabIdno(parameterBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());

		}
		return labIdno;
	}
	public String checkDuplicateTestId(ParameterBean parameterBean)throws DaoException {

		String testId="";
		try {        	
			eclinicDaoManager.startTransaction();
			testId=laboratoryDao.checkDuplicateTestId(parameterBean);
			eclinicDaoManager.commitTransaction();
		} 
		catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());

		}
		return testId;
	}
	public void updatePatGenDetails(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {

			RegistrationBean oldBean = getRegistrationDetails(registrationBean);

			eclinicDaoManager.startTransaction();
			registrationDao.updatePatGenDetails(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Edited & Updated Patient Registration Details From Test Result", oldBean.getOp_number(),
					oldBean.getConsult_id(), "new_registration");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public void updatePatGenConsultationDetails(RegistrationBean registrationBean, HttpServletRequest request) throws DaoException {
		try {

			RegistrationBean oldBean = getRegistrationDetails(registrationBean);

			eclinicDaoManager.startTransaction();
			registrationDao.updatePatGenConsultationDetails(registrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Edited & Updated Patient Registration Details From Test Result", oldBean.getOp_number(),
					oldBean.getConsult_id(), "doctor_consult");

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	public List<RegistrationBean> getAllTestResultsDtls(RegistrationBean registrationBean) throws DaoException 
	{
		List<RegistrationBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=laboratoryDao.getAllTestResultsDtls(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<RegistrationBean> getAllTestParameterDtls(RegistrationBean registrationBean) throws DaoException 
	{
		List<RegistrationBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=laboratoryDao.getAllTestParameterDtls(registrationBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public void updateTestResultValuesMale(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{
		  RegistrationBean oldBean = getRegistrationDetails(rgistrationBean);
		  oldBean.setLabtest_name(rgistrationBean.getLabtest_name());
		  oldBean.setParameter_name(rgistrationBean.getTestName());
		  oldBean.setFnormal_value(rgistrationBean.getMnormal_value());
		  oldBean.setMin_value(rgistrationBean.getMmin_value());
		  oldBean.setMax_value(rgistrationBean.getMmax_value());
		try 
		{        	
			eclinicDaoManager.startTransaction();
			laboratoryDao.updateTestResultValuesMale(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Updated Patient Result after updating patient details From Test Result Screen", oldBean.getOp_number(),
					oldBean.getConsult_id(), "test_result");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	
	public void updateTestResultValuesFemale(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{
		  RegistrationBean oldBean = getRegistrationDetails(rgistrationBean);
		  oldBean.setLabtest_name(rgistrationBean.getLabtest_name());
		  oldBean.setParameter_name(rgistrationBean.getTestName());
		  oldBean.setFnormal_value(rgistrationBean.getFnormal_value());
		  oldBean.setMin_value(rgistrationBean.getFmin_value());
		  oldBean.setMax_value(rgistrationBean.getFmax_value());
		try 
		{        	
			eclinicDaoManager.startTransaction();
			laboratoryDao.updateTestResultValuesFemale(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Updated Patient Result after updating patient details From Test Result Screen", oldBean.getOp_number(),
					oldBean.getConsult_id(), "test_result");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	
	public void insertTestParametersInTestResults(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
	{
		RegistrationBean oldBean = getRegistrationDetails(rgistrationBean);
		oldBean.setLabtest_name(rgistrationBean.getLabtest_name());
		oldBean.setParameter_name(rgistrationBean.getTestName());
		try 
		{        	
			eclinicDaoManager.startTransaction();
			laboratoryDao.insertTestParametersInTestResults(rgistrationBean);
			eclinicDaoManager.commitTransaction();

			auditLogEntry(oldBean, request, "UPDATE", "Inserted parameter In Test Result after updating patient details From Test Result Screen", oldBean.getOp_number(),
					oldBean.getConsult_id(), "test_result");

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}

	public void updateDuplicateVoucherNo()throws DaoException  {
		try {
			eclinicDaoManager.startTransaction();
			paymentDao.updateDuplicateVoucherNo();
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}

	}
	
	//Query to fetch medicalformsdiagrams -Nayana july 16 2018 @start
		public ArrayList getMedicalFormsDiagrams(MedicalFormsBean medicalFormsBean) throws DaoException {
			ArrayList<MedicalFormsBean> diaglist = null;
			try {
				eclinicDaoManager.startTransaction();
				diaglist = consultationDao.getMedicalFormsDiagrams(medicalFormsBean);
				eclinicDaoManager.commitTransaction();
			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return diaglist;
		}

		public ArrayList getAllMedicalFormDiagrams4Patient(MedicalFormsBean medicalFormsBean) throws DaoException {
			ArrayList<MedicalFormsBean> diaglist = null;
			try {
				eclinicDaoManager.startTransaction();
				diaglist = consultationDao.getAllMedicalFormDiagrams4Patient(medicalFormsBean);
				eclinicDaoManager.commitTransaction();
			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return diaglist;
		}
		//Query to fetch medicalformsdiagrams -Nayana july 16 2018 @ends
		
		public void deleteFromLeaveAllot(HierarchySetupBean hBean)throws DaoException  {
			try {
				eclinicDaoManager.startTransaction();
				hierarchyDao.deleteFromLeaveAllot(hBean);
				eclinicDaoManager.commitTransaction();

			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}

		}
		public ArrayList getLeaveGroupDetails(HierarchySetupBean hBean) throws DaoException {
			ArrayList<HierarchySetupBean> list = null;
			try {
				eclinicDaoManager.startTransaction();
				list = hierarchyDao.getLeaveGroupDetails(hBean);
				eclinicDaoManager.commitTransaction();
			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return list;
		}	
		public void insertLeaveAllotPrivilege(HierarchySetupBean hBean)throws DaoException  {
			try {
				eclinicDaoManager.startTransaction();
				hierarchyDao.insertLeaveAllotPrivilege(hBean);
				eclinicDaoManager.commitTransaction();

			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}

		}
		
				
		public void updatePatientRequest(RegistrationBean registrationBean) throws DaoException {
			try {

				eclinicDaoManager.startTransaction();
				laboratoryDao.updatePatientRequest(registrationBean);
				eclinicDaoManager.commitTransaction();

			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}

		}
		
		public String getLeaveApprovalStatus(HierarchySetupBean hBean) throws DaoException{
			String status = null;
			try {
				eclinicDaoManager.startTransaction();
				status = hierarchyDao.getLeaveApprovalStatus(hBean);
				eclinicDaoManager.commitTransaction();
			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return status;
		}
		public void updateModuleSubLeavePriv(HierarchySetupBean hBean) throws DaoException 
		{

			try 
			{        	
				eclinicDaoManager.startTransaction();
				hierarchyDao.updateModuleSubLeavePriv(hBean);
				eclinicDaoManager.commitTransaction();

			} 
			catch (DaoException e) 
			{
				try 
				{
					eclinicDaoManager.rollbackTransaction();
				} 
				catch (Exception e2) 
				{
				}
				throw ((DaoException) e.fillInStackTrace());
			}

		}
		public String getLeaveApprovalModule(HierarchySetupBean hBean) throws DaoException{
			String status = null;
			try {
				eclinicDaoManager.startTransaction();
				status = hierarchyDao.getLeaveApprovalModule(hBean);
				eclinicDaoManager.commitTransaction();
			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return status;
		}

		public void deleteModuleSubLeavePriv(HierarchySetupBean hBean) throws DaoException 
		{

			try 
			{        	
				eclinicDaoManager.startTransaction();
				hierarchyDao.deleteModuleSubLeavePriv(hBean);
				eclinicDaoManager.commitTransaction();

			} 
			catch (DaoException e) 
			{
				try 
				{
					eclinicDaoManager.rollbackTransaction();
				} 
				catch (Exception e2) 
				{
				}
				throw ((DaoException) e.fillInStackTrace());
			}

		}
		public String checkLeaveApprovalAllotted(HierarchySetupBean hBean) throws DaoException{
			String status = null;
			try {
				eclinicDaoManager.startTransaction();
				status = hierarchyDao.checkLeaveApprovalAllotted(hBean);
				eclinicDaoManager.commitTransaction();
			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return status;		
		}
		public RegistrationBean getPatientAndConsultLabDtls(RegistrationBean rgistrationBean) throws DaoException {
			try {
				eclinicDaoManager.startTransaction();
				rgistrationBean = laboratoryDao.getPatientAndConsultLabDtls(rgistrationBean);
				eclinicDaoManager.commitTransaction();
			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return rgistrationBean;
		}
		
		public String fetchDiagnosisForLis(RegistrationBean rgistrationBean)throws DaoException {

			String diagnosis="";
			try {        	
				eclinicDaoManager.startTransaction();
				diagnosis=laboratoryDao.fetchDiagnosisForLis(rgistrationBean);
				eclinicDaoManager.commitTransaction();
			} 
			catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} 
				catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());

			}
			return diagnosis;
		}
		
		public List<RegistrationBean> getHl7LabTestResults(RegistrationBean rgistrationBean)throws DaoException {
			List<RegistrationBean> list=null;
			try 
			{        	
				eclinicDaoManager.startTransaction();
				list=(ArrayList<RegistrationBean>)laboratoryDao.getHl7LabTestResults(rgistrationBean);
				eclinicDaoManager.commitTransaction();

			} 
			catch (DaoException e) 
			{
				try 
				{
					eclinicDaoManager.rollbackTransaction();
				} 
				catch (Exception e2) 
				{
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return list;
		}
		public void updateHl7TestResults(RegistrationBean rgistrationBean, HttpServletRequest request) throws DaoException 
		{

			try 
			{        	
				eclinicDaoManager.startTransaction();
				laboratoryDao.updateHl7TestResults(rgistrationBean);
				eclinicDaoManager.commitTransaction();

				/*auditLogEntry(rgistrationBean, request, "UPDATE", "Updated Test Status", rgistrationBean.getOp_number(), rgistrationBean.getConsult_id(),
						"test_details");*/

			} 
			catch (DaoException e) 
			{
				try 
				{
					eclinicDaoManager.rollbackTransaction();
				} 
				catch (Exception e2) 
				{
				}
				throw ((DaoException) e.fillInStackTrace());
			}

		} 
		
		public List getAllOutSourceTestList(RegistrationBean registrationBean) throws DaoException 
		{

			List us = null;
			try {
				eclinicDaoManager.startTransaction();
				us = laboratoryDao.getAllOutSourceTestList(registrationBean);
				eclinicDaoManager.commitTransaction();
			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return us;
		}
		public List getAllSendoutLabTestForAck(RegistrationBean registrationBean) throws DaoException 
		{

			List us = null;
			try {
				eclinicDaoManager.startTransaction();
				us = laboratoryDao.getAllSendoutLabTestForAck(registrationBean);
				eclinicDaoManager.commitTransaction();
			} catch (DaoException e) {
				try {
					eclinicDaoManager.rollbackTransaction();
				} catch (Exception e2) {
				}
				throw ((DaoException) e.fillInStackTrace());
			}
			return us;
		}
		//Acknowledge Status for MedicalFormsMaster -- Aug12 2018 @start
				public String insertintoMedicalFormsAckMaster(MedicalFormsBean medicalFormsBean) throws DaoException 
				{
					String ack_id="";
					try 
					{        	
						eclinicDaoManager.startTransaction();
						consultationDao.insertintoMedicalFormsAckMaster(medicalFormsBean);
						ack_id=consultationDao.getLastInsertAckId();
						eclinicDaoManager.commitTransaction();
					} 
					catch (DaoException e) 
					{
						try 
						{
							eclinicDaoManager.rollbackTransaction();
						} 
						catch (Exception e2) 
						{
						}
						throw ((DaoException) e.fillInStackTrace());
					}
					return ack_id;

				}
				public void updatePatientMedicalFormsAckStatus(MedicalFormsBean medicalFormsBean, HttpServletRequest request) throws DaoException {
					try 
					{        	
						eclinicDaoManager.startTransaction();
						consultationDao.updatePatientMedicalFormsAckStatus(medicalFormsBean);
						eclinicDaoManager.commitTransaction();

					} 
					catch (DaoException e) 
					{
						try 
						{
							eclinicDaoManager.rollbackTransaction();
						} 
						catch (Exception e2) 
						{
						}
						throw ((DaoException) e.fillInStackTrace());
					}


				}

				public ArrayList getAllMedicalFormAcknowledgements(MedicalFormsBean medformBean) throws DaoException {
					ArrayList<MedicalFormsBean> list=null;
					try 
					{        	
						eclinicDaoManager.startTransaction();
						list=consultationDao.getAllMedicalFormAcknowledgements(medformBean);
						eclinicDaoManager.commitTransaction();

					} 
					catch (DaoException e) 
					{
						try 
						{
							eclinicDaoManager.rollbackTransaction();
						} 
						catch (Exception e2) 
						{
						}
						throw ((DaoException) e.fillInStackTrace());
					}
					return list;
				} 
				public void deletePatientMedicalForms(MedicalFormsBean medicalFormsBean) throws DaoException {
					try {
						eclinicDaoManager.startTransaction();
						consultationDao.deletePatientMedicalForms(medicalFormsBean);
						consultationDao.deletePatientMedicalFormsAckMaster(medicalFormsBean);
						eclinicDaoManager.commitTransaction();

					} catch (DaoException e) {
						try {
							eclinicDaoManager.rollbackTransaction();
						} catch (Exception e2) {
						}
						throw ((DaoException) e.fillInStackTrace());
					}
					
				}
				public String getMedicalFormsTotPoints(MedicalFormsBean medicalFormsBean) throws DaoException {
					String totpoints = null;
					try 
					{        	
						eclinicDaoManager.startTransaction();
						totpoints=consultationDao.getMedicalFormsTotPoints(medicalFormsBean);
						eclinicDaoManager.commitTransaction();

					} 
					catch (DaoException e) 
					{
						try 
						{
							eclinicDaoManager.rollbackTransaction();
						} 
						catch (Exception e2) 
						{
						}
						throw ((DaoException) e.fillInStackTrace());
					}
					return totpoints;
				}
				//Acknowledge Status for MedicalFormsMaster -- Aug12 2018 @endss
				public ArrayList<SetupBean> getAllDentalTreatmentsById(SetupBean setupBean) throws DaoException{
					ArrayList<SetupBean> list=null;
					try 
					{        	
						eclinicDaoManager.startTransaction();
						list=setupDao.getAllDentalTreatmentsById(setupBean);
						eclinicDaoManager.commitTransaction();

					} 
					catch (DaoException e) 
					{
						try 
						{
							eclinicDaoManager.rollbackTransaction();
						} 
						catch (Exception e2) 
						{
						}
						throw ((DaoException) e.fillInStackTrace());
					}
					return list;
				}				
				public void copyPlanDetailstoAnotherOP(SetupBean setupBean,HttpServletRequest request) throws DaoException 
				{
					String planid=null;
					try 
					{        	
						eclinicDaoManager.startTransaction();
						setupDao.insertTreatPlan(setupBean);
						planid=setupDao.getLastTreatPlanID();
						setupBean.setPlan_id(planid);
						setupDao.copyDentalTreatmentsFromPlan(setupBean);
						eclinicDaoManager.commitTransaction();
						auditLogEntry(setupBean, request, "INSERT", "Copied Dental Treatments from Plan ", setupBean.getOp_number(), setupBean.getConsult_id(), "treatment_plan");


					} 
					catch (DaoException e) 
					{
						try 
						{
							eclinicDaoManager.rollbackTransaction();
						} 
						catch (Exception e2) 
						{
						}
						throw ((DaoException) e.fillInStackTrace());
					}					
				}
				//Patient Recall Remarks - Appointment August27 2018
				public void savePatientRecallRemarks(AppointmentBean appBean) throws DaoException{
					try {
						eclinicDaoManager.startTransaction();
						appointDao.savePatientRecallRemarks(appBean);
						eclinicDaoManager.commitTransaction();

					} catch (DaoException e) {
						try {
							eclinicDaoManager.rollbackTransaction();
						} catch (Exception e2) {
						}
						throw ((DaoException) e.fillInStackTrace());
					}
					
				}

				public ArrayList<AppointmentBean> getAllPatientRecallRemarks(AppointmentBean appBean) throws DaoException{
					ArrayList<AppointmentBean> list=null;
					try {
						eclinicDaoManager.startTransaction();
						list=(ArrayList<AppointmentBean>) appointDao.getAllPatientRecallRemarks(appBean);
						eclinicDaoManager.commitTransaction();

					} catch (DaoException e) {
						try {
							eclinicDaoManager.rollbackTransaction();
						} catch (Exception e2) {
						}
						throw ((DaoException) e.fillInStackTrace());
					}
					return list;
				}
	
				public List<RegistrationBean> getPatientOutstandingByGroup(RegistrationBean rgistrationBean) throws DaoException {

					List<RegistrationBean> us = null;
					try {
						eclinicDaoManager.startTransaction();
						us = registrationDao.getPatientOutstandingByGroup(rgistrationBean);
						eclinicDaoManager.commitTransaction();
					} catch (DaoException e) {
						try {
							eclinicDaoManager.rollbackTransaction();
						} catch (Exception e2) {
						}
						throw ((DaoException) e.fillInStackTrace());
					}
					return us;
				}
				
				
public synchronized void updateReferLabTestResults(RegistrationBean registrationBean,HttpServletRequest request) throws Exception{
	
	try{        	
	
		eclinicDaoManager.startTransaction();
	
	UserBean userBean=new UserBean();
	if(request.getAttribute("userDetails")!=null)
	{
		userBean=(UserBean)request.getAttribute("userDetails");
	}

	String referedConsultId = "";
	String referedLabIdno = "";
	//String labIdNo=registrationBean.getLab_idno();
	ArrayList orglist=(ArrayList)laboratoryDao.getLabTestOrganism(registrationBean);
	
	if(registrationBean.getConsult_id()!=null){
		/*registrationBean.setQuery("SELECT if(refered_consult_id is null,'',refered_consult_id) FROM doctor_consult where consult_id='"+registrationBean.getConsult_id() + "'");
		referedConsultId = registrationDao.isAlreadyExist(registrationBean);*/
		parameterBean = new ParameterBean();
		parameterBean.setField_name("refered_consult_id");
		parameterBean.setTable_name("doctor_consult");
		parameterBean.setField_name1("consult_id");
		parameterBean.setField_value1(registrationBean.getConsult_id());
		parameterBean.setField_name2(" refer_consult_status='Y'");
		referedConsultId =commonDao.fetchValueWithSingleParam(parameterBean);
		parameterBean=null;
		
	}
	if (referedConsultId != null && !referedConsultId.equals("null") && !referedConsultId.equals("") && referedConsultId.length() > 0) {
		
		/*parameterBean = new ParameterBean();
		parameterBean.setField_name("sendout_lab");
		parameterBean.setTable_name("test_details");
		parameterBean.setField_name1("consult_id");
		parameterBean.setField_value1(referedConsultId);
		parameterBean.setOffice_id(null);
		parameterBean.setField_name2(" test_details.sendout_lab !='0'");
		String samp_count =commonDao.getCountofCommon(parameterBean);
		parameterBean=null;*/
		
		
		//if(samp_count != null && !samp_count.equals("0")) {
			
			//registrationBean.setQuery("SELECT distinct lab_idno FROM test_details where consult_id='"+referedConsultId+"' and test_id='"+registrationBean.getTestId()+"'");
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("test_details");
			parameterBean.setField_name("distinct lab_idno");
			parameterBean.setField_name1("consult_id");
			parameterBean.setField_value1(referedConsultId);
			parameterBean.setOffice_id(null);
			parameterBean.setField_name2("test_id='"+registrationBean.getTestId()+"'");
			referedLabIdno = commonDao.fetchValueWithSingleParam(parameterBean);
			parameterBean=null;
			
		if(referedLabIdno !=null && !referedLabIdno.equals("")) {
			
			registrationBean.setDispatch_status(null);
			RegistrationBean testBean = registrationDao.getTestDetailsById(registrationBean);
			//ArrayList samplelist = (ArrayList) getTestResultForReport(registrationBean);
			List<RegistrationBean> samplelist = registrationDao.getTestResultForReport(registrationBean);
			
			registrationBean.setLab_idno(referedLabIdno);
			registrationBean.setTestDetailsid("");
			RegistrationBean refTestBean = registrationDao.getTestDetailsById(registrationBean);
			//ArrayList referedSamplelist = (ArrayList) getTestResultForReport(registrationBean);
			
			//registrationBean.setQuery("SELECT office_id FROM doctor_consult where consult_id='"+referedConsultId+"' ");
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("doctor_consult");
			parameterBean.setField_name("office_id");
			parameterBean.setField_name1("consult_id");
			parameterBean.setField_value1(referedConsultId);
			parameterBean.setOffice_id(null);
			parameterBean.setField_name2(null);
			String office_id = commonDao.fetchValueWithSingleParam(parameterBean);
			parameterBean=null;
			registrationBean.setOffice_id(office_id);
			//List<RegistrationBean> referedSamplelist = registrationDao.getTestResultForReport(registrationBean);
			
			
			
			String fileno = null;
            if (null != orglist && orglist.size() > 0) {
            	
            	/*registrationBean.setQuery("delete from test_organism where lab_idno='"+referedLabIdno+"'");				  
            	registrationDao.deleteQuery(registrationBean);*/ 
            	parameterBean = new ParameterBean();
    			parameterBean.setTable_name("test_organism");
    			parameterBean.setField_name1("lab_idno='"+referedLabIdno+"'");
            	commonDao.deleteQueryInCommon(parameterBean);
            	parameterBean=null;
				/*registrationBean.setQuery("delete from test_sensitivity where lab_idno='"+referedLabIdno+"'");		
				registrationDao.deleteQuery(registrationBean);*/ 
            	parameterBean = new ParameterBean();
    			parameterBean.setTable_name("test_sensitivity");
    			parameterBean.setField_name1(" lab_idno='"+referedLabIdno+"'");
            	commonDao.deleteQueryInCommon(parameterBean);
            	parameterBean=null;
				
				SetupBean orgBean= new SetupBean();
				RegistrationBean orgBean1= new RegistrationBean();
				Iterator orgitr=orglist.iterator();
				while(orgitr.hasNext())
				{
					orgBean=(SetupBean)orgitr.next();
					orgBean1.setTestId(orgBean.getTest_id());
					orgBean1.setLab_idno(referedLabIdno);
					orgBean1.setOrganism_id(orgBean.getOrganism_id());
					laboratoryDao.insertTestOrganism(orgBean1);
					//orgBean1.setQuery("SELECT max(id) FROM test_organism");
					parameterBean = new ParameterBean();
					parameterBean.setTable_name("test_organism");
					fileno=commonDao.fetchMaxIdfromTable(parameterBean);
					parameterBean=null;
					
					orgBean1.setLab_idno(null);
					orgBean1.setTest_organism_id(orgBean.getSerial_id());
					ArrayList senlist=(ArrayList)laboratoryDao.getLabTestSensitivity(orgBean1);
					if (null != senlist && senlist.size() > 0) {
						SetupBean senBean=null;
						RegistrationBean senRegBean= new RegistrationBean();
						Iterator senitr=senlist.iterator();
						while(senitr.hasNext())
						{
							senBean=(SetupBean)senitr.next();
							senRegBean.setTest_organism_id(fileno);
							senRegBean.setLab_idno(referedLabIdno);
							senRegBean.setAntibiotic_id(senBean.getAntibiotic_id());
							senRegBean.setSensitivity(senBean.getSensitivity());
							laboratoryDao.insertTestAntibiotic(senRegBean);
						}
					}
				}
					
			}
            
            parameterBean = new ParameterBean();
			parameterBean.setTable_name("office_details");
			parameterBean.setField_name("refer_auto_auth_dispatch");
			parameterBean.setField_name1("office_id");
			parameterBean.setField_value1(refTestBean.getOffice_id());
			parameterBean.setOffice_id(null);
			parameterBean.setField_name2(null);
			String autoAuthDispatch = commonDao.fetchValueWithSingleParam(parameterBean);
			parameterBean=null;
			
			parameterBean = new ParameterBean();
			parameterBean.setTable_name("test_details");
			//parameterBean.setField_name(" closed_status='Y',verified_date=sysdate(), verified_by='"+ testBean.getVerified_by() + "' , forward_toauth='Y', remarks='" + testBean.getRemarks() + "'");
			if(autoAuthDispatch != null && autoAuthDispatch.equals("Y"))
			   parameterBean.setField_name(" forward_toauth='Y',closed_status='Y',verified_date=sysdate(), verified_by='"+ userBean.getUser_id() + "',dispatch_status='Y', remarks='" + testBean.getRemarks() + "'");
			else
			   parameterBean.setField_name(" forward_toauth='Y', remarks='" + testBean.getRemarks() + "'");
			parameterBean.setField_name1(" test_Detailsid='"+ refTestBean.getTestDetailsid() + "' ");
			commonDao.updateQueryInCommon(parameterBean);
			parameterBean=null;

			Iterator itr = samplelist.iterator();
			//Iterator ritr = referedSamplelist.iterator();
			RegistrationBean testResultBean = null;
			//RegistrationBean referedTestResultBean = null;
			while (itr.hasNext()) {
				testResultBean = (RegistrationBean) itr.next();
				testResultBean.setLab_idno(referedLabIdno);
				testResultBean.setTest_Result(testResultBean.getTestResult());
				laboratoryDao.updateHl7TestResults(testResultBean);
			}
		
        /***************************** Update ejada status starts**********************************************/
			
			if (registrationBean.getIcd_code() != null && registrationBean.getIcd_code() != "") {
				//registrationBean.setQuery("select id from test_setup_ejada where cpt_code='" + registrationBean.getIcd_code() + "'");
				parameterBean = new ParameterBean();
				parameterBean.setTable_name("test_setup_ejada");
				parameterBean.setField_name("id");
				parameterBean.setField_name1("cpt_code");
				parameterBean.setField_value1(registrationBean.getIcd_code());
				parameterBean.setOffice_id(null);
				parameterBean.setField_name2(null);
				String id = commonDao.fetchValueWithSingleParam(parameterBean);
				parameterBean=null;

				if (id != null && id != "") 
				{
					    parameterBean = new ParameterBean();
					    parameterBean.setTable_name("consult_labtest");
					    parameterBean.setField_name("ejada_status='Y'");
					    parameterBean.setField_name1(" consult_id='" + registrationBean.getConsult_id()+"' and labtest_id='" + registrationBean.getTestId() + "'");
					    commonDao.updateQueryInCommon(parameterBean);
					    parameterBean=null;
					
						parameterBean = new ParameterBean();
						parameterBean.setTable_name("consult_labtest");
						parameterBean.setField_name("ejada_status='Y'");
						parameterBean.setField_name1(" consult_id='" + referedConsultId+"' and labtest_id='" + registrationBean.getTestId() + "'");
						commonDao.updateQueryInCommon(parameterBean);
						parameterBean=null;
				}
			}
		/***************************** Update ejada status end**********************************************/
		//}
		}
		
		
	}
			
	eclinicDaoManager.commitTransaction();
			
			
		}catch (Exception e){
			try {
				eclinicDaoManager.rollbackTransaction();
			}catch (Exception e2) 
			{
			}
			throw ((Exception) e.fillInStackTrace());
		}
}

public ArrayList getAllDentalTreatmentProcedures(SetupBean setupBean) throws DaoException {
	ArrayList setupBean1=null;
	try 
	{        	
		eclinicDaoManager.startTransaction();
		setupBean1=setupDao.getAllDentalTreatmentProcedures(setupBean);
		eclinicDaoManager.commitTransaction();

	} 
	catch (DaoException e) 
	{
		try 
		{
			eclinicDaoManager.rollbackTransaction();
		} 
		catch (Exception e2) 
		{
		}
		throw ((DaoException) e.fillInStackTrace());
	}
	return setupBean1;
}

public ArrayList<RegistrationBean> getCountConsultPackageList(SetupBean setupBean) throws DaoException {
	ArrayList<RegistrationBean> list = null;
	try {
		eclinicDaoManager.startTransaction();
		list = (ArrayList<RegistrationBean>) setupDao.getCountConsultPackageList(setupBean);
		eclinicDaoManager.commitTransaction();

	} catch (DaoException e) {
		try {
			eclinicDaoManager.rollbackTransaction();
		} catch (Exception e2) {
		}
		throw ((DaoException) e.fillInStackTrace());
	}
	return list;
}

public String getAllSelectedTooth4Plan(SetupBean details) throws DaoException 
{
	String tooth=null;
	try 
	{        	
		eclinicDaoManager.startTransaction();
		tooth=(String)setupDao.getAllSelectedTooth4Plan(details);
		eclinicDaoManager.commitTransaction();

	} 
	catch (DaoException e) 
	{
		try 
		{
			eclinicDaoManager.rollbackTransaction();
		} 
		catch (Exception e2) 
		{
		}
		throw ((DaoException) e.fillInStackTrace());
	}
	return tooth;
}

public ArrayList getIcdCodesEjada(InsuranceBean insBean) throws DaoException {
	ArrayList insuranceBean = null;
	try 
	{        	
		eclinicDaoManager.startTransaction();
		insuranceBean=insuranceDao.getIcdCodesEjada(insBean);
		eclinicDaoManager.commitTransaction();

	} 
	catch (DaoException e) 
	{
		try 
		{
			eclinicDaoManager.rollbackTransaction();
		} 
		catch (Exception e2) 
		{
		}
		throw ((DaoException) e.fillInStackTrace());
	}
	return insuranceBean;
}
public ArrayList<RegistrationBean> getConsultIdWiseLabExDocsAttached(DocumentDetailBean registrationBean) throws DaoException 
{
ArrayList<RegistrationBean> list=null;
try 
{        	
	eclinicDaoManager.startTransaction();
	list=(ArrayList)registrationDao.getConsultIdWiseLabExDocsAttached(registrationBean);
	eclinicDaoManager.commitTransaction();

} 
catch (DaoException e) 
{
	try 
	{
		eclinicDaoManager.rollbackTransaction();
	} 
	catch (Exception e2) 
	{
	}
	throw ((DaoException) e.fillInStackTrace());
}
return list;
}

public synchronized String getRequestNo(RegistrationBean regbean) throws DaoException 
{
String maxReqNo = null;
try {
	eclinicDaoManager.startTransaction();
	maxReqNo = laboratoryDao.getRequestNo(regbean);
	eclinicDaoManager.commitTransaction();
} catch (DaoException e) {
	try {
		eclinicDaoManager.rollbackTransaction();
	} catch (Exception e2) {
	}
	throw ((DaoException) e.fillInStackTrace());
}
return maxReqNo;
}

public ArrayList<RegistrationBean> getAllCountrywiseRegistrationList(SetupBean setupbean) throws DaoException {
	ArrayList<RegistrationBean> list = null;
	try {
		eclinicDaoManager.startTransaction();
		list = (ArrayList<RegistrationBean>) setupDao.getAllCountrywiseRegistrationList(setupbean);
		eclinicDaoManager.commitTransaction();

	} catch (DaoException e) {
		try {
			eclinicDaoManager.rollbackTransaction();
		} catch (Exception e2) {
		}
		throw ((DaoException) e.fillInStackTrace());
	}
	return list;
}
	public ArrayList getAllPreApprovalRequest(SetupBean setupBean) throws DaoException 
	{

	
		ArrayList list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList)registrationDao.getAllPreApprovalRequest(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList getAllPreApprovalResponse(SetupBean setupBean) throws DaoException 
	{

	
		ArrayList list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList)registrationDao.getAllPreApprovalResponse(setupBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getAllDhaStatProcCodeList(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getAllDhaStatProcCodeList(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<RegistrationBean> getAllDhaStatDiagCodeList(SetupBean setupbean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getAllDhaStatDiagCodeList(setupbean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList getAllEncounterList(HashMap map) throws DaoException 
	{

	
		ArrayList list=null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList)registrationDao.getAllEncounterList(map);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public ArrayList<String> getResWiseTimeslots(AppointmentBean appointmentBean) throws DaoException 
	{
		ArrayList<String> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<String>)appointDao.getResWiseTimeslots(appointmentBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
public RegistrationBean getBillAmountDetailsDaman(RegistrationBean queryBean) throws DaoException {
		RegistrationBean result = null;
		try {
			eclinicDaoManager.startTransaction();
			result = setupDao.getBillAmountDetailsDaman(queryBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return result;
	}

	public ArrayList getAllRefundedPackageAdvances(RegistrationBean regBean) throws DaoException {
		ArrayList<RegistrationBean> logList = null;
		try {
			eclinicDaoManager.startTransaction();
			logList = registrationDao.getAllRefundedPackageAdvances(regBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return logList;
	}	
	
	public ArrayList getAllBirthDaydata(SetupBean setupBean) throws DaoException{
		ArrayList<RegistrationBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)setupDao.getAllBirthDaydata(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList<RegistrationBean> getPatientNoVisitList(SetupBean setupBean) throws DaoException {
		ArrayList<RegistrationBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = (ArrayList<RegistrationBean>) setupDao.getPatientNoVisitList(setupBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	
	public ArrayList getTopSpenderReportList(SetupBean setupBean) throws DaoException{
		ArrayList<RegistrationBean> list=null;
		try 
		{        	
			eclinicDaoManager.startTransaction();
			list=(ArrayList<RegistrationBean>)setupDao.getTopSpenderReportList(setupBean);
			eclinicDaoManager.commitTransaction();

		} 
		catch (DaoException e) 
		{
			try 
			{
				eclinicDaoManager.rollbackTransaction();
			} 
			catch (Exception e2) 
			{
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}
	public List<HistoryPresentIllBean> getPatientMgmntPlanHistory(HistoryPresentIllBean historyPresentIllBean) throws DaoException{
		List<HistoryPresentIllBean> list = null;
		try {
			eclinicDaoManager.startTransaction();			
			list =  consultationDao.getPatientMgmntPlanHistory(historyPresentIllBean);			
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;
	}	
	public List<InPatientBean> getPatient_SurveyReport(InPatientBean ipBean)throws DaoException 
	{
		List<InPatientBean> chkList = null;
		try {
			eclinicDaoManager.startTransaction();
			chkList = inpatientDao.getPatient_SurveyReport(ipBean);
			eclinicDaoManager.commitTransaction();
		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return chkList;
	}
	public ArrayList<LaboratoryBean> getContainerConsumptionDetails(LaboratoryBean testBean)throws DaoException {
		ArrayList<LaboratoryBean> list = null;
		try {
			eclinicDaoManager.startTransaction();
			list = laboratoryDao.getContainerConsumptionDetails(testBean);
			eclinicDaoManager.commitTransaction();

		} catch (DaoException e) {
			try {
				eclinicDaoManager.rollbackTransaction();
			} catch (Exception e2) {
			}
			throw ((DaoException) e.fillInStackTrace());
		}
		return list;            
	}

}
